@page "/ledgermaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Ledger Master</PageTitle>

@if(viewing){
    <FrmView TableName="LedgerMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Ledger Master Entry">
    <ChildContent>
        <!-- Row 1: Ledger Code, Ledger Name, Group Code -->
        <ROW>
            <NInput Layout="1" Title="Ledger Code *" Type="number" @bind-Value="model.ledgerCodeStr" 
                    Min="1" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="Ledger Name *" Type="text" @bind-Value="model.ledgerName" 
                    Placeholder="Enter ledger name" />
            
            <RInput Title="Group Code *" @bind-Value="model.groupName" 
                    TableName="GroupMaster" ColumnName="GroupName"
                    Placeholder="Select group" />
        </ROW>

        <!-- Row 2: Debit Opening Balance, Credit Opening Balance, Closing Balance -->
        <ROW>
            <NInput Layout="1" Title="Debit Opening Balance *" Type="number" Value="@model.debitOpeningBalanceStr" 
                    Min="0" Step="0.01" Placeholder="Enter debit opening balance"
                    ValueChanged="@((string value) => OnBalanceChanged(value, "debit"))" />
            
            <NInput Layout="1" Title="Credit Opening Balance *" Type="number" Value="@model.creditOpeningBalanceStr" 
                    Min="0" Step="0.01" Placeholder="Enter credit opening balance"
                    ValueChanged="@((string value) => OnBalanceChanged(value, "credit"))" />
            
            <NInput Layout="1" Title="Closing Balance *" Type="number" @bind-Value="model.closingBalanceStr" 
                    Min="0" Step="0.01" Placeholder="Auto-calculated" ReadOnly="true" />
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Ledger</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    LedgerMasterModel model = new LedgerMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateLedgerCode();
        StateHasChanged();
    }

    private async Task OnBalanceChanged(string value, string balanceType)
    {
        try
        {
            // Update the appropriate field
            switch (balanceType)
            {
                case "debit":
                    model.debitOpeningBalanceStr = value;
                    break;
                case "credit":
                    model.creditOpeningBalanceStr = value;
                    break;
            }

            // Recalculate closing balance
            model.CalculateClosingBalance();
            
            // Update the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in balance calculation: {ex.Message}");
        }
    }

    private void GetGroupCodeFromName()
    {
        try
        {
            string query = $"SELECT GroupCode FROM GroupMaster WHERE GroupName = '{model.groupName}'";
            DataTable dt = db.GetDataTable(query);
            if (dt.Rows.Count > 0)
            {
                model.groupCode = Convert.ToInt32(dt.Rows[0]["GroupCode"]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting group code: {ex.Message}");
        }
    }

    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            GetGroupCodeFromName();
            
            if(isEditing){
                await model.Update();
            }
            else await model.SaveLedger();
            ShowMessage("Ledger record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Ledger: {ex.Message}");
            ShowMessage("Error saving ledger record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new LedgerCode if not editing
        if (!isEditing)
        {
            model.GenerateLedgerCode();
        }
        
        isEditing = false;
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}