@page "/suppliermaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Supplier Master</PageTitle>

@if(viewing){
    <FrmView TableName="SupplierMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Supplier Master Entry">
    <ChildContent>
        <!-- Row 1: Supplier Code, Supplier Name, Supplier City -->
        <ROW>
            <NInput Layout="1" Title="Supplier Code *" Type="number" @bind-Value="model.supplierCodeStr" 
                    Min="1" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="Supplier Name *" Type="text" Value="@model.supplierName" 
                    Placeholder="Enter supplier name" MaxLength="50" ValueChanged="CheckSupplierNameLength" />
            
            <NInput Layout="1" Title="Supplier City *" Type="text" Value="@model.supplierCity" 
                    Placeholder="Enter supplier city" MaxLength="50" ValueChanged="CheckSupplierCityLength" />
        </ROW>

        <!-- Row 2: Ledger Code, Phone No, Mobile No -->
        <ROW>
            <RInput Title="Ledger Code *" @bind-Value="model.ledgerName" 
                    TableName="LedgerMaster" ColumnName="LedgerName"
                    Placeholder="Select ledger account" />
            
            <NInput Layout="1" Title="Supplier Phone No *" Type="text" Value="@model.supplierPhoneNo" 
                    Placeholder="Enter phone number" MaxLength="50" ValueChanged="CheckSupplierPhoneNoLength" />
            
            <NInput Layout="1" Title="Supplier Mobile No *" Type="text" Value="@model.supplierMobileNo" 
                    Placeholder="Enter mobile number" MaxLength="50" ValueChanged="CheckSupplierMobileNoLength" />
        </ROW>

        <!-- Row 3: Email, GST No, PAN No -->
        <ROW>
            <NInput Layout="1" Title="Supplier Email *" Type="email" Value="@model.supplierEmail" 
                    Placeholder="Enter email address" MaxLength="50" ValueChanged="CheckSupplierEmailLength" />
            
            <NInput Layout="1" Title="Supplier GST No *" Type="text" Value="@model.supplierGSTNo" 
                    Placeholder="Enter GST number" MaxLength="50" ValueChanged="CheckSupplierGSTNoLength" />
            
            <NInput Layout="1" Title="Supplier PAN No *" Type="text" Value="@model.supplierPanNo" 
                    Placeholder="Enter PAN number" MaxLength="50" ValueChanged="CheckSupplierPanNoLength" />
        </ROW>

        <!-- Row 4: Bill Mode, Supplier Series Name, Supplier State Code -->
        <ROW>
            <NInput Layout="1" Title="Bill Mode *" Type="text" Value="@model.billMode" 
                    Placeholder="Enter billing mode" MaxLength="50" ValueChanged="CheckBillModeLength" />
            
            <NInput Layout="1" Title="Supplier Series Name *" Type="text" Value="@model.supplierSeriesName" 
                    Placeholder="Enter series name" MaxLength="50" ValueChanged="CheckSupplierSeriesNameLength" />
            
            <NInput Layout="1" Title="Supplier State Code *" Type="number" @bind-Value="model.supplierStateCodeStr" 
                    Min="0" Placeholder="Enter state code" />
        </ROW>

        <!-- Row 5: Credit Days -->
        <ROW>
            <NInput Layout="1" Title="Credit Days *" Type="number" @bind-Value="model.creditDaysStr" 
                    Min="0" Placeholder="Enter credit days" />
            
            <div class="col-md-4">
                <!-- Empty column for spacing -->
            </div>
            
            <div class="col-md-4">
                <!-- Empty column for spacing -->
            </div>
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Supplier</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Length Warning Messages -->
@if (!string.IsNullOrEmpty(lengthWarning))
{
    <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @lengthWarning
        <button type="button" class="btn-close" @onclick="ClearLengthWarning"></button>
    </div>
}

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    SupplierMasterModel model = new SupplierMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
    private string lengthWarning = "";
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateSupplierCode();
        StateHasChanged();
    }

    // Length checking methods - Updated to use string value directly
    private void CheckSupplierNameLength(string value)
    {
        model.supplierName = value;
        CheckFieldLength(value, "Supplier Name", 50);
    }

    private void CheckSupplierCityLength(string value)
    {
        model.supplierCity = value;
        CheckFieldLength(value, "Supplier City", 50);
    }

    private void CheckSupplierPhoneNoLength(string value)
    {
        model.supplierPhoneNo = value;
        CheckFieldLength(value, "Supplier Phone No", 50);
    }

    private void CheckSupplierMobileNoLength(string value)
    {
        model.supplierMobileNo = value;
        CheckFieldLength(value, "Supplier Mobile No", 50);
    }

    private void CheckSupplierEmailLength(string value)
    {
        model.supplierEmail = value;
        CheckFieldLength(value, "Supplier Email", 50);
    }

    private void CheckSupplierGSTNoLength(string value)
    {
        model.supplierGSTNo = value;
        CheckFieldLength(value, "Supplier GST No", 50);
    }

    private void CheckSupplierPanNoLength(string value)
    {
        model.supplierPanNo = value;
        CheckFieldLength(value, "Supplier PAN No", 50);
    }

    private void CheckBillModeLength(string value)
    {
        model.billMode = value;
        CheckFieldLength(value, "Bill Mode", 50);
    }

    private void CheckSupplierSeriesNameLength(string value)
    {
        model.supplierSeriesName = value;
        CheckFieldLength(value, "Supplier Series Name", 50);
    }

    private void CheckFieldLength(string value, string fieldName, int maxLength)
    {
        if (value.Length > maxLength)
        {
            lengthWarning = $"Warning: {fieldName} cannot exceed {maxLength} characters. Current length: {value.Length}";
            StateHasChanged();
        }
        else
        {
            ClearLengthWarning();
        }
    }

    private void GetLedgerCodeFromName()
    {
        try
        {
            if (!string.IsNullOrEmpty(model.ledgerName))
            {
                string query = $"SELECT LedgerCode FROM LedgerMaster WHERE LedgerName = '{model.ledgerName}'";
                DataTable dt = db.GetDataTable(query);
                if (dt.Rows.Count > 0)
                {
                    model.ledgerCode = Convert.ToInt32(dt.Rows[0]["LedgerCode"]);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting ledger code: {ex.Message}");
        }
    }

    private void ClearLengthWarning()
    {
        lengthWarning = "";
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        // Check for length violations before saving
        if (model.supplierName.Length > 50 || model.supplierCity.Length > 50 || 
            model.supplierPhoneNo.Length > 50 || model.supplierMobileNo.Length > 50 ||
            model.supplierEmail.Length > 50 || model.supplierGSTNo.Length > 50 ||
            model.supplierPanNo.Length > 50 || model.billMode.Length > 50 ||
            model.supplierSeriesName.Length > 50)
        {
            ShowMessage("Cannot save: One or more fields exceed maximum length limit of 50 characters.", "danger", "bi-exclamation-triangle");
            return;
        }

        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            GetLedgerCodeFromName();
            
            if(isEditing){
                await model.Update();
            }
            else await model.SaveSupplier();
            ShowMessage("Supplier record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Supplier: {ex.Message}");
            ShowMessage("Error saving supplier record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new SupplierCode if not editing
        if (!isEditing)
        {
            model.GenerateSupplierCode();
        }
        
        isEditing = false;
        ClearMessage();
        ClearLengthWarning();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}