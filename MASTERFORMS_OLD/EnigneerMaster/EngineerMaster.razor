@page "/engineermaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Engineer Master</PageTitle>

@if(viewing){
    <FrmView TableName="EngineerMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Engineer Master Entry">
    <ChildContent>
        <!-- Row 1: Engineer Code, Engineer Name, Address1 -->
        <ROW>
            <NInput Layout="1" Title="Engineer Code *" Type="number" @bind-Value="model.engineerCodeStr" 
                    Min="1" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="Engineer Name *" Type="text" @bind-Value="model.engineerName" 
                    Placeholder="Enter engineer name" />
            
            <NInput Layout="1" Title="Address1 *" Type="text" @bind-Value="model.address1" 
                    Placeholder="Enter address" />
        </ROW>

        <!-- Row 2: City, Mobile No, Email ID -->
        <ROW>
            <NInput Layout="1" Title="City *" Type="text" @bind-Value="model.city" 
                    Placeholder="Enter city" />
            
            <NInput Layout="1" Title="Mobile No *" Type="tel" @bind-Value="model.mobileNo" 
                    Placeholder="Enter mobile number" />
            
            <NInput Layout="1" Title="Email ID *" Type="email" @bind-Value="model.emailID" 
                    Placeholder="Enter email address" />
        </ROW>

        <!-- Row 3: Password, FCM Token, Checkboxes -->
        <ROW>
            <NInput Layout="1" Title="Password *" Type="password" @bind-Value="model.password" 
                    Placeholder="Enter password" />
            
            <NInput Layout="1" Title="FCM Token" Type="text" @bind-Value="model.fcmToken" 
                    Placeholder="Enter FCM token (optional)" />
            
            <div class="col-md-4">
                <label class="form-label">Options</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.sendSMS" />
                    <label class="form-check-label">Send SMS</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.isActive" />
                    <label class="form-check-label">Is Active</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.loginflag" />
                    <label class="form-check-label">Login Flag</label>
                </div>
            </div>
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Engineer</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    EngineerMasterModel model = new EngineerMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateEngineerCode();
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if(isEditing){
                await model.Update();
            }
            else await model.SaveEngineer();
            ShowMessage("Engineer record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Engineer: {ex.Message}");
            ShowMessage("Error saving engineer record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new EngineerCode if not editing
        if (!isEditing)
        {
            model.GenerateEngineerCode();
        }
        
        isEditing = false;
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}