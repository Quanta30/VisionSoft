@page "/gststatemaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>GST State Master</PageTitle>

@if(viewing){
    <FrmView TableName="GSTStateMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="GST State Master Entry">
    <ChildContent>
        <!-- Row 1: State Code, State Name -->
        <ROW>
            <NInput Layout="1" Title="State Code *" Type="number" @bind-Value="model.stateCodeStr" 
                    Min="0" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="State Name" Type="text" @bind-Value="model.stateName" 
                    Placeholder="Enter state name (optional)" />
            
            <div class="col-md-4">
                <!-- Empty column for spacing -->
            </div>
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save State</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    GSTStateMasterModel model = new GSTStateMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateStateCode();
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if(isEditing){
                await model.Update();
            }
            else await model.SaveState();
            ShowMessage("GST State record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving GST State: {ex.Message}");
            ShowMessage("Error saving GST state record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new StateCode if not editing
        if (!isEditing)
        {
            model.GenerateStateCode();
        }
        
        isEditing = false;
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}