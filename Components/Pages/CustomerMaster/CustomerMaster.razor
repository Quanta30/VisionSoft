@page "/customermaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Customer Master</PageTitle>

@if(viewing){
    <FrmView TableName="CustomerMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Customer Master Entry">
    <ChildContent>
        <!-- Row 1: Customer Code, Ledger Code, Customer Name -->
        <ROW>
            <NInput Layout="1" Title="Customer Code *" Type="number" @bind-Value="model.customerCodeStr" 
                    Min="1" Placeholder="Enter customer code" ReadOnly=true />
            
            <RInput Title="Ledger Code *" @bind-Value="model.ledgerName" 
                    TableName="LedgerMaster" ColumnName="LedgerName"
                    Placeholder="Select ledger" />
            
            <NInput Layout="1" Title="Customer Name *" Type="text" @bind-Value="model.customerName" 
                    Placeholder="Enter customer name" />
        </ROW>

        <!-- Row 2: City, District, Phone No -->
        <ROW>
            <NInput Layout="1" Title="Customer City *" Type="text" @bind-Value="model.customerCity" 
                    Placeholder="Enter city" />
            
            <NInput Layout="1" Title="Customer District *" Type="text" @bind-Value="model.customerDistrict" 
                    Placeholder="Enter district" />
            
            <NInput Layout="1" Title="Customer Phone No *" Type="tel" @bind-Value="model.customerPhoneNo" 
                    Placeholder="Enter phone number" />
        </ROW>

        <!-- Row 3: Mobile No, Email, GST No -->
        <ROW>
            <NInput Layout="1" Title="Customer Mobile No *" Type="tel" @bind-Value="model.customerMobileNo" 
                    Placeholder="Enter mobile number" />
            
            <NInput Layout="1" Title="Customer Email *" Type="email" @bind-Value="model.customerEmail" 
                    Placeholder="Enter email address" />
            
            <NInput Layout="1" Title="Customer GST No *" Type="text" @bind-Value="model.customerGSTNo" 
                    Placeholder="Enter GST number" />
        </ROW>

        <!-- Row 4: PAN No, State Code, Bill Mode -->
        <ROW>
            <NInput Layout="1" Title="Customer PAN No *" Type="text" @bind-Value="model.customerPanNo" 
                    Placeholder="Enter PAN number" />
            
            <NInput Layout="1" Title="Customer State Code *" Type="number" @bind-Value="model.customerStateCodeStr" 
                    Min="0" Placeholder="Enter state code" />
            
            <NInput Layout="1" Title="Customer Bill Mode *" Type="text" @bind-Value="model.customerBillMode" 
                    Placeholder="Enter bill mode" />
        </ROW>

        <!-- Row 5: Credit Days, Person In Charge, Engineer Code -->
        <ROW>
            <NInput Layout="1" Title="Customer Credit Days *" Type="number" @bind-Value="model.customerCreditDaysStr" 
                     Min="0" Placeholder="Enter credit days" />
            
            <NInput Layout="1" Title="Person In Charge *" Type="text" @bind-Value="model.personIncharge" 
                    Placeholder="Enter person in charge" />
            
            <RInput Title="Engineer Code *" @bind-Value="model.engineerName" 
                    TableName="EngineerMaster" ColumnName="EngineerName"
                    Placeholder="Select engineer" />
        </ROW>

        <!-- Row 6: Customer District (duplicate), Customer Grade, Customer Address -->
        <ROW>
            <NInput Layout="1" Title="Customer District 2 *" Type="text" @bind-Value="model.customertDistrict" 
                    Placeholder="Enter district (alternate)" />
            
            <NInput Layout="1" Title="Customer Grade *" Type="text" @bind-Value="model.customerGrade" 
                    Placeholder="Enter customer grade" />
            
            <NInput Layout="1" Title="Customer Address *" Type="text" @bind-Value="model.customerAddress" 
                    Placeholder="Enter customer address" />
        </ROW>

        <!-- Row 7: Route Code, Area Code, Password -->
        <ROW>
            <RInput Title="Route Code *" @bind-Value="model.routeName" 
                    TableName="RouteMaster" ColumnName="RouteName"
                    Placeholder="Select route" />
            
            <RInput Title="Area Code *" @bind-Value="model.areaName" 
                    TableName="AreaMaster" ColumnName="AreaName"
                    Placeholder="Select area" />
            
            <NInput Layout="1" Title="Password" Type="password" @bind-Value="model.password" 
                    Placeholder="Enter password (optional)" />
        </ROW>

        <!-- Row 8: FCM Token, Checkboxes -->
        <ROW>
            <NInput Layout="1" Title="FCM Token" Type="text" @bind-Value="model.fcmToken" 
                    Placeholder="Enter FCM token (optional)" />
            
            <div class="col-md-4">
                <label class="form-label">Options</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dontShowInDebtorsList" />
                    <label class="form-check-label">Don't Show in Debtors List</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.discontinueParty" />
                    <label class="form-check-label">Discontinue Party</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.loginflag" />
                    <label class="form-check-label">Login Flag</label>
                </div>
            </div>
            
            <div class="col-md-4">
                <!-- Empty column for spacing -->
            </div>
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Customer</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    CustomerMasterModel model = new CustomerMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        // Generate next customer code
        model.customerCode = Convert.ToInt32(db.GenerateNextNo("CustomerMaster", "CustomerCode"));
        
        // âœ… Update the string binding property that the input uses
        model.customerCodeStr = model.customerCode.ToString();
        
        StateHasChanged();
        Console.WriteLine($"Generated Customer Code: {model.customerCode}");
    }
    private void GetLedgerCodeFromName()
    {
        try
        {
            string query = $"SELECT LedgerCode FROM LedgerMaster WHERE LedgerName = '{model.ledgerName}'";
            DataTable dt = db.GetDataTable(query);
            if (dt.Rows.Count > 0)
            {
                model.ledgerCode = Convert.ToInt32(dt.Rows[0]["LedgerCode"]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting ledger code: {ex.Message}");
        }
    }

    private void GetEngineerCodeFromName()
    {
        try
        {
            string query = $"SELECT EngineerCode FROM EngineerMaster WHERE EngineerName = '{model.engineerName}'";
            DataTable dt = db.GetDataTable(query);
            if (dt.Rows.Count > 0)
            {
                model.engineerCode = Convert.ToInt32(dt.Rows[0]["EngineerCode"]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting engineer code: {ex.Message}");
        }
    }

    private void GetRouteCodeFromName()
    {
        try
        {
            string query = $"SELECT RouteCode FROM RouteMaster WHERE RouteName = '{model.routeName}'";
            DataTable dt = db.GetDataTable(query);
            if (dt.Rows.Count > 0)
            {
                model.routeCode = Convert.ToInt32(dt.Rows[0]["RouteCode"]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting route code: {ex.Message}");
        }
    }

    private void GetAreaCodeFromName()
    {
        try
        {
            string query = $"SELECT AreaCode FROM AreaMaster WHERE AreaName = '{model.areaName}'";
            DataTable dt = db.GetDataTable(query);
            if (dt.Rows.Count > 0)
            {
                model.areaCode = Convert.ToInt32(dt.Rows[0]["AreaCode"]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting area code: {ex.Message}");
        }
    }

    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            GetLedgerCodeFromName();
            GetEngineerCodeFromName();
            GetRouteCodeFromName();
            GetAreaCodeFromName();
            
            if(isEditing){
                await model.Update();
            }
            else await model.SaveCustomer();
            ShowMessage("Customer record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Customer: {ex.Message}");
            ShowMessage("Error saving customer record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new customer code if not editing
        if (!isEditing)
        {
            model.customerCode = Convert.ToInt32(db.GenerateNextNo("CustomerMaster", "CustomerCode"));
            model.customerCodeStr = model.customerCode.ToString(); // âœ… Update string binding
        }
        
        isEditing = false;
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}