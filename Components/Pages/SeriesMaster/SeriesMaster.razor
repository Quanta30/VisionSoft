@page "/seriesmaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Series Master</PageTitle>

@if(viewing){
    <FrmView TableName="SeriesMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Series Master Entry">
    <ChildContent>
        <!-- Row 1: Series Code, Series Name, Voucher Type -->
        <ROW>
            <NInput Layout="1" Title="Series Code *" Type="number" @bind-Value="model.seriesCodeStr" 
                    Min="1" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="Series Name *" Type="text" Value="@model.seriesName" 
                    Placeholder="Enter series name" MaxLength="50" ValueChanged="CheckSeriesNameLength" />
            
            <NInput Layout="1" Title="Voucher Type *" Type="text" Value="@model.voucherType" 
                    Placeholder="Enter voucher type" MaxLength="50" ValueChanged="CheckVoucherTypeLength" />
        </ROW>

        <!-- Row 2: Consider In Accounts, Don't Apply GST, Bill Address Code -->
        <ROW>
            <NInput Layout="1" Title="Consider In Accounts *" Type="text" Value="@model.considerInAccounts" 
                    Placeholder="YES/NO" MaxLength="50" ValueChanged="CheckConsiderInAccountsLength" />
            
            <div class="col-md-4">
                <label class="form-label">Don't Apply GST</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dontApplyGst" />
                    <label class="form-check-label">Don't Apply GST</label>
                </div>
            </div>
            
            <NInput Layout="1" Title="Bill Address Code *" Type="number" @bind-Value="model.billAddressCodeStr" 
                    Min="0" Placeholder="Enter bill address code" />
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Series</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Length Warning Messages -->
@if (!string.IsNullOrEmpty(lengthWarning))
{
    <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @lengthWarning
        <button type="button" class="btn-close" @onclick="ClearLengthWarning"></button>
    </div>
}

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    SeriesMasterModel model = new SeriesMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
    private string lengthWarning = "";
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateSeriesCode();
        StateHasChanged();
    }

    // Length checking methods - Updated to use string value directly
    private void CheckSeriesNameLength(string value)
    {
        model.seriesName = value;
        CheckFieldLength(value, "Series Name", 50);
    }

    private void CheckVoucherTypeLength(string value)
    {
        model.voucherType = value;
        CheckFieldLength(value, "Voucher Type", 50);
    }

    private void CheckConsiderInAccountsLength(string value)
    {
        model.considerInAccounts = value;
        CheckFieldLength(value, "Consider In Accounts", 50);
    }

    private void CheckFieldLength(string value, string fieldName, int maxLength)
    {
        if (value.Length > maxLength)
        {
            lengthWarning = $"Warning: {fieldName} cannot exceed {maxLength} characters. Current length: {value.Length}";
            StateHasChanged();
        }
        else
        {
            ClearLengthWarning();
        }
    }

    private void ClearLengthWarning()
    {
        lengthWarning = "";
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        // Check for length violations before saving
        if (model.seriesName.Length > 50 || model.voucherType.Length > 50 || model.considerInAccounts.Length > 50)
        {
            ShowMessage("Cannot save: One or more fields exceed maximum length limit.", "danger", "bi-exclamation-triangle");
            return;
        }

        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if(isEditing){
                await model.Update();
            }
            else await model.SaveSeries();
            ShowMessage("Series record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Series: {ex.Message}");
            ShowMessage("Error saving series record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new SeriesCode if not editing
        if (!isEditing)
        {
            model.GenerateSeriesCode();
        }
        
        isEditing = false;
        ClearMessage();
        ClearLengthWarning();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}