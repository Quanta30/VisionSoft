@page "/secondhandproductmaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Second Hand Product Master</PageTitle>

@if(viewing){
    <FrmView TableName="SecondHandProductMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Second Hand Product Master Entry">
    <ChildContent>
        <!-- Row 1: Product Code, Product Name, Company Code -->
        <ROW>
            <NInput Layout="1" Title="Product Code *" Type="number" @bind-Value="model.secondHandProductCodeStr" 
                    Min="0" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="Product Name *" Type="text" @bind-Value="model.secondHandProductName" 
                    Placeholder="Enter second hand product name" />
            
            <RInput Title="Company Code *" @bind-Value="model.companyName" 
                    TableName="CompanyMaster" ColumnName="CompanyName"
                    Placeholder="Select company" />
        </ROW>

        <!-- Row 2: GST Category Code, HSN Code, Description -->
        <ROW>
            <RInput Title="GST Category Code *" @bind-Value="model.gstCategoryName" 
                    TableName="GstCategoryMaster" ColumnName="GSTCategoryName"
                    Placeholder="Select GST category" />
            
            <NInput Layout="1" Title="HSN Code *" Type="text" @bind-Value="model.hsnCode" 
                    Placeholder="Enter HSN code" />
            
            <NInput Layout="1" Title="Description *" Type="text" @bind-Value="model.description" 
                    Placeholder="Enter product description" />
        </ROW>

        <!-- Row 3: Warranty, Online Calls, Onsite Calls -->
        <ROW>
            <NInput Layout="1" Title="Warranty *" Type="number" @bind-Value="model.warrantyStr" 
                    Min="0" Placeholder="Enter warranty period (months)" />
            
            <NInput Layout="1" Title="Online Calls *" Type="number" @bind-Value="model.onlineCallsStr" 
                    Min="0" Placeholder="Enter online calls count" />
            
            <NInput Layout="1" Title="Onsite Calls *" Type="number" @bind-Value="model.onsiteCallsStr" 
                    Min="0" Placeholder="Enter onsite calls count" />
        </ROW>

        <!-- Row 4: Training Calls -->
        <ROW>
            <NInput Layout="1" Title="Training Calls *" Type="number" @bind-Value="model.trainingCallsStr" 
                    Min="0" Placeholder="Enter training calls count" />
            
            <div class="col-md-4">
                <!-- Empty column for spacing -->
            </div>
            
            <div class="col-md-4">
                <!-- Empty column for spacing -->
            </div>
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Product</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    SecondHandProductMasterModel model = new SecondHandProductMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateProductCode();
        StateHasChanged();
    }

    private void GetReferenceCodes()
    {
        try
        {
            // Get CompanyCode from CompanyName
            if (!string.IsNullOrEmpty(model.companyName))
            {
                string query = $"SELECT CompanyCode FROM CompanyMaster WHERE CompanyName = '{model.companyName}'";
                DataTable dt = db.GetDataTable(query);
                if (dt.Rows.Count > 0)
                {
                    model.companyCode = Convert.ToInt32(dt.Rows[0]["CompanyCode"]);
                }
            }

            // Get GSTCategoryCode from GSTCategoryName
            if (!string.IsNullOrEmpty(model.gstCategoryName))
            {
                string query = $"SELECT GSTCategoryCode FROM GstCategoryMaster WHERE GSTCategoryName = '{model.gstCategoryName}'";
                DataTable dt = db.GetDataTable(query);
                if (dt.Rows.Count > 0)
                {
                    model.gstCategoryCode = Convert.ToInt32(dt.Rows[0]["GSTCategoryCode"]);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting reference codes: {ex.Message}");
        }
    }

    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            GetReferenceCodes();
            
            if(isEditing){
                await model.Update();
            }
            else await model.SaveSecondHandProduct();
            ShowMessage("Second Hand Product record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Second Hand Product: {ex.Message}");
            ShowMessage("Error saving second hand product record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new ProductCode if not editing
        if (!isEditing)
        {
            model.GenerateProductCode();
        }
        
        isEditing = false;
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}