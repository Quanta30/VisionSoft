@page "/quotations"
@using System.Data
@using VisionSoft.Services
@inject NavigationManager Navigation
@inject SessionService SessionService
@namespace VisionSoft

@rendermode InteractiveServer

<PageTitle>Quotations</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Create Quotation</h4>
                </div>
                <div class="card-body">
                    <!-- Row 1: Quotation No and Date -->
                    <div class="row">
                        <NInput Title="Quotation No." 
                                Value="@quotationNo" 
                                ReadOnly="true" 
                                Placeholder="Auto Generated" />
                        
                        <NInput Title="Date" 
                                @bind-Value="quotationDate" 
                                Placeholder="Enter date" />
                    </div>

                    <!-- Row 2: Customer Name and Mobile -->
                    <div class="row">
                        <NInput Title="Customer Name" 
                                @bind-Value="customerName"
                                Placeholder="Select or enter customer name" />
                        
                        <NInput Title="Mobile No." 
                                @bind-Value="mobileNo" 
                                Placeholder="Enter mobile number" />
                    </div>

                    <!-- Row 3: City -->
                    <div class="row">
                        <NInput Title="City" 
                                @bind-Value="city" 
                                Placeholder="Enter city" />
                        
                        <!-- Empty column for alignment -->
                        <div class="col-md-6"></div>
                    </div>

                    <!-- Products Section -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <h5>Products</h5>
                            <RLister TableName="Product" 
                                     OnRowsUpdated="OnRListerUpdated" />
                        </div>
                    </div>

                    <!-- Calculation Section -->
                    <div class="row mt-4">
                        <div class="col-md-6 offset-md-6">
                            <div class="calculation-section">
                                <div class="row mb-2">
                                    <div class="col-6">
                                        <label class="form-label fw-bold">Total:</label>
                                    </div>
                                    <div class="col-6">
                                        <span class="calculation-value">@subTotal.ToString("F2")</span>
                                    </div>
                                </div>

                                <div class="row mb-2">
                                    <div class="col-6">
                                        <label class="form-label">Disc (%):</label>
                                    </div>
                                    <div class="col-6">
                                        <input type="number" 
                                               class="form-control form-control-sm" 
                                               @bind="discountPercent" 
                                               @oninput="CalculateTotals"
                                               step="0.01"
                                               min="0" 
                                               max="100" />
                                    </div>
                                </div>

                                <div class="row mb-2">
                                    <div class="col-6">
                                        <label class="form-label">GST (%):</label>
                                    </div>
                                    <div class="col-6">
                                        <input type="number" 
                                               class="form-control form-control-sm" 
                                               @bind="gstPercent" 
                                               @oninput="CalculateTotals"
                                               step="0.01"
                                               min="0" 
                                               max="50" />
                                    </div>
                                </div>

                                <div class="row mb-2">
                                    <div class="col-6">
                                        <label class="form-label">Add/Less:</label>
                                    </div>
                                    <div class="col-6">
                                        <input type="number" 
                                               class="form-control form-control-sm" 
                                               @bind="addLess" 
                                               @oninput="CalculateTotals"
                                               step="0.01" />
                                    </div>
                                </div>

                                <div class="row mb-2">
                                    <div class="col-6">
                                        <label class="form-label">Rnd (Round):</label>
                                    </div>
                                    <div class="col-6">
                                        <input type="number" 
                                               class="form-control form-control-sm" 
                                               @bind="roundOff" 
                                               @oninput="CalculateTotals"
                                               step="0.01" />
                                    </div>
                                </div>

                                <hr />

                                <div class="row">
                                    <div class="col-6">
                                        <label class="form-label fw-bold fs-5">Amount:</label>
                                    </div>
                                    <div class="col-6">
                                        <span class="final-amount">â‚¹@finalAmount.ToString("F2")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="row mt-4">
                        <div class="col-12 text-end">
                            <button class="btn btn-secondary me-2" @onclick="ClearForm">
                                <i class="bi bi-arrow-clockwise"></i> Clear
                            </button>
                            <button class="btn btn-primary" @onclick="SaveQuotation" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-save"></i> Save
                            </button>
                        </div>
                    </div>

                    <!-- Messages -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @successMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Form Fields
    private string quotationNo = "";
    private string quotationDate = DateTime.Now.ToString("yyyy-MM-dd");
    private string customerName = "";
    private string mobileNo = "";
    private string city = "";

    // Product Selection
    private List<DataRow> selectedProducts = new();

    // Calculations
    private decimal subTotal = 0;
    private decimal discountPercent = 0;
    private decimal gstPercent = 18; // Default GST
    private decimal addLess = 0;
    private decimal roundOff = 0;
    private decimal finalAmount = 0;

    // UI State
    private bool isSaving = false;
    private string errorMessage = "";
    private string successMessage = "";

    // Database
    private ClsDatabase clsDatabase = new ClsDatabase();

    protected override async Task OnInitializedAsync()
    {
        await GenerateQuotationNumber();
    }

    private async Task GenerateQuotationNumber()
    {
        try
        {
            quotationNo = clsDatabase.GenerateNextNo("Quotation", "QuotationNo", "QT");
        }
        catch (Exception ex)
        {
            quotationNo = "QT001";
            Console.WriteLine($"Error generating quotation number: {ex.Message}");
        }
    }

    private void CalculateTotals()
    {
        // Calculate subtotal from selected products
        subTotal = 0;
        foreach (var row in selectedProducts)
        {
            try
            {
                var quantity = GetQuantity(row);
                var price = GetPrice(row);
                subTotal += quantity * price;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error calculating row total: {ex.Message}");
            }
        }

        // Calculate discount amount
        var discountAmount = (subTotal * discountPercent) / 100;
        var afterDiscount = subTotal - discountAmount;

        // Calculate GST amount
        var gstAmount = (afterDiscount * gstPercent) / 100;
        var afterGst = afterDiscount + gstAmount;

        // Add/Less and Round off
        finalAmount = afterGst + addLess + roundOff;

        StateHasChanged();
    }

    private int GetQuantity(DataRow row)
    {
        if (row.Table.Columns.Contains("Quantity") && row["Quantity"] != DBNull.Value)
        {
            return Convert.ToInt32(row["Quantity"]);
        }
        return 1;
    }

    private decimal GetPrice(DataRow row)
    {
        // Try different column names for price
        string[] priceColumns = { "MRP", "Price", "Rate", "Amount" };
        
        foreach (var column in priceColumns)
        {
            if (row.Table.Columns.Contains(column) && row[column] != DBNull.Value)
            {
                return Convert.ToDecimal(row[column]);
            }
        }
        return 0;
    }

    private async Task SaveQuotation()
    {
        isSaving = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Validation
            if (string.IsNullOrWhiteSpace(customerName))
            {
                errorMessage = "Customer name is required";
                return;
            }

            if (selectedProducts.Count == 0)
            {
                errorMessage = "Please add at least one product";
                return;
            }

            // Save Quotation Header
            var quotationId = await SaveQuotationHeader();

            // Save Quotation Details
            await SaveQuotationDetails(quotationId);

            successMessage = $"Quotation {quotationNo} saved successfully!";
            
            // Reset form after 2 seconds
            await Task.Delay(2000);
            await ClearForm();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving quotation: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task<string> SaveQuotationHeader()
    {
        var quotationId = clsDatabase.GenerateNextNo("Quotation", "Id", "");
        var createdDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        clsDatabase.SaveRecord(
            "Quotation",
            "Id, QuotationNo, Date, CustomerName, MobileNo, City, SubTotal, DiscountPercent, GSTPercent, AddLess, RoundOff, FinalAmount, CreatedDate",
            $"'{quotationId}', '{quotationNo}', '{quotationDate}', '{customerName}', '{mobileNo}', '{city}', '{subTotal}', '{discountPercent}', '{gstPercent}', '{addLess}', '{roundOff}', '{finalAmount}', '{createdDate}'"
        );

        return quotationId;
    }

    private async Task SaveQuotationDetails(string quotationId)
    {
        foreach (var row in selectedProducts)
        {
            var detailId = clsDatabase.GenerateNextNo("QuotationDetail", "Id", "");
            var productId = row["Id"]?.ToString() ?? "";
            var productName = row["Name"]?.ToString() ?? "";
            var quantity = GetQuantity(row);
            var price = GetPrice(row);
            var amount = quantity * price;

            clsDatabase.SaveRecord(
                "QuotationDetail",
                "Id, QuotationId, ProductId, ProductName, Quantity, Price, Amount",
                $"'{detailId}', '{quotationId}', '{productId}', '{productName}', '{quantity}', '{price}', '{amount}'"
            );
        }
    }

    private async Task ClearForm()
    {
        // Reset all fields
        Console.WriteLine("Here");
        customerName = "";
        mobileNo = "";
        city = "";
        selectedProducts.Clear();
        subTotal = 0;
        discountPercent = 0;
        gstPercent = 18;
        addLess = 0;
        roundOff = 0;
        finalAmount = 0;
        errorMessage = "";
        successMessage = "";
        quotationDate = DateTime.Now.ToString("yyyy-MM-dd");

        // Generate new quotation number
        await GenerateQuotationNumber();
        
        StateHasChanged();
    }

    public void OnRListerUpdated(List<DataRow> SelectedRows){
        selectedProducts = SelectedRows;
        CalculateTotals();
    }
}