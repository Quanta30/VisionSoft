@page "/remindermaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Reminder Master</PageTitle>

@if(viewing){
    <FrmView TableName="ReminderMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Reminder Master Entry">
    <ChildContent>
        <!-- Row 1: Entry No, Entry Date, Remind What -->
        <ROW>
            <NInput Layout="1" Title="Entry No *" Type="number" @bind-Value="model.entryNoStr" 
                    Min="1" Placeholder="Auto-generated" ReadOnly="true" />
            
            <NInput Layout="1" Title="Entry Date" Type="datetime-local" @bind-Value="model.entryDate" 
                    Placeholder="Select entry date and time" />
            
            <NInput Layout="1" Title="Remind What *" Type="text" @bind-Value="model.remindWhat" 
                    Placeholder="Enter reminder description" />
        </ROW>

        <!-- Row 2: Reminder On/Off Controls -->
        <ROW>
            <div class="col-md-4">
                <label class="form-label">Reminder Control</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.reminderOn" />
                    <label class="form-check-label">Reminder On</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.reminderOff" />
                    <label class="form-check-label">Reminder Off</label>
                </div>
            </div>
            
            <NInput Layout="1" Title="Remind Time" Type="datetime-local" @bind-Value="model.remindTime" 
                    Placeholder="Select reminder time" />
            
            <NInput Layout="1" Title="Agent *" Type="text" @bind-Value="model.agent" 
                    Placeholder="Enter agent name" />
        </ROW>

        <!-- Row 3: Days, Months, and Dates in Columns -->
        <ROW>
            <!-- Column 1: Days of Week -->
            <div class="col-md-2">
                <label class="form-label">Days of Week</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dayMon" />
                    <label class="form-check-label">Monday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dayTue" />
                    <label class="form-check-label">Tuesday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dayWed" />
                    <label class="form-check-label">Wednesday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dayThu" />
                    <label class="form-check-label">Thursday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.dayFri" />
                    <label class="form-check-label">Friday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.daySat" />
                    <label class="form-check-label">Saturday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.daySun" />
                    <label class="form-check-label">Sunday</label>
                </div>
            </div>

            <!-- Column 2: Months -->
            <div class="col-md-2">
                <label class="form-label">Months</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthJan" />
                    <label class="form-check-label">January</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthFeb" />
                    <label class="form-check-label">February</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthMar" />
                    <label class="form-check-label">March</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthApr" />
                    <label class="form-check-label">April</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthMay" />
                    <label class="form-check-label">May</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthJun" />
                    <label class="form-check-label">June</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthJul" />
                    <label class="form-check-label">July</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthAug" />
                    <label class="form-check-label">August</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthSep" />
                    <label class="form-check-label">September</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthOct" />
                    <label class="form-check-label">October</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthNov" />
                    <label class="form-check-label">November</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="model.monthDec" />
                    <label class="form-check-label">December</label>
                </div>
            </div>

            <!-- Column 3: Dates divided into sub-columns -->
            <div class="col-md-4">
                <label class="form-label">Dates</label>
                <div class="row">
                    <!-- Sub-column 1: Dates 1-8 -->
                    <div class="col-md-2">
                        @for (int i = 1; i <= 8; i++)
                        {
                            int dateIndex = i;
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="model.DateProperties[dateIndex]" />
                                <label class="form-check-label">@dateIndex</label>
                            </div>
                        }
                    </div>

                    <!-- Sub-column 2: Dates 9-16 -->
                    <div class="col-md-2">
                        @for (int i = 9; i <= 16; i++)
                        {
                            int dateIndex = i;
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="model.DateProperties[dateIndex]" />
                                <label class="form-check-label">@dateIndex</label>
                            </div>
                        }
                    </div>

                    <!-- Sub-column 3: Dates 17-24 -->
                    <div class="col-md-2">
                        @for (int i = 17; i <= 24; i++)
                        {
                            int dateIndex = i;
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="model.DateProperties[dateIndex]" />
                                <label class="form-check-label">@dateIndex</label>
                            </div>
                        }
                    </div>

                    <!-- Sub-column 4: Dates 25-31 -->
                    <div class="col-md-1">
                        @for (int i = 25; i <= 31; i++)
                        {
                            int dateIndex = i;
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="model.DateProperties[dateIndex]" />
                                <label class="form-check-label">@dateIndex</label>
                            </div>
                        }
                    </div>
                </div>

                <!-- Row 4: Snooze, Repeat Settings -->
                    
            </div>
            <div class="col-md-4">

                    
                    <NInput Layout="1" Title="Snooze *" Type="number" @bind-Value="model.snoozeStr" 
                    Min="0" Placeholder="Enter snooze minutes" ColSize="col-md-12"/>
                  
            
               
                    <NInput Layout="1" Title="Repeat *" Type="number" @bind-Value="model.repeatStr" 
                            Min="0" Placeholder="Enter repeat count" ColSize="col-md-12"/>
                  
            </div>
        </ROW>

        
        
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save Reminder</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    ReminderMasterModel model = new ReminderMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing = false;
 
    ClsDatabase db = new ClsDatabase();

    protected override void OnInitialized()
    {
        if (Config.DevelopmentMode)
        {
            model.InitializeTestData();
        }
        
        model.GenerateEntryNumber();
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if(isEditing){
                await model.Update();
            }
            else await model.SaveReminder();
            ShowMessage("Reminder record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1500);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Reminder: {ex.Message}");
            ShowMessage("Error saving reminder record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        
        // Only generate new EntryNo if not editing
        if (!isEditing)
        {
            model.GenerateEntryNumber();
        }
        
        isEditing = false;
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
}