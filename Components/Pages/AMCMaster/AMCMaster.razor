@page "/amcmaster"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>AMC Master</PageTitle>

@if(viewing){
    <FrmView TableName="AMCMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="AMC Master Entry">
    <ChildContent>
        <!-- Row 1: Entry No, Entry Date, and Party Code -->
        <ROW>
            <NInput Layout="1" Title="Entry No. *" Type="text" @bind-Value="model.entryNo" 
                    ReadOnly="true" Placeholder="Auto Generated" />
            
            <NInput Layout="1" Title="Entry Date *" Type="date" @bind-Value="model.entryDate" />
            
            <NInput Layout="1" Title="Party Code *" Type="number" @bind-Value="model.partyCodeStr" 
                    Min="1" Placeholder="Enter party code" />
        </ROW>

        <!-- Row 2: City, Product Code, and Installation Date -->
        <ROW>
            <NInput Layout="1" Title="City *" Type="text" @bind-Value="model.city" 
                    Placeholder="Enter city" />
            
            <RInput Title="Product Code *" @bind-Value="model.productName" 
                    TableName="ProductMaster" ColumnName="ProductName"
                    Placeholder="Select product" />
            
            <NInput Layout="1" Title="Installation Date" Type="date" @bind-Value="model.installationDate" />
        </ROW>

        <!-- Row 3: AMC From Date, AMC To Date, and AMC Amount -->
        <ROW>
            <NInput Layout="1" Title="AMC From Date" Type="date" @bind-Value="model.amcFromDate" />
            
            <NInput Layout="1" Title="AMC To Date" Type="date" @bind-Value="model.amcToDate" />
            
            <NInput Layout="1" Title="AMC Amount *" Type="number" @bind-Value="model.amcAmountStr" 
                    Min="0" Step="0.01" Placeholder="Enter AMC amount" />
        </ROW>

        <!-- Row 4: Online Calls, Onsite Calls, and No of Nodes -->
        <ROW>
            <NInput Layout="1" Title="Online Calls *" Type="number" @bind-Value="model.onlineCallStr" 
                    Min="0" Placeholder="Enter online calls count" />
            
            <NInput Layout="1" Title="Onsite Calls *" Type="number" @bind-Value="model.onsiteCallStr" 
                    Min="0" Placeholder="Enter onsite calls count" />
            
            <NInput Layout="1" Title="No. of Nodes *" Type="number" @bind-Value="model.noOfNodeStr" 
                    Min="0" Placeholder="Enter number of nodes" />
        </ROW>

       
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="bi bi-floppy"></i>
                    <span>Save AMC</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleClear" disabled="@isSaving">
                <i class="bi bi-arrow-repeat"></i> Clear Form
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleView">
                <i class="bi bi-arrow-repeat"></i>View
            </button>
        </div>
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="bi @alertIcon me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
}

@code {

    AMCMasterModel model = new AMCMasterModel();
    
    // UI state variables
    private bool isSaving = false;
    private bool showValidation = false;
    private string message = "";
    private string alertClass = "";
    private string alertIcon = "";
    private bool viewing = false;
    private bool isEditing=false;
 
    ClsDatabase db = new ClsDatabase();

    private void GetProductCodeFromName()
    {
        try
        {
            string query = $"SELECT ProductCode FROM ProductMaster WHERE ProductName = '{model.productName}'";
            DataTable dt = db.GetDataTable(query);
            if (dt.Rows.Count > 0)
            {
                model.productCode = Convert.ToInt32(dt.Rows[0]["ProductCode"]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting product code: {ex.Message}");
        }
    }
    private async Task HandleSave()
    {
        if (!model.ValidateForm())
        {
            ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            showValidation = true;
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            GetProductCodeFromName();
            if(isEditing){
                await model.Update();
            }
            else await model.SaveAMC();
            ShowMessage("AMC record saved successfully!", "success", "bi-check-circle");
            await Task.Delay(1);
            await HandleClear();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving AMC: {ex.Message}");
            ShowMessage("Error saving AMC record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields
        model.Clear();
        showValidation = false;
        model.GenerateEntryNumber();
        ClearMessage();
        StateHasChanged();
    }

    private void ShowMessage(string msg, string type, string icon)
    {
        message = msg;
        alertClass = $"alert-{type}";
        alertIcon = icon;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        alertClass = "";
        alertIcon = "";
        StateHasChanged();
    }

    private void HandleView(){
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row){
        model.set(row);
        isEditing = true;
        viewing = false;
        StateHasChanged();
    }
    
}