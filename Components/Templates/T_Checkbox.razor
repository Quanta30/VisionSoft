<div class=@ColSize >
    <div>
        <div class="form-check" style="padding-top: 35px;">
            <label @onclick="ToggleCheckBox">@Title</label>
            <input class="form-check-input" value=@Value type="checkbox" @onkeydown="HandleKeyboardInput" 
                  checked=@IsChecked
                  @onchange="HandleChange"
                  @ref="reference" />
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Value { get; set; } = "0";
    [Parameter] public string ColSize { get; set; } = "col-md-4";
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    
    // Add reference support
    [Parameter] public EventCallback<ElementReference> GetInputReference{get; set;}
    [Parameter] public ElementReference NextReference{get; set;}
    [Parameter] public bool FocusDefault{get; set;} = false;
    public ElementReference reference;
    
    private bool IsChecked = false;

    protected override void OnInitialized()
    {
        ChangeCheckBoxValue(Value);
    }
    
    protected override void OnParametersSet()
    {
        ChangeCheckBoxValue(Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {   
        if(firstRender && FocusDefault) await reference.FocusAsync();
        if(firstRender && GetInputReference.HasDelegate){
            Console.WriteLine("T_Checkbox: Sending reference to parent");
            await GetInputReference.InvokeAsync(reference);
        }
    }

    private void HandleChange(ChangeEventArgs e){
        string newValue = e.Value.ToString() == "True"?"1":"0";
        ChangeCheckBoxValue(newValue);
        ValueChanged.InvokeAsync(newValue);
    }

    //ToggleCheckBox
    private void ToggleCheckBox(){
        Console.WriteLine("Here Again");
        string  newValue = Value == "0"?"1":"0";
        ChangeCheckBoxValue(newValue);
        ValueChanged.InvokeAsync(newValue);
    }

    private async Task HandleKeyboardInput(KeyboardEventArgs e){
        if(e.Key == "T" || e.Key == "t")
        {
            ToggleCheckBox();
        }
        else if(e.Key == "Enter" && !NextReference.Equals(default(ElementReference)))
        {
            Console.WriteLine("T_Checkbox: Enter pressed. Focusing on Next Input");
            await NextReference.FocusAsync();
        }
    }

    private void ChangeCheckBoxValue(string newValue){
        if(newValue == "1")IsChecked=true;
        else IsChecked =false;
    }
}