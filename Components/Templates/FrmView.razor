@using System.Data
@rendermode InteractiveServer


<!-- Modal Backdrop -->
<div class="position-fixed top-0 start-0 w-100 h-100 d-flex 
            align-items-center justify-content-center"
     style="background-color: rgba(0,0,0,0.5); z-index:1050;">
    
    <!-- Modal Container -->
    <div class="position-relative bg-white rounded-3 shadow"
         style="width: 90vw; height: 90vh; max-width: 1200px; min-width: 600px;"
         @onclick="CloseModal" @onkeydown="HandleKeyPress" tabindex="0">

        <!-- Card -->
        <div class="card w-100 h-100 border-0" @onclick:stopPropagation="true">

            <!-- Header with Gray Background -->
            <div class="card-header bg-light border-bottom">
                <!-- Title & Close Row -->
                <div class="d-flex justify-content-between align-items-center py-2">
                    <h5 class="mb-0 text-dark fw-semibold">Select @TableName</h5>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="CloseModal">Close</button>
                </div>
                
                <!-- Search and Pagination Row -->
                <div class="d-flex justify-content-between align-items-center gap-3 mt-3">
                    <!-- Search Section -->
                    <div style="width: 400px;">
                        <div class="input-group">
                            <input type="text" class="form-control"
                                   style="height: 36px;"
                                   placeholder="Search @TableName..."
                                   @bind="searchText" @oninput="OnSearchInput" @ref="searchInput" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearSearch">X</button>
                        </div>
                    </div>

                    <div style="min-width: 120px;">
                        <select class="form-select form-select-sm" value=@filterCondition @onchange="onFilterChange">
                            <option value="like">üìù Like</option>
                            <option value="=">= Equal</option>
                            <option value=">">&gt; Greater</option>
                            <option value="<">&lt; Less</option>
                            <option value=">=">&ge; Greater Equal</option>
                            <option value="<=">&le; Less Equal</option>
                            <option value="<>">&ne; Not Equal</option>
                        </select>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" 
                                data-bs-toggle="dropdown" aria-expanded="false">
                            Select Columns (@selectedColumns.Count selected)
                        </button>
                        <ul class="dropdown-menu p-0" style="min-width: 250px; max-height: 600px; z-index: 1055;">
                            <div class="p-2" style="max-height: 300px; overflow-y: auto;">
                                @if (Columns.Count > 0)
                                {
                                    @foreach (var column in Columns)
                                    {
                                        <div class="dropdown-item-text">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                    id="col_@column" 
                                                    @onchange="(e) => OnColumnToggle(column, e)"
                                                    checked="@selectedColumns.Contains(column)" />
                                                <label class="form-check-label" for="col_@column">
                                                    @column
                                                </label>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="dropdown-item-text text-muted">No columns available</div>
                                }
                            </div>
                            <hr class="dropdown-divider my-1">
                            <div class="p-2">
                                <button class="btn btn-sm btn-outline-primary w-100" @onclick="SelectAllColumns">
                                    Select All
                                </button>
                                <button class="btn btn-sm btn-outline-secondary w-100 mt-1" @onclick="ClearAllColumns">
                                    Clear All
                                </button>
                            </div>
                        </ul>
                    </div>

                    <!-- Pagination Section -->
                    <div class="d-flex align-items-center gap-2">
                        <button type="button" class="btn btn-primary btn-sm" @onclick="PreviousPage"
                                disabled="@(currentPage <= 1)">‚óÄ</button>
                        <span class="text-muted">Page</span>
                        <input type="number" class="form-control text-center"
                               style="width: 70px; height: 36px;" 
                               value="@currentPage"
                               @onchange="OnPageChange" min="1" max="@totalPages" />
                        <span class="text-muted">of @totalPages</span>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="NextPage"
                                disabled="@(currentPage >= totalPages)">‚ñ∂</button>
                    </div>
                </div>

                <!-- Records Info Row -->
                <div class="mt-2 text-end">
                    <small class="text-muted">
                        @if (totalRecords > 0)
                        {
                            <span>Showing @((currentPage - 1) * pageSize + 1)
                                  to @(Math.Min(currentPage * pageSize, totalRecords))
                                  of @totalRecords records</span>
                        }
                        else
                        {
                            <span>No records found</span>
                        }
                    </small>
                </div>
            </div>

            <!-- Table Body -->
            <div class="card-body p-0 overflow-auto" style="height: calc(100% - 140px);">
                @if (IsLoading)
                {
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>
                }
                else if (TableData != null && TableData.Rows.Count > 0)
                {
                    <div class="table-responsive h-100">
                        <table class="table table-hover table-sm mb-0">
                            <thead class="table-light sticky-top">
                                <tr>
                                    <th class="text-center py-3" style="width: 120px; border-top: 1px solid #dee2e6;">Actions</th>
                                    @foreach (DataColumn col in TableData.Columns)
                                    {
                                        <th class="py-3" style="border-top: 1px solid #dee2e6;">@col.ColumnName</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < TableData.Rows.Count; i++)
                                {
                                    var rowIndex = i;
                                    <tr class="@(selectedRowIndex == rowIndex ? "table-primary" : "")" data-row-index="@rowIndex">
                                        <td class="text-center">
                                            @if (SelectClicked.HasDelegate)
                                            {
                                                <button type="button" class="btn btn-primary btn-sm" 
                                                        @onclick="() => SelectRow(rowIndex)">Select</button>
                                            }
                                            else
                                            {
                                                <div class="d-flex justify-content-center gap-1">
                                                    <button type="button" class="btn btn-outline-primary btn-sm" 
                                                            @onclick="() => EditRow(rowIndex)">Edit</button>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" 
                                                            @onclick="() => DeleteRow(rowIndex)">Delete</button>
                                                </div>
                                            }
                                        </td>
                                        @foreach (DataColumn col in TableData.Columns)
                                        {
                                            <td>@TableData.Rows[i][col]</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted p-4">No data available</div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    window.scrollToSelectedRow = (rowIndex) => {
        const selectedRow = document.querySelector(`tr[data-row-index="${rowIndex}"]`);
        if (selectedRow) {
            selectedRow.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'nearest',
                inline: 'nearest'
            });
        }
    };
</script>

@code {

    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Parameter] public string TableName { get; set; } = "";
    [Parameter] public string searchText{get; set;} = "";//Search Text is automatically inserted at the search input
    [Parameter] public string TableQuery{get; set;} = "";
    [Parameter] public string InitialFilters{get; set;}
    [Parameter] public string PrimaryKeyColumn{get; set;} = "";

    //EventCallback for Buttons Clicked
    [Parameter] public EventCallback OnClosed { get; set; }
    [Parameter] public EventCallback<DataRow> EditClicked { get; set; }
    [Parameter] public EventCallback<DataRow> DeleteClicked {get; set; }
    
    [Parameter] public EventCallback<DataRow> SelectClicked {get; set; }
    
    
    public string filterCondition = "like";

    //Element Refernce for AutoFocus
    private ElementReference searchInput;

    //Other Variables
    private ClsDatabase db = new();
    private DataTable? TableData;
    private List<string> Columns = new();
    private HashSet<string> selectedColumns = new HashSet<string>();
    
    private bool IsLoading;
    
    private int selectedRowIndex = 0;//Row Index that is selected using keyboard

    //Pagination
    private int pageSize = 10;
    private int totalPages = 0;
    private int currentPage = 1;
    private int totalRecords = 0;
    private Timer? searchTimer;

    protected override void OnInitialized(){
        if(InitialFilters== null){

        }
    }

    //Runs when Parameters are changed, First Render, Parent State Changed
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(TableName))
        {   
            Console.WriteLine("Running ParameterAsync");
            await InitializeColumns();
            await LoadData();
        }
    }

    //Runs After Every Rerender, state change
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            await searchInput.FocusAsync();//Only runs on first render
        }
    }


    //Getting List of Column Heads/Names so that It can be later used in LoadData
    private async Task InitializeColumns()
    {   
        Console.WriteLine("Initializing Columns");
        if (Columns.Count == 0)
        {
            try
            {
                var dtCols = db.GetDataTable($@"
                    SELECT COLUMN_NAME 
                    FROM INFORMATION_SCHEMA.COLUMNS 
                    WHERE TABLE_NAME = '{TableName}' 
                    ORDER BY ORDINAL_POSITION");
                
                Columns = dtCols.Rows
                            .Cast<DataRow>()
                            .Select(r => r["COLUMN_NAME"].ToString()!)
                            .ToList();
                
                if(PrimaryKeyColumn != null){
                    selectedColumns = new HashSet<string>();
                    selectedColumns.Add(PrimaryKeyColumn);
                    if(InitialFilters != null){
                        string[] filterArray = InitialFilters.Split(':');
                        foreach(string filter in filterArray){
                            selectedColumns.Add(filter);
                        }
                    }
                }
                else{
                    PrimaryKeyColumn = Columns.FirstOrDefault() ?? "";
                    selectedColumns = new HashSet<string>(Columns);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting columns: {ex.Message}");
            }
        }
    }

    private async void OnColumnToggle(string columnName, ChangeEventArgs e)
    {
        bool isChecked = (bool)(e.Value ?? false);
        
        if (isChecked)
        {
            selectedColumns.Add(columnName);
        }
        else
        {
            selectedColumns.Remove(columnName);
        }
        
        Console.WriteLine($"Column {columnName} is now {(isChecked ? "selected" : "deselected")}");
        await LoadData();
        StateHasChanged();
    }

    private async void SelectAllColumns()
    {
        selectedColumns = new HashSet<string>(Columns);
        await LoadData();
        StateHasChanged();
    }

    private async void ClearAllColumns()
    {
        selectedColumns.Clear();
        await LoadData();
        StateHasChanged();
    }

    private async void onFilterChange(ChangeEventArgs e){
        filterCondition = e.Value.ToString();
        await LoadData();
        StateHasChanged();
    }

    //Load Data only on the current page
    //And matching the pattern in the Search Box for all column entries Pattern : {%patter%} For all columns
    //Uses ROW_NUMBER() sql window Function to add serial no. to the dataTable, So that it can be divided into pages
private async Task LoadData()
{   

    selectedRowIndex = 0;
    IsLoading = true;
    StateHasChanged();

    try
    {
        // Build WHERE clause for search
        string whereClause = "";
        if (!string.IsNullOrWhiteSpace(searchText) && selectedColumns.Count > 0)
        {
            // Escape single quotes to prevent SQL injection
            var escapedSearchText = searchText.Replace("'", "''");
            var pattern = $@"%{escapedSearchText}%";
            if(filterCondition != "like")pattern = $"{escapedSearchText}";
            
            // For global search, always use LIKE across selected columns
            whereClause = "WHERE " + string.Join(" OR ",
                selectedColumns.Select(c => $"CAST({c} AS NVARCHAR(MAX)) {filterCondition} '{pattern}'"));
        }

        // Get total count
        string countQuery = $"SELECT COUNT(*) as cnt FROM {TableName} {whereClause}";
        totalRecords = Convert.ToInt32(db.GetDataTable(countQuery).Rows[0]["cnt"]);
        totalPages = totalRecords > 0 ? (int)Math.Ceiling((double)totalRecords / pageSize) : 1;

        // Validate current page
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
        }
        else if (currentPage < 1)
        {
            currentPage = 1;
        }

        // Get data with pagination
        string dataQuery = $@"
            SELECT * 
            FROM {TableName}
            {whereClause}
            ORDER BY {PrimaryKeyColumn}
            OFFSET {(currentPage-1) * pageSize} ROWS
            FETCH NEXT {pageSize} ROWS ONLY";

        TableData = db.GetDataTable(dataQuery);
        Console.WriteLine(whereClause);

    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading data: {ex.Message}");
        TableData = null;
        totalRecords = 0;
        totalPages = 0;
    }
    finally
    {
        IsLoading = false;
        StateHasChanged();
    }
}

    //Navigation keys to navigate the table
    //After Key Press blazor automatically calls StateHasChanged
    private async Task HandleKeyPress(KeyboardEventArgs e){
        switch(e.Key){
            case "Escape":
                await CloseModal();
                break;
            case "ArrowUp":
                if(selectedRowIndex>0){
                    selectedRowIndex--;
                    await ScrollToSelectedRow();
                }
                break;
            case "ArrowDown":
                
                if(selectedRowIndex<pageSize-1 && selectedRowIndex < TableData?.Rows.Count - 1){
                    selectedRowIndex++;
                    await ScrollToSelectedRow();
                }
                break;
            case "ArrowLeft":
                await PreviousPage();
                break;
            case "ArrowRight":
                await NextPage();
                break;
            case "Enter":
                HandleEnter(selectedRowIndex);
                break;
            
        }
    }

    private async Task ScrollToSelectedRow()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToSelectedRow", selectedRowIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to row: {ex.Message}");
        }
    }


    //Enter key to select or edit the currently focused record
    private void HandleEnter(int rowIndex){
        if(SelectClicked.HasDelegate){
            Console.WriteLine("Handling Enter Inside Select");
            SelectRow(rowIndex);
        }
        else{
            EditRow(rowIndex);
        }
    }

    //Event Handlers for Action Buttons : Edit, Delete, Select
    private void EditRow(int rowIndex)
    {
        EditClicked.InvokeAsync(TableData.Rows[rowIndex]);
    }

    private void SelectRow(int rowIndex){
        SelectClicked.InvokeAsync(TableData.Rows[rowIndex]);
    }

    private async Task DeleteRow(int rowIndex)
    {
        if(DeleteClicked.HasDelegate){
            await DeleteClicked.InvokeAsync(TableData.Rows[rowIndex]);
        }
        else if (TableData != null && rowIndex < TableData.Rows.Count)
        {
            var pkey = TableData.Rows[rowIndex][PrimaryKeyColumn]?.ToString();
            if (!string.IsNullOrEmpty(pkey))
            {
                db.ExecuteQuery($"DELETE FROM {TableName} WHERE {PrimaryKeyColumn} = '{pkey}'");
                await LoadData();
            }
        }
    }

    //Runs When there is input change in search bar
    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";

        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                currentPage = 1;
                await LoadData();
            });
        }, null, 500, Timeout.Infinite); // 500ms delay
    }

    //Clears the search bar on button press
    private async Task ClearSearch()
    {
        searchText = "";
        currentPage = 1;
        await LoadData();
    }

    //Close The view
    private async Task CloseModal()
    {
        await OnClosed.InvokeAsync();
    }

    // Pagination Methods
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
            await ScrollToSelectedRow();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadData();
            await ScrollToSelectedRow();
        }
    }

    private async Task OnPageChange(ChangeEventArgs e)//Runs when page number is changed
    {
        if (int.TryParse(e.Value?.ToString(), out int newPage))
        {
            if (newPage >= 1 && newPage <= totalPages)
            {
                currentPage = newPage;
                await LoadData();
            }
            else
            {
                // Reset to valid page if invalid input
                currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
                StateHasChanged();
            }
        }
        e.Value = currentPage;  
    }

}