<!--
  This is a versatile and reusable Blazor button component.
  It supports different visual styles, an optional secondary information line,
  and a loading/spinner state after being clicked.
-->
<button type="button" 
        class="btn @bsCls" 
        style="@Style; padding-top: 2px; padding-bottom: 2px;" 
        @onclick="Click" 
        disabled="@Disabled">

    <!-- State 1: Loading/Clicked State -->
    @if (isClicked)
    {
        <!-- Shows a spinner and loading text when the button has been clicked and is processing. -->
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        <span>@spanText</span>
    }
    else
    {
        @* <!-- The default appearance of the button. --> *@
        <div class="d-flex flex-column align-items-center p-1" style="line-height: 1;">
            @* <!-- Main button text --> *@
            <div class="d-flex align-items-center">
                <span style="line-height: 1;">@Text</span>
            </div>
            @* <!-- Optional secondary line of text for additional info. --> *@
            @if (!string.IsNullOrEmpty(Info))
            {
                <small class="@GetInfoTextClass()" style="font-size: 0.7rem; line-height: 0.9; margin-top:2px">
                    @Info
                </small>
            }
        </div>
    }
</button>

@code {
    // =================================================================================
    // PARAMETERS - These are the public properties that can be set from the parent component.
    // =================================================================================

    /// <summary>
    /// The primary text displayed on the button.
    /// </summary>
    [Parameter] public string Text { get; set; } = "";

    /// <summary>
    /// The text displayed next to the spinner when the button is in its clicked/loading state.
    /// If not provided, it defaults to the main 'Text' property.
    /// </summary>
    [Parameter] public string spanText { get; set; } = "";

    /// <summary>
    /// Optional small text displayed below the main button text for additional context.
    /// </summary>
    [Parameter] public string Info { get; set; } = "";

    /// <summary>
    /// Defines the button's visual style. Accepted values: "Save", "Blue", "Danger".
    /// This determines the button's color scheme.
    /// </summary>
    [Parameter] public string btnType { get; set; } = "";

    /// <summary>
    /// An optional delay (in milliseconds) to wait after the OnClick event completes
    /// before resetting the button to its normal state.
    /// </summary>
    [Parameter] public int DelayTime { get; set; } = 0;

    /// <summary>
    /// A boolean to manually control the disabled state of the button from a parent component.
    /// </summary>
    [Parameter] public bool Disabled { get; set; } = false;

    /// <summary>
    /// Allows for custom inline CSS styles to be applied to the button.
    /// </summary>
    [Parameter] public string Style { get; set; } = "";

    /// <summary>
    /// The event callback that is invoked when the button is clicked.
    /// </summary>
    [Parameter] public EventCallback OnClick { get; set; }

    // =================================================================================
    // PRIVATE FIELDS - Internal state for the component.
    // =================================================================================

    private bool isClicked = false; // Tracks if the button is currently in the loading state.
    private string bsCls = "btn-outline-secondary"; // Holds the calculated Bootstrap CSS class for styling.

    // =================================================================================
    // LIFECYCLE METHODS
    // =================================================================================

    /// <summary>
    /// This method runs when the component is first initialized.
    /// It sets the button's style based on the provided parameters.
    /// </summary>
    protected override void OnInitialized()
    {
        // Determine the Bootstrap class based on btnType or common Text values.
        switch (btnType)
        {
            case "Save":
                bsCls = "btn-success";
                break;
            case "Blue":
                bsCls = "btn-outline-primary btn-sm fw-semibold";
                break;
            case "Danger":
                bsCls = "btn-outline-danger btn-sm fw-semibold";
                break;
            default:
                // Fallback to check Text if btnType is not specified.
                switch (Text)
                {
                    case "Save":
                        bsCls = "btn-success";
                        break;
                    case "Edit":
                    case "Select":
                        bsCls = "btn-outline-primary btn-sm fw-semibold";
                        break;
                    case "Cancel":
                    case "Remove":
                    case "Delete":
                        bsCls = "btn-outline-danger btn-sm fw-semibold";
                        break;
                }
                break;
        }

        // If no specific loading text is provided, use the main button text.
        if (string.IsNullOrEmpty(spanText))
        {
            spanText = Text;
        }
    }

    // =================================================================================
    // PRIVATE METHODS
    // =================================================================================

    /// <summary>
    /// Determines the CSS class for the 'Info' text based on the button's style,
    /// ensuring the text color matches the button's theme.
    /// </summary>
    /// <returns>A string containing the appropriate text color class.</returns>
    private string GetInfoTextClass()
    {
        // This logic mirrors OnInitialized to ensure consistent coloring.
        return (btnType, Text) switch
        {
            ("Save", _) or (_, "Save") => "text-success-emphasis",
            ("Blue", _) or (_, "Edit") or (_, "Select") => "text-primary-emphasis",
            ("Danger", _) or (_, "Cancel") or (_, "Remove") or (_, "Delete") => "text-danger-emphasis",
            _ => "text-secondary-emphasis"
        };
    }

    /// <summary>
    /// Handles the button's click event. It sets the loading state, invokes the parent
    /// method, and then resets the state.
    /// </summary>
    private async Task Click()
    {
        isClicked = true;
        Disabled = true;

        // Using a try-finally block is crucial. It ensures that the button's state
        // is reset (isClicked = false, Disabled = false) even if the invoked
        // OnClick event or the Task.Delay throws an exception.
        // This prevents the button from getting stuck in a disabled/loading state.
        try
        {
            // Execute the parent component's method.
            await OnClick.InvokeAsync();

            // If a delay is specified, wait for that duration.
            if (DelayTime > 0)
            {
                await Task.Delay(DelayTime);
            }
        }
        finally
        {
            // Reset the button state.
            isClicked = false;
            Disabled = false;

            // Request a UI re-render to reflect the state change.
            StateHasChanged();
        }
    }
}
