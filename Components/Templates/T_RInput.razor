@using System.Data
@if(Layout == 3){
    // Inline layout for table cells
    <div class="input-group input-group-sm" style="width:">
        <input class="form-control"
            placeholder="@Placeholder"
            value="@_displayValue"
            @oninput="OnInputChanged"
            readonly="@ReadOnly" 
            @ref="reference"
            />
        <button class="btn btn-outline-secondary" @onclick="OpenFrmViewHelper" @onclick:stopPropagation="true">?</button>
    </div>
}
else if(Layout == 1){
    <div class="@ColSize">
        <div class="mb-3">
            <label >@Title</label>
            
            <div class="input-group">
                <input class="form-control"
                    placeholder="@Placeholder"
                    value="@_displayValue"
                    @oninput="OnInputChanged"
                    readonly="@ReadOnly" 
                    @ref="reference"
                    />
                <button class="btn btn-outline-secondary" @onclick="OpenFrmViewHelper" @onclick:stopPropagation="true">?</button>
            </div>
        </div>
    </div>
}

@if(isViewing){
<FrmView TableName="@TableName" SelectClicked="HandleRowSelected" 
              OnClosed="Closed"  searchText="@_displayValue"/>
}

@code {
    private string _displayValue = string.Empty; // What user sees in the input
    [Parameter] public string Value { get; set; } = string.Empty; // What gets bound (Primary Key)
    private bool isViewing = false;
    [Parameter] public int Layout { get; set; } = 1;
    //String Parameters
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string TableName { get; set; } = string.Empty;
    [Parameter] public string DisplayColumn { get; set; } = string.Empty;
    [Parameter] public string PrimaryColumn { get; set; } = string.Empty;
    [Parameter] public string Placeholder { get; set; } = "Enter value";
    [Parameter] public string ColSize { get; set; } = "col-md-4";

    //Boolean Parameter Variables
    [Parameter] public bool ReadOnly { get; set; } = false;

    //Event CallBacks
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string FocusOn{get; set;}
    private ElementReference reference;

    //Runs when parameters change - load display value based on bound Value
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Value) && !string.IsNullOrWhiteSpace(TableName) && !string.IsNullOrWhiteSpace(DisplayColumn))
        {
            await LoadDisplayValue();
        }
        else
        {
            _displayValue = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrEmpty(FocusOn) && FocusOn == Title)
        {
            await Focus();
        }
    }

    // Load the display value from database based on the bound Value (Primary Key)
    private async Task LoadDisplayValue()
    {
        try
        {
            ClsDatabase db = new ClsDatabase();
            string query = $"SELECT {DisplayColumn} FROM {TableName} WHERE {PrimaryColumn} = '{Value}'";
            var result = db.GetDataTable(query);
            
            if (result.Rows.Count > 0)
            {
                _displayValue = result.Rows[0][DisplayColumn]?.ToString() ?? string.Empty;
            }
            else
            {
                _displayValue = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading display value: {ex.Message}");
            _displayValue = string.Empty;
        }
    }

    //Handle manual input changes (for search functionality)
    private async Task OnInputChanged(ChangeEventArgs e)
    {
        if (!ReadOnly)
        {
            _displayValue = e.Value?.ToString() ?? string.Empty;
            OpenFrmViewHelper();
        }
    }

    //Handle Button Click: Open FrmView
    private void OpenFrmViewHelper()
    {   
        Console.WriteLine("Opening Frm View Helper");
        isViewing = true;
        StateHasChanged();
    }

    //Handle row selection from FrmView
    private async Task HandleRowSelected(DataRow selectedRow)
    {   
        Console.WriteLine("Handling Selected Row in RInput");
        isViewing = false;
        
        // Set display value (what user sees)
        _displayValue = selectedRow[DisplayColumn]?.ToString() ?? string.Empty;
        
        // Set actual bound value (Primary Key)
        var newValue = selectedRow[PrimaryColumn]?.ToString() ?? string.Empty;
        
        // Update the bound Value and notify parent
        await ValueChanged.InvokeAsync(newValue);
        
        StateHasChanged();
    }

    public async Task Focus()
    {
        try
        {
            Console.WriteLine($"Focus requested for: {FocusOn}, Title: {Title}, Layout: {Layout}");
            
            if (!string.IsNullOrEmpty(FocusOn) && FocusOn == Title)
            {
                // All layouts now have @ref="reference", so we can focus any of them
                if (reference.Id != null)
                {
                    Console.WriteLine($"Focusing Layout {Layout} element: {Title}");
                    await reference.FocusAsync();
                }
                else
                {
                    Console.WriteLine($"Element reference not ready for {Title}");
                    // Try again after a small delay
                    await Task.Delay(50);
                    if (reference.Id != null)
                    {
                        await reference.FocusAsync();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error focusing element {Title}: {ex.Message}");
        }
    }
    public void Closed()
    {
        isViewing = false;
        StateHasChanged();
    }
}