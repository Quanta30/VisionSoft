@*
  This component is a wrapper for the standard HTML <textarea> element.
  It provides data binding, validation, character limit feedback, and advanced
  focus management for use in Blazor forms.
*@
@rendermode InteractiveServer

<div class="@ColSize">
    <div class="mb-3">
        <label for="@_elementId" class="form-label">@Title</label>
        <textarea id="@_elementId"
                  class="form-control @(ReadOnly ? "readonly-input" : "") @(isValid ? "" : "is-invalid")"
                  placeholder="@Placeholder"
                  @bind="@_internalValue"
                  @bind:event="oninput"
                  readonly="@ReadOnly"
                  disabled="@ReadOnly"
                  rows="@Rows"
                  maxlength="@(MaxLength > 0 && MaxLength < int.MaxValue ? MaxLength : null)"
                  style="@(ReadOnly ? "background-color: #f8f9fa; color: #6c757d; cursor: not-allowed;" : "")"
                  @ref="reference"
                  @onkeydown="HandleKeyboardInput">
        </textarea>
        
        @* Display a validation message if the input length reaches the maximum allowed. *@
        @if (MaxLength > 0 && MaxLength < int.MaxValue && _internalValue?.Length >= MaxLength)
        {
            <small class="text-danger mt-1 d-block">
                <i class="bi bi-exclamation-triangle-fill"></i>
                Maximum length is @MaxLength characters.
            </small>
        }
    </div>
</div>

<style>
    /* Custom styles for the readonly state to make it visually distinct. */
    .readonly-input {
        background-color: #f8f9fa !important;
        color: #6c757d !important;
        cursor: not-allowed !important;
        border-color: #dee2e6 !important;
    }

    .readonly-input:focus {
        box-shadow: none !important;
        border-color: #dee2e6 !important;
    }

    .readonly-input::placeholder {
        color: #adb5bd !important;
    }

    /* Custom invalid styles with a red shadow for better visibility. */
    .form-control.is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
    }

    .form-control.is-invalid:focus {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
    }
</style>

@code {
    // =================================================================================
    // PRIVATE FIELDS
    // =================================================================================
    private string _internalValue = string.Empty;
    private readonly string _elementId = $"textarea-{Guid.NewGuid()}";

    // =================================================================================
    // PARAMETERS - CONTENT & BINDING
    // =================================================================================

    /// <summary>
    /// The value bound to this textarea component.
    /// </summary>
    [Parameter] public string Value { get; set; } = string.Empty;

    /// <summary>
    /// The text displayed in the label associated with the textarea.
    /// </summary>
    [Parameter] public string Title { get; set; } = string.Empty;

    /// <summary>
    /// An event callback that updates the bound 'Value' when the input changes.
    /// </summary>
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    /// <summary>
    /// An optional event callback that fires whenever the input value changes.
    /// </summary>
    [Parameter] public EventCallback<string> ChangeFunction { get; set; }

    // =================================================================================
    // PARAMETERS - STYLING & LAYOUT
    // =================================================================================

    /// <summary>
    /// The placeholder text to display when the textarea is empty.
    /// </summary>
    [Parameter] public string Placeholder { get; set; } = "Enter value";

    /// <summary>
    /// The Bootstrap column class for sizing (e.g., "col-md-4").
    /// </summary>
    [Parameter] public string ColSize { get; set; } = "col-md-4";

    /// <summary>
    /// The initial number of visible text lines for the textarea.
    /// </summary>
    [Parameter] public int Rows { get; set; } = 1;  

    // =================================================================================
    // PARAMETERS - BEHAVIOR & VALIDATION
    // =================================================================================

    /// <summary>
    /// If true, the textarea cannot be edited by the user.
    /// </summary>
    [Parameter] public bool ReadOnly { get; set; } = false;

    /// <summary>
    /// If true, the textarea is considered invalid if it's empty.
    /// </summary>
    [Parameter] public bool Required { get; set; } = false;

    /// <summary>
    /// The maximum number of characters allowed. Defaults to no limit.
    /// </summary>
    [Parameter] public int MaxLength { get; set; } = int.MaxValue;

    // =================================================================================
    // PARAMETERS - FOCUS MANAGEMENT & EVENTS
    // =================================================================================

    /// <summary>
    /// An event callback that fires when the user presses the 'Enter' key.
    /// </summary>
    [Parameter] public EventCallback OnEnterPressed { get; set; }

    /// <summary>
    /// An event callback to pass this textarea's reference to the parent.
    /// </summary>
    [Parameter] public EventCallback<ElementReference> GetInputReference { get; set; }

    /// <summary>
    /// A reference to the next element to focus when 'Enter' is pressed.
    /// </summary>
    [Parameter] public ElementReference NextReference { get; set; }

    /// <summary>
    /// The underlying ElementReference for this component's textarea element.
    /// </summary>
    public ElementReference reference;

    // =================================================================================
    // PRIVATE STATE
    // =================================================================================
    private bool isValid = true;

    // =================================================================================
    // LIFECYCLE METHODS
    // =================================================================================

    /// <summary>
    /// Synchronizes the internal value with the 'Value' parameter when it changes.
    /// </summary>
    protected override void OnParametersSet()
    {
        _internalValue = Value ?? string.Empty;
    }

    /// <summary>
    /// Handles initial focus and passes the element reference to the parent after the first render.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (GetInputReference.HasDelegate)
            {
                await GetInputReference.InvokeAsync(reference);
            }
        }
    }

    // =================================================================================
    // EVENT HANDLERS & METHODS
    // =================================================================================

    /// <summary>
    /// Triggered on every keystroke in the textarea. Updates the bound value and validates.
    /// </summary>
    private async Task OnInputChanged(ChangeEventArgs e)
    {
        if (ReadOnly) return;

        _internalValue = e.Value?.ToString() ?? string.Empty;
        await ValueChanged.InvokeAsync(_internalValue);

        if (ChangeFunction.HasDelegate)
        {
            await ChangeFunction.InvokeAsync(_internalValue);
        }
        Validate();
    }

    /// <summary>
    /// Handles keyboard events, specifically the 'Enter' key, to override default behavior.
    /// </summary>
    private async Task HandleKeyboardInput(KeyboardEventArgs e)
    {
        // NOTE: This overrides the default behavior of the Enter key in a textarea,
        // which is to create a new line. Consider using a different key combination
        // (like Ctrl+Enter) if new lines are needed within the textarea.
        if (e.Key == "Enter")
        {
            Validate();
            if (OnEnterPressed.HasDelegate)
            {
                await OnEnterPressed.InvokeAsync();
            }
            else if (isValid && !NextReference.Equals(default(ElementReference)))
            {
                await NextReference.FocusAsync();
            }
        }
    }

    // =================================================================================
    // PUBLIC API METHODS
    // =================================================================================

    /// <summary>
    /// Checks the textarea's validity based on 'Required' and 'MaxLength' properties.
    /// This can be called from a parent component to trigger validation.
    /// </summary>
    public void Validate()
    {
        isValid = !(_internalValue.Length > MaxLength && MaxLength > 0 && MaxLength != int.MaxValue) && !(Required && string.IsNullOrEmpty(_internalValue));
        StateHasChanged();
    }
}
