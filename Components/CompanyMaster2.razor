@page "/companymaster2"
@using VisionSoft
@using System.Data
@rendermode InteractiveServer

<PageTitle>Company Master</PageTitle>

@if(viewing){
    <FrmView TableName="CompanyMaster" OnClose="HandleView" EditClicked="OnEditClicked"/>
}
<FRM FormName="Company Master Entry">
    <ChildContent>
        <!-- Row 1: Company Code, Company Name -->
        <ROW>
            <NInput Layout="1" Title="Company Code *" Type="number" @bind-Value="@model.dict["CompanyCode"]" 
                    Min="1" Placeholder="Enter company code" ReadOnly=true/>
            
            <NInput Layout="1" Title="Company Name *" Type="text" @bind-Value="@model.dict["CompanyName"]" 
                    Placeholder="Enter company name" />
            
            <NInput Layout="1" Title="Owner Mobile No" Type="tel" @bind-Value="@model.dict["OwnerMobileNo"]" 
                    Placeholder="Enter owner mobile number" />
        </ROW>

        <!-- Row 2: Company Permanent Lock -->
        <ROW>
            <Checkbox Title="CompanyPermanantLock" @bind-Value="@model.dict["CompanyPermanantLock"]" />
        </ROW>
    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        
            <Button Text="Save" spanText="Saving..." OnClick="HandleSave" btnType="Save"/>
            <Button Text="Clear" OnClick="HandleClear"/>
            <Button Text="View" OnClick="HandleView"/>
        
    </CardFooterContent>
</FRM>

<!-- Success/Error Messages -->
<Msg  @ref="MessageCmp"/>

@code {

    Model model = new Model("CompanyMaster", "CompanyCode");
    private Msg MessageCmp;
    // UI state variables
    private bool isSaving = false;
    private bool viewing = false;
    private bool isEditing = false;
    
    // Helper property for checkbox binding
    private bool companyPermanentLock
    {
        get => model.dict.ContainsKey("CompanyPermanantLock") && model.dict["CompanyPermanantLock"] == "1";
        set => model.dict["CompanyPermanantLock"] = value ? "1" : "0";
    }

    protected override void OnInitialized()
    {
        // The Model constructor already calls SetPrimarykey() which generates the next number
        StateHasChanged();
    }

    private bool ValidateForm()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(model.dict["CompanyCode"]) || !int.TryParse(model.dict["CompanyCode"], out _))
            isValid = false;

        if (string.IsNullOrWhiteSpace(model.dict["CompanyName"]))
            isValid = false;

        return isValid;
    }

    private async Task HandleSave()
    {
        if (!ValidateForm())
        {
            MessageCmp.ShowMessage("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            bool success = false;

            //Update If Editing Mode is On
            if (isEditing)success = model.Update();
            else success = model.Save();

            if (success)
            {
                await MessageCmp.MessageSuccess();
                await HandleClear();
            }
            else await MessageCmp.MessageSaveError();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Company: {ex.Message}");
            MessageCmp.ShowMessage("Error saving company record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleClear()
    {
        // Reset form fields using Model's Clear method
        model.Clear();
        companyPermanentLock=false;
        isEditing = false;
        MessageCmp.ClearMessage();
        
        // Reset checkbox helper property
        companyPermanentLock = false;
        
        StateHasChanged();
    }

    private void HandleView()
    {
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row)
    {
        try
        {
            // Populate model dictionary from the DataRow
            model.Populate(row);
            
            // Update checkbox helper property
            companyPermanentLock = model.dict["CompanyPermanantLock"] == "1";
            
            isEditing = true;
            viewing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting form data: {ex.Message}");
            MessageCmp.ShowMessage("Error loading record data.", "danger", "bi-exclamation-triangle");
        }
    }
}