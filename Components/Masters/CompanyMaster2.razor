@page "/companymaster"
@using VisionSoft
@using System.Data
@using VisionSoft.Components.Templates
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Company Master</PageTitle>

<T_Msg  @ref="MessageCmp"/>
@if(viewing){
    <FrmView TableName="CompanyMaster" OnClosed="HandleView" EditClicked="OnEditClicked"
        DeleteClicked="OnDeleteClicked"/>
}
<T_Frm FormName="Company Master Entry" @ref="FrmCmp">
    <ChildContent>
        <!-- Row 1: Company Code, Company Name -->
        <T_Row>
            <T_Input Layout="1" Title="Company Code *" Type="number" @bind-Value="@model.dict["CompanyCode"]" 
                    Min="1" Placeholder="Enter company code" ReadOnly=true />
            
            <T_Input Layout="1" Title="Company Name *" Type="text" @bind-Value="@model.dict["CompanyName"]" 
                    Placeholder="Enter company name" MaxLength=10/>
            
            <T_Input Layout="1" Title="Owner Mobile No" Type="tel" @bind-Value="@model.dict["OwnerMobileNo"]" 
                    Placeholder="Enter owner mobile number" />
            
            <T_RInput Title="Supplier Name" TableName="SupplierMaster" PrimaryColumn="SupplierCode" DisplayColumn="SupplierName"/>
        </T_Row>

        <!-- Row 2: Company Permanent Lock -->
        <T_Row>
            <T_Checkbox Title="CompanyPermanantLock" @bind-Value="@model.dict["CompanyPermanantLock"]" />
        </T_Row>

    </ChildContent>

    <!-- Card Footer Actions -->
    <CardFooterContent>
        
            <T_Button Text="Save" spanText="Saving..." OnClick="HandleSave" btnType="Save"/>
            <T_Button Text="Clear" OnClick="HandleClear"/>
            <T_Button Text="View" OnClick="HandleView"/>
        
    </CardFooterContent>
</T_Frm>




@code {

    Model model = new Model("CompanyMaster", "CompanyCode");
    private T_Msg MessageCmp;
    private T_Frm FrmCmp;
    private DotNetObjectReference<CompanyMaster2>? dotNetRef;
    // UI state variables
    private bool isSaving = false;
    private bool viewing = false;
    private bool isEditing = false;
    


    ClsDatabase db = new ClsDatabase();
    DataTable dt = new DataTable();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
        dt = db.GetDataTable("Select * from CompanyMaster");
        Console.WriteLine("First Render");
        dotNetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(model.dict["CompanyCode"]) || !int.TryParse(model.dict["CompanyCode"], out _))
            isValid = false;

        if (string.IsNullOrWhiteSpace(model.dict["CompanyName"]))
            isValid = false;

        return isValid;
    }

    [JSInvokable]
    public async Task HandleSave()
    {
        if (!ValidateForm())
        {
            MessageCmp.Show("Please fill all required fields with valid values.", "danger", "bi-exclamation-triangle");
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            bool success = false;

            //Update If Editing Mode is On
            if (isEditing)success = model.Update();
            else success = model.Save();

            if (success)
            {
                await MessageCmp.Success();
                await HandleClear();
            }
            else await MessageCmp.SaveError();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving Company: {ex.Message}");
            MessageCmp.Show("Error saving company record. Please try again.", "danger", "bi-exclamation-triangle");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    
    private async Task HandleClear()
    {
        model.Clear();
        isEditing = false;
        MessageCmp.Clear();
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView()
    {
        viewing = !viewing;
        StateHasChanged();
    }

    public void OnEditClicked(DataRow row)
    {
        try
        {
            // Populate model dictionary from the DataRow
            model.Populate(row);
            isEditing = true;
            viewing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting form data: {ex.Message}");
            MessageCmp.Show("Error loading record data.", "danger", "bi-exclamation-triangle");
        }
    }

    public void OnDeleteClicked(DataRow row){
        foreach(DataColumn column in row.Table.Columns){
            Console.WriteLine(row[column.ColumnName]);
        }
    }
    
}