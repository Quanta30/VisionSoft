@page "/remindermaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer

<T_Msg @ref="Msg" />
@if (isViewing)
{
    <FrmView TableName="ReminderMaster" OnClosed="HandleClose" EditClicked="HandleEdit" PrimaryKeyColumn="EntryNo"/>
}

<T_Frm FormName="Reminder Master">
    <ChildContent>
        <T_Row>
            <T_Input Title="Entry No *" ReadOnly="true" @bind-Value="@model.dict["EntryNo"]" ColSize="col-md-2" />
            <T_Input Title="Entry Date" Type="date" @bind-Value="@model.dict["EntryDate"]" ColSize="col-md-2"
                     GetInputReference="@((eref) => getInputReferences(0, eref))"
                     NextReference="@(GetRef(1))"
                     @ref="firstReference" />
            <T_Input Title="Remind What *" @bind-Value="@model.dict["RemindWhat"]" MaxLength="50" ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(1, eref))"
                     NextReference="@(GetRef(2))" />
            <T_Checkbox Title="Reminder On" @bind-Value="@model.dict["ReminderOn"]" ColSize="col-md-2"
                        GetInputReference="@((eref) => getInputReferences(2, eref))"
                        NextReference="@(GetRef(3))" />
            <T_Checkbox Title="Reminder Off" @bind-Value="@model.dict["ReminderOff"]" ColSize="col-md-2"
                        GetInputReference="@((eref) => getInputReferences(3, eref))"
                        NextReference="@(GetRef(4))" />
        </T_Row>

        <h6 class="mt-4">Days of the Week</h6>
        <T_Row>
            @for (int i = 0; i < Days.Length; i++)
            {
                var day = Days[i];
                <T_Checkbox Title="@day" @bind-Value="@model.dict[$"Day{day}"]" ColSize="col-auto"
                            GetInputReference="@((eref) => getInputReferences(4 + i, eref))"
                            NextReference="@(GetRef(4 + i + 1))" />
            }
        </T_Row>

        <h6 class="mt-4">Dates of the Month</h6>
        @for (int rowIndex = 0; rowIndex < 4; rowIndex++)
        {
            <T_Row>
                @for (int colIndex = 1; colIndex <= 8; colIndex++)
                {
                    int date = rowIndex * 8 + colIndex;
                    if (date <= 31)
                    {
                        int referenceIndex = 11 + date -1; // Starts after week days
                        <T_Checkbox Title=@($"Date{date}") @bind-Value="@model.dict[$"Date{date}"]" ColSize="col-md-1"
                                    GetInputReference="@((eref) => getInputReferences(referenceIndex, eref))"
                                    NextReference="@(GetRef(referenceIndex + 1))" />
                    }
                }
            </T_Row>
        }

        <h6 class="mt-4">Months of the Year</h6>
        <T_Row>
            @for (int i = 0; i < Months.Length; i++)
            {
                var month = Months[i];
                int referenceIndex = 42 + i; // Starts after dates
                <T_Checkbox Title="@month" @bind-Value="@model.dict[$"Month{month}"]" ColSize="col-auto"
                            GetInputReference="@((eref) => getInputReferences(referenceIndex, eref))"
                            NextReference="@(GetRef(referenceIndex + 1))" />
            }
        </T_Row>

        <h6 class="mt-4">Years</h6>
        @for (int rowIndex = 0; rowIndex < 2; rowIndex++)
        {
            <T_Row>
                @for (int colIndex = 0; colIndex < 6; colIndex++)
                {
                    int year = 2010 + (rowIndex * 6) + colIndex;
                    if (year <= 2021)
                    {
                        int referenceIndex = 54 + (rowIndex * 6) + colIndex; // Starts after months
                        <T_Checkbox Title=@year.ToString() @bind-Value="@model.dict[$"Year{year}"]" ColSize="col-md-1"
                                    GetInputReference="@((eref) => getInputReferences(referenceIndex, eref))"
                                    NextReference="@(GetRef(referenceIndex + 1))" />
                    }
                }
            </T_Row>
        }

        <T_Row>
            <T_Input Title="Remind Time" Type="time" @bind-Value="@model.dict["RemindTime"]" ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(66, eref))"
                     NextReference="@(GetRef(67))" />
            <T_Input Title="Snooze (min)" Type="number" @bind-Value="@model.dict["Snooze"]" ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(67, eref))"
                     NextReference="@(GetRef(68))" />
            <T_Input Title="Repeat" Type="number" @bind-Value="@model.dict["Repeat"]" ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(68, eref))"
                     NextReference="@(GetRef(69))" />
            <T_Input Title="Agent" @bind-Value="@model.dict["Agent"]" MaxLength="50" ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(69, eref))"
                     OnEnterPressed="HandleSave" />
        </T_Row>
    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" Info="(ALT + S)" />
        <T_Button Text="Clear" OnClick="HandleClear" Info="(ALT + C)" />
        <T_Button Text="View" OnClick="HandleView" Info="(ALT + V)" />
        <T_Button Text="Print" OnClick="HandlePrint" Info="(ALT + P)" />
    </CardFooterContent>
</T_Frm>

@code {
    // =================================================================================
    // REFERENCES & STATE
    // =================================================================================

    #region References and State
    // UI & JS Interop
    private T_Msg Msg;
    private T_Input firstReference;
    private DotNetObjectReference<ReminderMaster> dotNetRef;

    // Data Models
    private Model model = new Model("ReminderMaster", "EntryNo");

    // State Flags
    private bool isViewing = false;
    private bool isEditing = false;

    // Focus Management
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();
    
    // Constants for loops
    private static readonly string[] Days = { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
    private static readonly string[] Months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    #endregion

    // =================================================================================
    // LIFECYCLE METHODS
    // =================================================================================

    #region Lifecycle Methods
    protected override void OnInitialized()
    {
        // Set default values for a new record
        if (string.IsNullOrEmpty(model.dict["EntryDate"]))
            model.dict["EntryDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        
        model.dict["ReminderOn"] ??= "1";
        model.dict["ReminderOff"] ??= "0";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set initial focus to the first editable field.
            if (firstReference?.reference.Id != null)
            {
                await firstReference.Focus();
            }

            // Setup JS interop for hotkeys.
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }
    #endregion

    // =================================================================================
    // FOCUS MANAGEMENT
    // =================================================================================

    #region Focus Management
    public void getInputReferences(int position, ElementReference eref)
    {
        references[position] = eref;
    }

    private ElementReference GetRef(int idx)
    {
        return references.ContainsKey(idx) ? references[idx] : default;
    }
    #endregion

    // =================================================================================
    // CRUD & FORM ACTIONS
    // =================================================================================

    #region CRUD and Form Actions
    [JSInvokable]
    public async Task HandleSave()
    {
        if (!ValidateForm()) return;

        try
        {
            var transaction = new Transaction();
            if (isEditing)
            {
                model.Update(transaction);
            }
            else
            {
                model.Save(transaction);
            }

            if (transaction.Execute())
            {
                await Msg.Success("Reminder saved successfully!");
                await HandleClear();
            }
            else
            {
                throw new Exception("Transaction failed to execute.");
            }
        }
        catch (Exception ex)
        {
            await Msg.Error($"Save failed: {ex.Message}");
        }
    }

    [JSInvokable]
    public Task HandleClear()
    {
        model.Clear();
        isEditing = false;
        references.Clear();
        OnInitialized(); // Re-apply default values
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public void HandlePrint()
    {
        // TODO: Implement printing logic if needed.
        Console.WriteLine("Print Reminder Master");
    }

    public async Task HandleEdit(DataRow row)
    {
        await HandleClear();
        isEditing = true;
        isViewing = false;
        model.Populate(row);
        StateHasChanged();
        if (firstReference?.reference.Id != null)
        {
            await firstReference.Focus();
        }
    }

    public void HandleClose()
    {
        isViewing = false;
        StateHasChanged();
    }
    #endregion

    // =================================================================================
    // VALIDATION
    // =================================================================================

    private bool ValidateForm()
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(model.dict["RemindWhat"]))
            errors.Add("Remind What is required");

        if (errors.Any())
        {
            var message = string.Join(", ", errors);
            Msg.Show(message, "danger", "bi-exclamation-triangle");
            return false;
        }

        return true;
    }

    // =================================================================================
    // CLEANUP
    // =================================================================================

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
