@page "/AMCMaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer 

<T_Msg @ref="Msg" />
@if (isViewing)
{
    <FrmView TableName="AMCMaster" OnClosed="HandleClose" EditClicked="HandleEdit"/>
}

<T_Frm FormName="AMC Master">
    <ChildContent>
        <T_Row>
            <T_Input Title="Entry No *" ReadOnly="true" @bind-Value="@model.dict["EntryNo"]"  />
            <T_Input Title="Entry Date" Type="date" @bind-Value="@model.dict["EntryDate"]" />
            <T_Input Title="Party Code"  Type="number" @bind-Value="@model.dict["PartyCode"]" />
        </T_Row>    
        <T_Row>
            <T_Input Title="City" @bind-Value="@model.dict["City"]" MaxLength="50" />
            <T_RInput Title="Product" TableName="ProductMaster" DisplayColumn="ProductName" PrimaryColumn="ProductCode"
                      @bind-Value="@model.dict["ProductCode"]"  />
            <T_Input Title="Installation Date" Type="date" @bind-Value="@model.dict["InstallationDate"]"  />
        </T_Row>
        <T_Row>
            <T_Input Title="No of Nodes" Type="number" Min="0" @bind-Value="@model.dict["NoOfNode"]"  />
            <T_Input Title="AMC From Date" Type="date" @bind-Value="@model.dict["AMCFromDate"]"  />
            <T_Input Title="AMC To Date" Type="date" @bind-Value="@model.dict["AMCToDate"]"  />
        </T_Row>
        <T_Row>
            <T_Input Title="Online Calls" Type="number" Min="0" @bind-Value="@model.dict["OnlineCall"]"  />
            <T_Input Title="Onsite Calls" Type="number" Min="0" @bind-Value="@model.dict["OnsiteCall"]"  />
            <T_Input Title="AMCAmount" Type="number" Min="0" @bind-Value="@model.dict["AMCAmount"]"  />
        </T_Row>    

    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" Style=""/>
        <T_Button Text="Clear" btnType="Clear" OnClick="HandleClear" Style=""/>
        <T_Button Text="View" btnType="View" OnClick="HandleView" Style=""/>
    </CardFooterContent>
</T_Frm>

@code {
    private T_Msg Msg;
    public DotNetObjectReference<AMCMaster> dotNetRef;

    Model model = new Model("AMCMaster", "EntryNo");
    private bool isViewing = false;
    private bool isEditing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            Console.WriteLine("OnAfterRenderAsync executed");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task HandleSave()
    {
        try
        {
            if (!ValidateForm()) return;

            bool success = isEditing
                ?  model.Update()
                :  model.Save();

            if (success)
            {
                await Msg.Success();

                if (!isEditing)
                {
                    HandleClear();
                }

                isEditing = false;
            }
            else
            {
                await Msg.SaveError();
            }
        }
        catch (Exception ex)
        {
            await Msg.SaveError();
            Console.WriteLine($"Error saving AMC record: {ex.Message}");
        }
    }

    [JSInvokable]
    public void HandleClear()
    {
        model.Clear();
        isEditing = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandlePrint()
    {
        Console.WriteLine("Print AMC Master");
        
        // implement printing logic if needed
        StateHasChanged();
    }

    public async Task HandleEdit(DataRow row)
    {
        try
        {
            isEditing = true;
            isViewing = false;

            foreach (var key in model.dict.Keys.ToList())
            {
                model.dict[key] = row[key]?.ToString() ?? model.dict[key];
            }

            // Convert known dates to formatted string
            model.dict["EntryDate"] = ConvertDate(row["EntryDate"]);
            model.dict["InstallationDate"] = ConvertDate(row["InstallationDate"]);
            model.dict["AMCFromDate"] = ConvertDate(row["AMCFromDate"]);
            model.dict["AMCToDate"] = ConvertDate(row["AMCToDate"]);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading AMC record: {ex.Message}");
        }
    }

    private string ConvertDate(object dateObj)
    {
        return dateObj != DBNull.Value
            ? Convert.ToDateTime(dateObj).ToString("yyyy-MM-dd")
            : "";
    }

    public void HandleClose()
    {
        isViewing = false;
    }



    private bool ValidateForm()
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(model.dict["EntryNo"])) errors.Add("Entry No is required");
        if (string.IsNullOrWhiteSpace(model.dict["PartyCode"])) errors.Add("Party is required");
        if (string.IsNullOrWhiteSpace(model.dict["ProductCode"])) errors.Add("Product is required");
        if (string.IsNullOrWhiteSpace(model.dict["City"])) errors.Add("City is required");

        if (!decimal.TryParse(model.dict["AMCAmount"], out var amcAmount) || amcAmount < 0)
            errors.Add("AMC Amount must be a valid positive number");

        if (!int.TryParse(model.dict["OnlineCall"], out var onlineCall) || onlineCall < 0)
            errors.Add("Online Calls must be a valid positive number");

        if (!int.TryParse(model.dict["OnsiteCall"], out var onsiteCall) || onsiteCall < 0)
            errors.Add("Onsite Calls must be a valid positive number");

        if (!int.TryParse(model.dict["NoOfNode"], out var noOfNode) || noOfNode < 1)
            errors.Add("Number of Nodes must be at least 1");

        if (DateTime.TryParse(model.dict["AMCFromDate"], out var fromDate) &&
            DateTime.TryParse(model.dict["AMCToDate"], out var toDate) &&
            fromDate > toDate)
        {
            errors.Add("AMC To Date must be after AMC From Date");
        }

        if (errors.Any())
        {
            var message = string.Join(", ", errors);
            Msg.Show(message, "danger", "bi-exclamation-triangle");
            return false;
        }

        return true;
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

}
