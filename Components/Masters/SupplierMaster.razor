@using System.Data
@rendermode InteractiveServer

<div class="supplier-master-section">
    <hr class="fade-divider my-4" />
    <h5 class="mb-3">Supplier Details</h5>

    <T_Row>
        <T_Input Title="Supplier Code *" ReadOnly="true"
                 @bind-Value="@supplierModel.dict["SupplierCode"]"
                 ColSize="col-md-3" />
        <T_Input Title="Supplier Name *"
                 @bind-Value="@supplierModel.dict["SupplierName"]"
                 MaxLength="50" ColSize="col-md-6"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 0, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 1) ?? default)"
                 @ref="firstSupplierReference" />
        <T_Input Title="City" @bind-Value="@supplierModel.dict["SupplierCity"]"
                 MaxLength="50" ColSize="col-md-3"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 1, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 2) ?? default)" />
    </T_Row>
    <T_Row>
        <T_Input Title="Phone No." @bind-Value="@supplierModel.dict["SupplierPhoneNo"]"
                 MaxLength="50" ColSize="col-md-3"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 2, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 3) ?? default)" />
        <T_Input Title="Mobile No." @bind-Value="@supplierModel.dict["SupplierMobileNo"]"
                 MaxLength="50" ColSize="col-md-3"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 3, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 4) ?? default)" />
        <T_Input Title="Email" @bind-Value="@supplierModel.dict["SupplierEmail"]"
                 MaxLength="50" ColSize="col-md-3"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 4, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 5) ?? default)" />
        <T_Input Title="GST No." @bind-Value="@supplierModel.dict["SupplierGSTNo"]"
                 MaxLength="50" ColSize="col-md-3"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 5, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 6) ?? default)" />
    </T_Row>
    <T_Row>
        <T_Input Title="PAN No." @bind-Value="@supplierModel.dict["SupplierPanNo"]"
                 MaxLength="50" ColSize="col-md-4"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 6, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 7) ?? default)" />
        <T_Input Title="Credit Days" Type="number"
                 @bind-Value="@supplierModel.dict["CreditDays"]" ColSize="col-md-4"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 7, eref))"
                 NextReference="@(GetParentRef?.Invoke(StartIndex + 8) ?? default)" />
        <T_Input Title="State Code" Type="number"
                 @bind-Value="@supplierModel.dict["SupplierStateCode"]" ColSize="col-md-4"
                 GetInputReference="@((eref) => RegisterReference?.Invoke(StartIndex + 8, eref))"
                 OnEnterPressed="OnFinalEnter" />
    </T_Row>
</div>

@code {
    [Parameter] public Model supplierModel { get; set; }
    [Parameter] public Action<int, ElementReference> RegisterReference { get; set; }
    [Parameter] public Func<int, ElementReference> GetParentRef { get; set; }
    [Parameter] public int StartIndex { get; set; }
    [Parameter] public EventCallback OnFinalEnter { get; set; }

    private T_Input firstSupplierReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && firstSupplierReference?.reference.Id != null)
        {
            await firstSupplierReference.Focus();
        }
    }

    public List<string> ValidateSupplier()
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(supplierModel.dict["SupplierName"]))
            errors.Add("Supplier Name is required");
        return errors;
    }

    public void SaveSupplier(Transaction transaction) => supplierModel.Save(transaction);
    public void UpdateSupplier(Transaction transaction) => supplierModel.Update(transaction);
    public void PopulateSupplier(DataRow row) => supplierModel.Populate(row);
}
