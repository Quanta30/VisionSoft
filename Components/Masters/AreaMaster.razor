@page "/areamaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer 

<T_Msg @ref="Msg" />
@if (isViewing)
{
    <FrmView TableName="AreaMaster" OnClosed="HandleClose" EditClicked="HandleEdit"/>
}

<T_Frm FormName="Area Master">
    <ChildContent>
        <T_Row>
            <T_Input Title="Area Code *" ReadOnly="true" 
                     @bind-Value="@model.dict["AreaCode"]" 
                     ColSize="col-md-4" />
            <T_Input Title="Area Name *" 
                     @bind-Value="@model.dict["AreaName"]" 
                     MaxLength="500" ColSize="col-md-4"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(1))
                     @ref="firstReference" />
            <T_RInput Title="Route" 
                      TableName="RouteMaster" 
                      DisplayColumn="RouteName" 
                      PrimaryColumn="RouteCode"
                      @bind-Value="@model.dict["RouteCode"]" 
                      ColSize="col-md-4"
                      GetInputReference="getInputReferences"
                      NextReference=@(GetRef(0)) />
        </T_Row>
    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" Style=""/>
        <T_Button Text="Clear" btnType="Clear" OnClick="HandleClear" Style=""/>
        <T_Button Text="View" btnType="View" OnClick="HandleView" Style=""/>
    </CardFooterContent>
</T_Frm>

@code {
    private T_Msg Msg;
    private DotNetObjectReference<AreaMaster> dotNetRef;
    private T_Input firstReference;

    Model model = new Model("AreaMaster", "AreaCode");
    private bool isViewing = false;
    private bool isEditing = false;

    // ============================= ELEMENT REFERENCES MANAGEMENT =============================
    
    public List<ElementReference> references = new List<ElementReference>();
    
    public void getInputReferences(ElementReference eref)
    {
        references.Add(eref);
        Console.WriteLine($"Added reference #{references.Count - 1} for element");
    }
    
    private ElementReference GetRef(int idx) 
    {
        Console.WriteLine($"GetRef called with idx={idx}, references.Count={references.Count}");
        return (idx >= 0 && idx < references.Count) 
            ? references[idx] 
            : default;
    }

    // ============================= COMPONENT LIFECYCLE METHODS =============================

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await firstReference.Focus();
            Console.WriteLine("AreaMaster OnAfterRenderAsync executed");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    // ============================= CRUD OPERATIONS =============================

    [JSInvokable]
    public async Task HandleSave()
    {
        if (!ValidateForm())
        {
            await Msg.SaveError();
        }
        else
        {
            try
            {
                bool success = isEditing
                    ? model.Update()
                    : model.Save();

                if (success)
                {
                    await Msg.Success();

                    if (!isEditing)
                    {
                        HandleClear();
                    }

                    isEditing = false;
                }
                else
                {
                    await Msg.SaveError();
                }
            }
            catch (Exception ex)
            {
                await Msg.SaveError();
                Console.WriteLine($"Error saving Area record: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public void HandleClear()
    {
        model.Clear();
        isEditing = false;
        
        // Clear references
        references.Clear();
        
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandlePrint()
    {
        Console.WriteLine("Print Area Master");
        // implement printing logic if needed
        StateHasChanged();
    }

    public async Task HandleEdit(DataRow row)
    {
        try
        {
            isEditing = true;
            isViewing = false;

            model.Populate(row);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Area record: {ex.Message}");
        }
    }

    public void HandleClose()
    {
        isViewing = false;
        StateHasChanged();
    }

    // ============================= VALIDATION =============================

    private bool ValidateForm()
    {
        var errors = new List<string>();

        // Required field validations
        if (string.IsNullOrWhiteSpace(model.dict["AreaCode"])) 
            errors.Add("Area Code is required");

        if (string.IsNullOrWhiteSpace(model.dict["AreaName"])) 
            errors.Add("Area Name is required");

        if (string.IsNullOrWhiteSpace(model.dict["RouteCode"])) 
            errors.Add("Route is required");

        // Length validation for AreaName
        if (!string.IsNullOrWhiteSpace(model.dict["AreaName"]) && model.dict["AreaName"].Length > 500)
            errors.Add("Area Name cannot exceed 500 characters");

        // Numeric validation for codes
        if (!string.IsNullOrWhiteSpace(model.dict["AreaCode"]) && !int.TryParse(model.dict["AreaCode"], out _))
            errors.Add("Area Code must be a valid number");

        if (!string.IsNullOrWhiteSpace(model.dict["RouteCode"]) && !int.TryParse(model.dict["RouteCode"], out _))
            errors.Add("Route Code must be a valid number");

        if (errors.Any())
        {
            var message = string.Join(", ", errors);
            Msg.Show(message, "danger", "bi-exclamation-triangle");
            return false;
        }

        return true;
    }

    // ============================= CLEANUP =============================

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}