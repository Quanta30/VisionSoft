@page "/ledgermaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer

<T_Msg @ref="Msg" />
@if (isViewing)
{
    <FrmView TableName="LedgerMaster" OnClosed="HandleClose" EditClicked="HandleEdit" />
}

<T_Frm FormName="Ledger Master">
    <ChildContent>
        <!-- LedgerMaster fields -->
        <T_Row>
            <T_Input Title="Ledger Code *" ReadOnly="true"
                     @bind-Value="@ledgerModel.dict["LedgerCode"]"
                     ColSize="col-md-3" />
            <T_Input Title="Ledger Name *"
                     @bind-Value="@ledgerModel.dict["LedgerName"]"
                     MaxLength="1000" ColSize="col-md-6"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(1))
                     @ref="firstReference" />
            <T_RInput Title="Group"
                     Value="@ledgerModel.dict["GroupCode"]"
                     ValueChanged="OnGroupCodeChanged"
                     ColSize="col-md-3"
                     TableName="GroupMaster"
                     PrimaryColumn="GroupCode"
                     DisplayColumn="GroupName"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(2)) />
        </T_Row>
        <T_Row>
            <T_Input Title="Debit Opening Balance" Type="number" Step="0.01"
                     @bind-Value="@ledgerModel.dict["DebitOpeningBalance"]"
                     ColSize="col-md-3"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(3)) />
            <T_Input Title="Credit Opening Balance" Type="number" Step="0.01"
                     @bind-Value="@ledgerModel.dict["CreditOpeningBalance"]"
                     ColSize="col-md-3"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(4)) />
            <T_Input Title="Closing Balance" Type="number" Step="0.01"
                     @bind-Value="@ledgerModel.dict["ClosingBalance"]"
                     ColSize="col-md-3"
                     GetInputReference="getInputReferences"
                     OnEnterPressed="()=>{HandleEnter(nextReference);}" />
        </T_Row>

        @if (showCustomerFields)
        {
            <CustomerMaster @ref="customerMasterRef" 
                          customerModel="@customerModel"
                          GetInputReference="getInputReferences"
                          StartReference="GetInputReference" />
        }

        @if (showSupplierFields)
        {
            <SupplierMaster @ref="supplierMasterRef" 
                          supplierModel="@supplierModel"
                          StartReference="getComponentReferences" />
        }
    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" />
        <T_Button Text="Clear" btnType="Clear" OnClick="HandleClear" />
        <T_Button Text="View" btnType="View" OnClick="HandleView" />
    </CardFooterContent>
</T_Frm>

@code {
    private T_Msg Msg;
    private DotNetObjectReference<LedgerMaster> dotNetRef;
    private CustomerMaster customerMasterRef;
    private SupplierMaster supplierMasterRef;
    private T_Input firstReference;
    private T_Input nextReference;

    ClsDatabase db = new ClsDatabase();

    Model ledgerModel = new Model("LedgerMaster", "LedgerCode");
    Model customerModel = new Model("CustomerMaster", "CustomerCode");
    Model supplierModel = new Model("SupplierMaster", "SupplierCode");

    private bool isViewing = false;
    private bool isEditing = false;
    private bool showCustomerFields = false;
    private bool showSupplierFields = false;
    string GroupName;

    // ============================= ELEMENT REFERENCES MANAGEMENT =============================
    
    public List<ElementReference> references = new List<ElementReference>();
    
    public void getInputReferences(ElementReference eref)
    {
        references.Add(eref);
        Console.WriteLine($"Added reference #{references.Count - 1} for element");
    }
    
    private ElementReference GetRef(int idx) 
    {
        Console.WriteLine($"GetRef called with idx={idx}, references.Count={references.Count}");
        return (idx >= 0 && idx < references.Count) 
            ? references[idx] 
            : default;
    }

    public void getComponentReferences(T_Input eref){
        nextReference = eref;
    }

    public async void HandleEnter( T_Input eref){
     
          await eref.Focus();
        
    }


    // ============================= COMPONENT LIFECYCLE METHODS =============================

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await firstReference.Focus();
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    // ============================= CRUD OPERATIONS =============================

    [JSInvokable]
    public async Task HandleSave()
    {
        if (!ValidateForm())
        {
            await Msg.SaveError();
        }
        else
        {
            try
            {
                if (isEditing)
                {
                    ledgerModel.Update();
                    if (showCustomerFields && customerMasterRef != null)
                        customerMasterRef.UpdateCustomer();
                    if (showSupplierFields && supplierMasterRef != null)
                        supplierMasterRef.UpdateSupplier();
                }
                else
                {
                    ledgerModel.Save();
                    if (showCustomerFields && customerMasterRef != null)
                        customerMasterRef.SaveCustomer();
                    if (showSupplierFields && supplierMasterRef != null)
                        supplierMasterRef.SaveSupplier();
                }
                await Msg.Success();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Save error: {ex.Message}");
                await Msg.SaveError();
            }
        }
    }

    [JSInvokable]
    public void HandleClear()
    {
        ledgerModel.Clear();
        customerModel.Clear();
        supplierModel.Clear();
        if (customerMasterRef != null)
            customerMasterRef.ClearCustomer();
        if (supplierMasterRef != null)
            supplierMasterRef.ClearSupplier();
        isEditing = false;
        showCustomerFields = false;
        showSupplierFields = false;
        
        // Clear references
        references.Clear();
        
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
    }

    public async Task HandleEdit(DataRow row)
    {
        isEditing = true;
        isViewing = false;

        ledgerModel.Populate(row);
        OnGroupCodeChanged(ledgerModel.dict["GroupCode"]);

        // Load customer data if applicable
        if (showCustomerFields)
        {
            var customerDt = db.GetDataTable(
                $"SELECT * FROM CustomerMaster WHERE LedgerCode = '{ledgerModel.dict["LedgerCode"]}'");
            if (customerDt.Rows.Count > 0 && customerMasterRef != null)
                customerMasterRef.PopulateCustomer(customerDt.Rows[0]);
        }

        // Load supplier data if applicable
        if (showSupplierFields)
        {
            var supplierDt = db.GetDataTable(
                $"SELECT * FROM SupplierMaster WHERE LedgerCode = '{ledgerModel.dict["LedgerCode"]}'");
            if (supplierDt.Rows.Count > 0 && supplierMasterRef != null)
                supplierMasterRef.PopulateSupplier(supplierDt.Rows[0]);
        }

        StateHasChanged();
    }

    public void HandleClose()
    {
        isViewing = false;
        StateHasChanged();
    }

    // ============================= VALIDATION =============================

    private bool ValidateForm()
    {
        var errors = new List<string>();
        
        if (string.IsNullOrWhiteSpace(ledgerModel.dict["LedgerName"]))
            errors.Add("Ledger Name is required");

        if (showCustomerFields && customerMasterRef != null)
        {
            var customerErrors = customerMasterRef.ValidateCustomer();
            errors.AddRange(customerErrors);
        }

        if (showSupplierFields && supplierMasterRef != null)
        {
            var supplierErrors = supplierMasterRef.ValidateSupplier();
            errors.AddRange(supplierErrors);
        }

        if (errors.Any())
        {
            Msg.Show(string.Join(", ", errors), "danger", "bi-exclamation-triangle");
            return false;
        }

        return true;
    }

    // ============================= GROUP CHANGE HANDLING =============================

    public void OnGroupCodeChanged(string code)
    {
        GroupName = db.GetScalar($"Select GroupName from GroupMaster where GroupCode = '{code}'")?.ToString();
        ledgerModel.dict["GroupCode"] = code;
        
        // Reset both flags
        showCustomerFields = false;
        showSupplierFields = false;
        
        if (GroupName == "SUNDRY DEBTORS")
        {
            showCustomerFields = true;
            // Set the LedgerCode for the customer
            customerModel.dict["LedgerCode"] = ledgerModel.dict["LedgerCode"];
        }
        else if (GroupName == "SUNDRY CREDITORS")
        {
            showSupplierFields = true;
            // Set the LedgerCode for the supplier
            supplierModel.dict["LedgerCode"] = ledgerModel.dict["LedgerCode"];
        }
        
        StateHasChanged();
    }

    // ============================= CLEANUP =============================

    public void Dispose() => dotNetRef?.Dispose();
}