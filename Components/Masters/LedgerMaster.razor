@page "/ledgermaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer

<T_Msg @ref="Msg" />

@if (isViewing)
{
    <FrmView Query="select LedgerCode,LedgerName,GroupName from LedgerMaster join GroupMaster On LedgerMaster.GroupCode = GroupMaster.GroupCode"
             PrimaryKeyColumn="LedgerCode"
             InitialFilters="LedgerCode:LedgerName:GroupName"
             OnClosed="HandleClose"
             EditClicked="HandleEdit" />
}

<T_Frm FormName="Ledger Master">
    <ChildContent>
        <!-- LedgerMaster fields -->
        <T_Row>
            <T_Input Title="Ledger Code *" ReadOnly="true"
                     @bind-Value="@ledgerModel.dict["LedgerCode"]"
                     ColSize="col-md-3" />

            <T_Input Title="Ledger Name *"
                     @bind-Value="@ledgerModel.dict["LedgerName"]"
                     MaxLength="1000" ColSize="col-md-6"
                     GetInputReference="@((eref) => getInputReferences(0, eref))"
                     NextReference="@(GetRef(1))"
                     @ref="firstReference" />

            <T_RInput Title="Group *"
                      Value="@ledgerModel.dict["GroupCode"]"
                      ValueChanged="OnGroupCodeChanged"
                      ColSize="col-md-3"
                      TableName="GroupMaster"
                      PrimaryColumn="GroupCode"
                      DisplayColumn="GroupName"
                      GetInputReference="@((eref) => getInputReferences(1, eref))"
                      NextReference="@(GetRef(2))" />
        </T_Row>
        <T_Row>
            <T_Input Title="Debit Opening Balance" Type="number" Step="0.01"
                     @bind-Value="@ledgerModel.dict["DebitOpeningBalance"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(2, eref))"
                     NextReference="@(GetRef(3))" />

            <T_Input Title="Credit Opening Balance" Type="number" Step="0.01"
                     @bind-Value="@ledgerModel.dict["CreditOpeningBalance"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(3, eref))"
                     NextReference="@(GetRef(4))" />

            <T_Input Title="Closing Balance" Type="number" Step="0.01" ReadOnly="true"
                     @bind-Value="@ledgerModel.dict["ClosingBalance"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(4, eref))"
                     NextReference="@(GetRef(5))" />
        </T_Row>

        @if (showCustomerFields)
        {
            <CustomerMaster @ref="customerMasterRef"
                            customerModel="@customerModel"
                            RegisterReference="getInputReferences"
                            GetParentRef="GetRef"
                            StartIndex="5"
                            OnFinalEnter="HandleSave" />
        }

        @if (showSupplierFields)
        {
            <SupplierMaster @ref="supplierMasterRef"
                            supplierModel="@supplierModel"
                            RegisterReference="getInputReferences"
                            GetParentRef="GetRef"
                            StartIndex="5"
                            OnFinalEnter="HandleSave" />
        }
    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" Info="(ALT + S)" />
        <T_Button Text="Clear" OnClick="HandleClear" Info="(ALT + C)" />
        <T_Button Text="View" OnClick="HandleView" Info="(ALT + V)" />
        <T_Button Text="Print" OnClick="HandlePrint" Info="(ALT + P)" />
    </CardFooterContent>
</T_Frm>

@code {
    // =================================================================================
    // REFERENCES & STATE
    // =================================================================================

    #region References and State
    // UI & JS Interop
    private T_Msg Msg;
    private T_Input firstReference;
    private DotNetObjectReference<LedgerMaster> dotNetRef;

    // Child Component References
    private CustomerMaster customerMasterRef;
    private SupplierMaster supplierMasterRef;

    // Data Models
    private Model ledgerModel = new Model("LedgerMaster", "LedgerCode");
    private Model customerModel = new Model("CustomerMaster", "CustomerCode");
    private Model supplierModel = new Model("SupplierMaster", "SupplierCode");
    private ClsDatabase db = new ClsDatabase();

    // State Flags
    private bool isViewing = false;
    private bool isEditing = false;
    private bool showCustomerFields = false;
    private bool showSupplierFields = false;

    // Focus Management
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();
    #endregion

    // =================================================================================
    // LIFECYCLE & FOCUS MANAGEMENT
    // =================================================================================

    #region Lifecycle and Focus
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (firstReference?.reference.Id != null) await firstReference.Focus();
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    public void getInputReferences(int position, ElementReference eref)
    {
        references[position] = eref;
    }

    private ElementReference GetRef(int idx)
    {
        return references.ContainsKey(idx) ? references[idx] : default;
    }
    #endregion

    // =================================================================================
    // CRUD & FORM ACTIONS
    // =================================================================================

    #region CRUD and Form Actions
    [JSInvokable]
    public async Task HandleSave()
    {
        if (!await ValidateForm()) return;

        try
        {
            var transaction = new Transaction();
            
            // Link the customer/supplier record to the ledger being created/updated
            if (showCustomerFields) customerModel.dict["LedgerCode"] = ledgerModel.dict["LedgerCode"];
            if (showSupplierFields) supplierModel.dict["LedgerCode"] = ledgerModel.dict["LedgerCode"];
            
            // Add operations to transaction
            if (isEditing)
            {
                ledgerModel.Update(transaction);
                if (showCustomerFields) customerMasterRef?.UpdateCustomer(transaction);
                if (showSupplierFields) supplierMasterRef?.UpdateSupplier(transaction);
            }
            else
            {
                ledgerModel.Save(transaction);
                if (showCustomerFields) customerMasterRef?.SaveCustomer(transaction);
                if (showSupplierFields) supplierMasterRef?.SaveSupplier(transaction);
            }

            if (transaction.Execute())
            {
                await Msg.Success("Ledger saved successfully!");
                await HandleClear();
            }
            else
            {
                throw new Exception("Transaction failed to execute.");
            }
        }
        catch (Exception ex)
        {
            await Msg.Error($"Save failed: {ex.Message}");
        }
    }

    [JSInvokable]
    public Task HandleClear()
    {
        ledgerModel.Clear();
        customerModel.Clear();
        supplierModel.Clear();
        isEditing = false;
        showCustomerFields = false;
        showSupplierFields = false;
        references.Clear();
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    [JSInvokable]
    public void HandlePrint() { /* TODO: Implement printing */ }

    public async Task HandleEdit(DataRow row)
    {
        await HandleClear();
        isEditing = true;
        isViewing = false;

        ledgerModel.PopulateViaKey(row["LedgerCode"]);
        await OnGroupCodeChanged(ledgerModel.dict["GroupCode"]);

        if (showCustomerFields && customerMasterRef != null)
        {
            var customerDt = db.GetDataTable($"SELECT * FROM CustomerMaster WHERE LedgerCode = '{ledgerModel.dict["LedgerCode"]}'");
            if (customerDt.Rows.Count > 0) customerMasterRef.PopulateCustomer(customerDt.Rows[0]);
        }
        if (showSupplierFields && supplierMasterRef != null)
        {
            var supplierDt = db.GetDataTable($"SELECT * FROM SupplierMaster WHERE LedgerCode = '{ledgerModel.dict["LedgerCode"]}'");
            if (supplierDt.Rows.Count > 0) supplierMasterRef.PopulateSupplier(supplierDt.Rows[0]);
        }

        StateHasChanged();
    }

    public void HandleClose()
    {
        isViewing = false;
        StateHasChanged();
    }
    #endregion

    // =================================================================================
    // LOGIC & VALIDATION
    // =================================================================================

    public async Task OnGroupCodeChanged(string code)
    {
        string groupName = db.GetScalar($"SELECT GroupName FROM GroupMaster WHERE GroupCode = '{code}'")?.ToString() ?? "";
        ledgerModel.dict["GroupCode"] = code;

        showCustomerFields = groupName.Equals("SUNDRY DEBTORS", StringComparison.OrdinalIgnoreCase);
        showSupplierFields = groupName.Equals("SUNDRY CREDITORS", StringComparison.OrdinalIgnoreCase);

        // Allow the UI to render the child component before trying to focus it
        await Task.Delay(1); 
        StateHasChanged();
    }

    private async Task<bool> ValidateForm()
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(ledgerModel.dict["LedgerName"]))
            errors.Add("Ledger Name is required");
        if (string.IsNullOrWhiteSpace(ledgerModel.dict["GroupCode"]) || ledgerModel.dict["GroupCode"] == "0")
            errors.Add("Group is required");

        if (showCustomerFields && customerMasterRef != null) errors.AddRange(customerMasterRef.ValidateCustomer());
        if (showSupplierFields && supplierMasterRef != null) errors.AddRange(supplierMasterRef.ValidateSupplier());

        if (errors.Any())
        {
            Msg.Show(string.Join(", ", errors), "danger", "bi-exclamation-triangle");
            return false;
        }
        return true;
    }


    public void Dispose() => dotNetRef?.Dispose();
}
