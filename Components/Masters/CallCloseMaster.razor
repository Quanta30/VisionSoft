@page "/callclosemaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer

<T_Msg @ref="Msg" />

@if (isViewing)
{
    <FrmView TableName="CallCloseMaster"
             PrimaryKeyColumn="EntryNo"
             OnClosed="HandleClose"
             EditClicked="HandleEdit" 
             InitialFilters="EntryNo"/>
}

<T_Frm FormName="Call Close Master">
    <ChildContent>
        <T_Row>
            <T_Input Title="Entry No *" ReadOnly="true"
                     @bind-Value="@model.dict["EntryNo"]"
                     ColSize="col-md-3" />

            <T_Input Title="Entry Date" Type="date"
                     @bind-Value="@model.dict["EntryDate"]"
                     ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(0, eref))"
                     NextReference="@(GetRef(1))"
                     @ref="firstReference" />

      
                <T_Select @bind-Value="@model.dict["ModeOfPay"]"
                          Layout="1"
                          Label="Mode Of Pay"
                          Options="CREDIT:Credit,CASH:Cash"
                          GetInputReference="@((eref) => getInputReferences(1, eref))"
                          NextReference="@(GetRef(2))" />
         

            <T_Checkbox Title="Consider In Accounts"
                        @bind-Value="@model.dict["ConsiderInAccounts"]"
                        ColSize="col-md-3"
                        GetInputReference="@((eref) => getInputReferences(2, eref))"
                        NextReference="@(GetRef(3))" />
        </T_Row>
        <T_Row>
            <T_RInput Title="Token ID *"
                      @bind-Value="@model.dict["TokenID"]"
                      ColSize="col-md-4"
                      TableName="TokenMaster"
                      PrimaryColumn="TokenID"
                      DisplayColumn="TokenID"
                      GetInputReference="@((eref) => getInputReferences(3, eref))"
                      NextReference="@(GetRef(4))" />

            <T_Input Title="Completion Date" Type="date"
                     @bind-Value="@model.dict["CompletionDate"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(4, eref))"
                     NextReference="@(GetRef(5))" />

            <T_Input Title="Completion Time" Type="time"
                     @bind-Value="@model.dict["CompletionTime"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(5, eref))"
                     NextReference="@(GetRef(6))" />
        </T_Row>
        <T_Row>
            <T_Input Title="Amount *" Type="number" Step="0.01"
                     @bind-Value="@model.dict["Amount"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(6, eref))"
                     NextReference="@(GetRef(7))" />

            <T_Input Title="Discount" Type="number" Step="0.01"
                     @bind-Value="@model.dict["Discount"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(7, eref))"
                     NextReference="@(GetRef(8))" />

            <T_Input Title="Net Amount *" Type="number" Step="0.01"
                     @bind-Value="@model.dict["NetAmount"]"
                     ColSize="col-md-4"
                     GetInputReference="@((eref) => getInputReferences(8, eref))"
                     NextReference="@(GetRef(9))" />
        </T_Row>
        <T_Row>
            <T_Input Title="Narration"
                     @bind-Value="@model.dict["Narration"]"
                     MaxLength="500" ColSize="col-md-6"
                     GetInputReference="@((eref) => getInputReferences(9, eref))"
                     NextReference="@(GetRef(10))" />

            <T_Input Title="Closed By"
                     @bind-Value="@model.dict["ClosedBy"]"
                     MaxLength="50" ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(10, eref))"
                     NextReference="@(GetRef(11))" />

            <T_Checkbox Title="Cancelled"
                        @bind-Value="@model.dict["Cancelled"]"
                        ColSize="col-md-3"
                        GetInputReference="@((eref) => getInputReferences(11, eref))"
                        />
        </T_Row>
    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" Info="(ALT + S)" />
        <T_Button Text="Clear" OnClick="HandleClear" Info="(ALT + C)" />
        <T_Button Text="View" OnClick="HandleView" Info="(ALT + V)" />
        <T_Button Text="Print" OnClick="HandlePrint" Info="(ALT + P)" />
    </CardFooterContent>
</T_Frm>

@code {
    // =================================================================================
    // REFERENCES & STATE
    // =================================================================================

    #region References and State
    // UI & JS Interop
    private T_Msg Msg;
    private T_Input firstReference;
    private DotNetObjectReference<CallCloseMaster> dotNetRef;

    // Data Models
    private Model model = new Model("CallCloseMaster", "EntryNo", "A");

    // State Flags
    private bool isViewing = false;
    private bool isEditing = false;

    // Focus Management
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();
    #endregion

    // =================================================================================
    // LIFECYCLE METHODS
    // =================================================================================

    #region Lifecycle Methods
    protected override void OnInitialized()
    {
        // Set default values for a new record
        if (string.IsNullOrEmpty(model.dict["EntryDate"]))
            model.dict["EntryDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        if (string.IsNullOrEmpty(model.dict["ModeOfPay"]))
            model.dict["ModeOfPay"] = "CASH";
        if (string.IsNullOrEmpty(model.dict["ConsiderInAccounts"]))
            model.dict["ConsiderInAccounts"] = "1";
        if (string.IsNullOrEmpty(model.dict["Cancelled"]))
            model.dict["Cancelled"] = "0";
        if (string.IsNullOrEmpty(model.dict["Amount"]))
            model.dict["Amount"] = "0.00";
        if (string.IsNullOrEmpty(model.dict["Discount"]))
            model.dict["Discount"] = "0.00";
        if (string.IsNullOrEmpty(model.dict["NetAmount"]))
            model.dict["NetAmount"] = "0.00";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set initial focus to the first editable field.
            if (firstReference?.reference.Id != null)
            {
                await firstReference.Focus();
            }

            // Setup JS interop for hotkeys.
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }
    #endregion

    // =================================================================================
    // FOCUS MANAGEMENT
    // =================================================================================

    #region Focus Management
    public void getInputReferences(int position, ElementReference eref)
    {
        references[position] = eref;
    }

    private ElementReference GetRef(int idx)
    {
        return references.ContainsKey(idx) ? references[idx] : default;
    }
    #endregion

    // =================================================================================
    // CRUD & FORM ACTIONS
    // =================================================================================

    #region CRUD and Form Actions
    [JSInvokable]
    public async Task HandleSave()
    {
        if (!ValidateForm()) return;

        try
        {
            var transaction = new Transaction();
            if (isEditing)
            {
                model.Update(transaction);
            }
            else
            {
                model.Save(transaction);
            }

            if (transaction.Execute())
            {
                await Msg.Success("Call Close record saved successfully!");
                await HandleClear();
            }
            else
            {
                throw new Exception("Transaction failed to execute.");
            }
        }
        catch (Exception ex)
        {
            await Msg.Error($"Save failed: {ex.Message}");
        }
    }

    [JSInvokable]
    public Task HandleClear()
    {
        model.Clear();
        isEditing = false;
        OnInitialized(); // Re-apply default values
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public void HandlePrint()
    {
        // TODO: Implement printing logic if needed.
        Console.WriteLine("Print Call Close Master");
    }

    public async Task HandleEdit(DataRow row)
    {
        await HandleClear();
        isEditing = true;
        isViewing = false;
        model.Populate(row);
        StateHasChanged();
        if (firstReference?.reference.Id != null)
        {
            await firstReference.Focus();
        }
    }

    public void HandleClose()
    {
        isViewing = false;
        StateHasChanged();
    }
    #endregion

    // =================================================================================
    // VALIDATION
    // =================================================================================

    private bool ValidateForm()
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(model.dict["ModeOfPay"]))
            errors.Add("Mode of Pay is required");
        if (string.IsNullOrWhiteSpace(model.dict["TokenID"]) || model.dict["TokenID"] == "0")
            errors.Add("Token ID is required");
        @* if (!decimal.TryParse(model.dict["Amount"], out var amount) || amount <= 0)
            errors.Add("Amount must be a positive number");
        if (!decimal.TryParse(model.dict["NetAmount"], out var netAmount) || netAmount <= 0)
            errors.Add("Net Amount must be a positive number"); *@

        if (errors.Any())
        {
            var message = string.Join(", ", errors);
            Msg.Show(message, "danger", "bi-exclamation-triangle");
            return false;
        }

        return true;
    }

    // =================================================================================
    // CLEANUP
    // =================================================================================

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
