@page "/smstemplatemaster"
@inject IJSRuntime JS
@using System.Data
@rendermode InteractiveServer

<T_Msg @ref="Msg" />
@if (isViewing)
{
    <FrmView TableName="SMSTemplateMaster" OnClosed="HandleClose" EditClicked="HandleEdit"/>
}

<T_Frm FormName="SMS Template Master">
    <ChildContent>
        <T_Row>
            <T_Input Title="SMS Template Code *" ReadOnly="true" @bind-Value="@model.dict["SMSTemplateCode"]" ColSize="col-md-2" />
            <T_Input Title="SMS Template Name *" @bind-Value="@model.dict["SMSTemplateName"]" MaxLength="50" ColSize="col-md-4" />
        </T_Row>
        <T_Row>
            <T_Input Title="SMS Template Message *" @bind-Value="@model.dict["SMSTemplateMessage"]" MaxLength="500" ColSize="col-md-12" />
        </T_Row>
    </ChildContent>

    <CardFooterContent>
        <T_Button Text="Save" btnType="Save" OnClick="HandleSave" Style=""/>
        <T_Button Text="Clear" btnType="Clear" OnClick="HandleClear" Style=""/>
        <T_Button Text="View" btnType="View" OnClick="HandleView" Style=""/>
    </CardFooterContent>
</T_Frm>

@code {
    private T_Msg Msg;
    public DotNetObjectReference<SMSTemplateMaster> dotNetRef;

    Model model = new Model("SMSTemplateMaster", "SMSTemplateCode");
    private bool isViewing = false;
    private bool isEditing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task HandleSave()
    {
        try
        {
            if (!ValidateForm()) return;

            bool success = isEditing
                ? model.Update()
                : model.Save();

            if (success)
            {
                await Msg.Success();

                if (!isEditing)
                {
                    HandleClear();
                }

                isEditing = false;
            }
            else
            {
                await Msg.SaveError();
            }
        }
        catch (Exception ex)
        {
            await Msg.SaveError();
            Console.WriteLine($"Error saving SMS Template Master record: {ex.Message}");
        }
        HandleClear();
    }

    [JSInvokable]
    public void HandleClear()
    {
        model.Clear();
        isEditing = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
    }

    public async Task HandleEdit(DataRow row)
    {
        try
        {
            isEditing = true;
            isViewing = false;
            model.Populate(row);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading SMS Template Master record: {ex.Message}");
        }
    }

    public void HandleClose()
    {
        isViewing = false;
        StateHasChanged();
    }

    private bool ValidateForm()
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(model.dict["SMSTemplateName"])) 
            errors.Add("SMS Template Name is required");
        if (string.IsNullOrWhiteSpace(model.dict["SMSTemplateMessage"])) 
            errors.Add("SMS Template Message is required");

        if (errors.Any())
        {
            var message = string.Join(", ", errors);
            Msg.Show(message, "danger", "bi-exclamation-triangle");
            return false;
        }

        return true;
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}