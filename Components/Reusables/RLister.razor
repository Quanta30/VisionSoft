@using System.Data
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

<div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="OpenFrmViewHelper" @onclick:stopPropagation="true">
            Add
        </button>
    </div>

    <div>
        @if (SelectedRows.Count == 0)
        {
            <div class="alert alert-info">No entries added yet.</div>
        }
        else
        {
            <div class="border overflow-auto" style="overflow: auto; max-height: 400px; max-width: 90vw; overflow-x: auto; overflow-y: auto;">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light sticky-top">
                            <tr>
                                <th style="min-width: 120px;">Actions</th>
                                @foreach (DataColumn col in SelectedRows[0].Table.Columns)
                                {
                                    @if (col.ColumnName != "CreationDate" && col.ColumnName != "userEmail")
                                    {
                                        <th style="min-width: 150px;">@col.ColumnName</th>
                                    }
                                }
                                <th style="min-width: 100px;">Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < SelectedRows.Count; i++)
                            {
                                var index = i; // Capture for closure
                                var row = SelectedRows[index];
                                <tr>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => RemoveRow(index)" 
                                                @onclick:stopPropagation="true">
                                            <i class="bi bi-trash"></i>Remove
                                        </button>
                                    </td>
                                    @foreach (DataColumn col in row.Table.Columns)
                                    {
                                        @if (col.ColumnName != "CreationDate" && col.ColumnName != "userEmail" && col.ColumnName != "Quantity")
                                        {
                                            <td>
                                                <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" 
                                                    title="@row[col]">
                                                    @row[col]
                                                </div>
                                            </td>
                                        }
                                        @if(col.ColumnName == "Quantity"){
                                            <td>
                                                <div class="input-group input-group-sm" style="width: 120px;">
                                                    <input type="number" class="form-control form-control-sm text-center" 
                                                        value="@GetQuantity(row)" 
                                                        min="1" max="999"
                                                        @onchange='(e) => UpdateQuantity(index, e.Value?.ToString() ?? "1")'
                                                        @onclick:stopPropagation="true" />
                                                </div>
                                            </td>
                                        }
                                    }
                                    
                                    <td class="text-end">
                                        <span class="badge bg-info fs-6">@GetAmount(row).ToString("F2")</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>

    <FrmViewHelper TableData="@TableData" 
                   OnSelectClicked="HandleRowSelected" 
                   OnClosed="HandleModalClosed"
                   Display="@isFrmViewHelperVisible" />
</div>

@code {
    private DataTable? TableData;
    public List<DataRow> SelectedRows = new();
    private bool isFrmViewHelperVisible = false;
    private bool isProcessing = false; // Prevent multiple modal operations

    [Parameter] public EventCallback<List<DataRow>> SelectedRowsChanged {get; set;}
    [Parameter] public string TableName { get; set; } = string.Empty;
    [Parameter] public EventCallback<List<DataRow>> OnRowsUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(TableName))
        {
            await LoadTableData();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        StateHasChanged();
    }

    private async Task LoadTableData()
    {
        try
        {
            ClsDatabase db = new ClsDatabase();
            string query = $"SELECT * FROM {TableName}";
            TableData = db.GetDataTable(query);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading table data: {ex.Message}");
        }
    }

    private async Task OpenFrmViewHelper()
    {
        if (isProcessing) return; // Prevent multiple opens
        
        Console.WriteLine("Opening FrmViewHelper modal");
        isProcessing = true;
        isFrmViewHelperVisible = true;
        StateHasChanged();
        
        await Task.Delay(100); // Allow UI to update
        isProcessing = false;
    }

    private async Task HandleModalClosed()
    {
        Console.WriteLine("Modal closed - resetting state");
        isFrmViewHelperVisible = false;
        isProcessing = false;
        StateHasChanged();
    }

    private async Task HandleRowSelected(DataRow selectedRow)
    {
        Console.WriteLine("Row selected - processing...");
        
        // Add Quantity column if it doesn't exist
        if (!selectedRow.Table.Columns.Contains("Quantity"))
        {
            selectedRow.Table.Columns.Add("Quantity", typeof(int));
            selectedRow.Table.Columns["Quantity"].SetOrdinal(0);
        }

        // Create a copy of the row with Quantity initialized
        var newRow = selectedRow.Table.NewRow();
        foreach (DataColumn col in selectedRow.Table.Columns)
        {
            if (selectedRow.Table.Columns.Contains(col.ColumnName) && col.ColumnName != "Quantity")
            {
                newRow[col.ColumnName] = selectedRow[col.ColumnName];
            }
        }
        newRow["Quantity"] = 1; // Default quantity

        SelectedRows.Add(newRow);
        
        // Close modal properly
        isFrmViewHelperVisible = false;
        isProcessing = false;
        
        Console.WriteLine($"Added row. Total rows: {SelectedRows.Count}");
        
        await NotifyParentOfChanges();
    }

    private async Task RemoveRow(int index)
    {
        if (index >= 0 && index < SelectedRows.Count)
        {
            Console.WriteLine($"Removing row at index {index}");
            SelectedRows.RemoveAt(index);
            await NotifyParentOfChanges();
        }
    }

    private int GetQuantity(DataRow row)
    {
        if (row.Table.Columns.Contains("Quantity") && row["Quantity"] != DBNull.Value)
        {
            return Convert.ToInt32(row["Quantity"]);
        }
        return 1; // Default quantity
    }

    private decimal GetAmount(DataRow row)
    {
        try
        {
            var quantity = GetQuantity(row);
            var mrp = 0m;

            // Try to get MRP from different possible column names
            if (row.Table.Columns.Contains("MRP") && row["MRP"] != DBNull.Value)
            {
                mrp = Convert.ToDecimal(row["MRP"]);
            }
            else if (row.Table.Columns.Contains("Price") && row["Price"] != DBNull.Value)
            {
                mrp = Convert.ToDecimal(row["Price"]);
            }
            else if (row.Table.Columns.Contains("Rate") && row["Rate"] != DBNull.Value)
            {
                mrp = Convert.ToDecimal(row["Rate"]);
            }

            return quantity * mrp;
        }
        catch (Exception)
        {
            return 0m;
        }
    }

    private async Task UpdateQuantity(int index, string quantityStr)
    {
        if (index >= 0 && index < SelectedRows.Count)
        {
            if (int.TryParse(quantityStr, out int quantity) && quantity > 0)
            {
                var row = SelectedRows[index];
                
                // Ensure Quantity column exists
                if (!row.Table.Columns.Contains("Quantity"))
                {
                    row.Table.Columns.Add("Quantity", typeof(int));
                }
                
                row["Quantity"] = Math.Max(1, Math.Min(999, quantity)); // Clamp between 1 and 999
                await NotifyParentOfChanges();
            }
        }
    }

    private async Task NotifyParentOfChanges()
    {
        await SelectedRowsChanged.InvokeAsync(SelectedRows);
        await OnRowsUpdated.InvokeAsync(SelectedRows);
        StateHasChanged();
    }
}