@using System.Data
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer


    <!-- Modal Backdrop -->
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center" 
         style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        
        <!-- Modal Container with proper sizing -->
        <div class="position-relative" 
             style="width: calc(100vw - 4rem); height: calc(100vh - 4rem); min-width: 800px; min-height: 600px; max-width: 1400px; max-height: 900px;"
             @onclick="CloseModal">
            
            <!-- Modal Content -->
            <div class="card border shadow-lg w-100 h-100" 
                 @onclick:stopPropagation="true">
                
                <!-- Modal Header -->
                <div class="card-header bg-light border-bottom text-dark">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0 fw-semibold">
                                @TableName Data Management
                            </h5>
                            @if (TableData != null && TableData.Rows.Count > 0)
                            {
                                <small class="opacity-75">@TableData.Rows.Count records available</small>
                            }
                        </div>
                        <div class="col-auto">
                            <button type="button" 
                                    class="btn btn-outline-danger btn-sm fw-semibold" 
                                    aria-label="Close" 
                                    @onclick="CloseModal"
                                    @onclick:stopPropagation="true"
                                    @onclick:preventDefault="true">
                                <i class="bi bi-x-circle me-1"></i>
                                CLOSE
                            </button>
                        </div>
                    </div>
                </div>


                
                <!-- Modal Body -->
                <div class="card-body bg-white p-0 d-flex flex-column" style="height: calc(100% - 140px);">
                    @if (TableData is null || TableData.Rows.Count == 0)
                    {
                        <div class="d-flex align-items-center justify-content-center h-100">
                            <div class="text-center">
                                <div class="mb-4">
                                    <i class="bi bi-inbox display-1 text-muted"></i>
                                </div>
                                <h4 class="text-muted fw-light">No data available</h4>
                                <p class="text-muted">Please check your data source and try again</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive flex-grow-1">
                            <table class="table table-hover mb-0">
                                <thead class="table-light sticky-top">
                                    <tr>
                                        <th class="text-center fw-semibold" style="width: 150px;">
                                            <i class="bi bi-gear me-1 text-primary"></i>
                                            Actions
                                        </th>
                                        @foreach (DataColumn col in TableData.Columns)
                                        {
                                            @if (col.ColumnName != "CreationDate" && col.ColumnName != "userEmail")
                                            {
                                                <th class="fw-semibold text-dark">@col.ColumnName</th>
                                            }
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DataRow row in TableData.Rows)
                                    {
                                        <tr class="border-bottom">
                                            <td class="text-center align-middle py-3">
                                                <div class="d-flex justify-content-center gap-1">
                                                    <button type="button" 
                                                            class="btn btn-outline-primary btn-sm fw-semibold" 
                                                            @onclick="() => EditRow(row)"
                                                            @onclick:stopPropagation="true"
                                                            @onclick:preventDefault="true"
                                                            title="Edit Record">
                                                        <i class="bi bi-pencil"></i>Edit
                                                    </button>
                                                    <button type="button" 
                                                            class="btn btn-outline-danger btn-sm fw-semibold" 
                                                            @onclick="() => DeleteRow(row)"
                                                            @onclick:stopPropagation="true"
                                                            @onclick:preventDefault="true"
                                                            title="Delete Record">
                                                        <i class="bi bi-trash"></i>Delete
                                                    </button>
                                                </div>
                                            </td>
                                            @foreach (DataColumn col in TableData.Columns)
                                            {
                                                @if (col.ColumnName != "CreationDate" && col.ColumnName != "userEmail")
                                                {
                                                    <td class="align-middle py-3">
                                                        <span class="text-dark">@row[col]</span>
                                                    </td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                
                <!-- Modal Footer -->
                <div class="card-footer bg-light border-top">
                    <div class="row align-items-center">
                        <div class="col">
                            @if (TableData != null && TableData.Rows.Count > 0)
                            {
                                <span class="text-muted small">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Use the edit and delete buttons to manage your records
                                </span>
                            }
                        </div>
                        <div class="col-auto">
                            @if (!string.IsNullOrEmpty(message))
                            {
                                <span class="badge @(alertClass.Contains("success") ? "bg-success" : "bg-danger")">
                                    @message
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


@code {
    [Parameter] public string TableName { get; set; } = string.Empty;
    [Parameter] public DataTable? TableData { get; set; }
    [Parameter] public bool Display { get; set; } = false;
    [Parameter] public EventCallback<string> OnClose { get; set; }
    [Parameter] public EventCallback<DataRow> EditClicked{get; set;}


    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;


    private string message = "";
    private string alertClass = "";
    ClsDatabase db = new ClsDatabase();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(TableName) && TableData == null)
        {
            string query = $"SELECT COUNT(*) FROM {TableName}";
            DataTable dataTable = db.GetDataTable(query);
            totalRecords = Convert.ToInt32(dataTable.Rows[0][0]);
            totalPages = totalRecords / pageSize;
            await LoadData();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Display && !string.IsNullOrEmpty(TableName) && TableData == null)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {   
        int offset = (currentPage-1)*pageSize;
        try
        {
            string query = $@"SELECT * FROM {TableName} 
                  ORDER BY (SELECT NULL) 
                  OFFSET {offset} ROWS 
                  FETCH NEXT {pageSize} ROWS ONLY";
            TableData = db.GetDataTable(query);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading data: {ex.Message}", "alert-danger");
        }
    }

    private async Task CloseModal()
    {
        Display = false;
        message = "";
        alertClass = "";
        
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync("modal_closed");
        }
        
        StateHasChanged();
    }

    private void EditRow(DataRow row)
    {
        var primaryKey = row[0];
        ShowMessage($"Edit functionality for ID: {primaryKey}", "alert-info");
        EditClicked.InvokeAsync(row);
        
        // TODO: Implement edit functionality
        // You can add an edit modal or navigate to edit page
    }

    private async Task DeleteRow(DataRow row)
    {
        try
        {
            var primaryKey = row[0];
            var primaryKeyColumn = TableData.Columns[0].ColumnName;
            
            string deleteQuery = $"DELETE FROM {TableName} WHERE {primaryKeyColumn} = {primaryKey}";
            bool success = db.ExecuteQuery(deleteQuery);
            
            if (success)
            {
                TableData.Rows.Remove(row);
                ShowMessage("Record deleted successfully!", "alert-success");
                StateHasChanged();
                
                // Auto-hide message after 3 seconds
                await Task.Delay(3000);
                message = "";
                StateHasChanged();
            }
            else
            {
                ShowMessage("Error deleting record.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error: {ex.Message}", "alert-danger");
        }
    }

    private void ShowMessage(string msg, string type)
    {
        message = msg;
        alertClass = type;
        StateHasChanged();
    }
}