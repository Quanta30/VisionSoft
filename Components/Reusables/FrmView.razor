@using System.Data
@using VisionSoft.Components.Reusables
@implements IDisposable

@if (Display)
{
    <!-- Modal Backdrop -->
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex 
                align-items-center justify-content-center" 
         style="background-color: rgba(0,0,0,0.5); z-index:1050;">
        
        <!-- Modal Container -->
        <div class="position-relative" 
             style="width:calc(100vw-4rem);height:calc(100vh-4rem);
                    min-width:800px;min-height:600px;max-width:1400px;max-height:900px;"
             @onclick="CloseModal">
            
            <!-- Card -->
            <div class="card w-100 h-100 shadow-lg" 
                 @onclick:stopPropagation="true">
                
                <!-- Header -->
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Select @TableName</h5>
                        <Button btnType="Danger" Text="Close" 
                                OnClick="CloseModal" DelayTime="0" />
                    </div>
                    
                    <!-- Search Bar -->
                    <div class="mt-3">
                        <div class="input-group">
                            <input type="text" class="form-control" 
                                   placeholder="Search @TableName..." 
                                   @bind="searchText" @oninput="OnSearchInput" />
                            <Button btnType="Secondary" Text="X" 
                                    OnClick="ClearSearch" DelayTime="0" />
                        </div>
                    </div>
                </div>
                
                <!-- Body -->
                <div class="card-body p-0 overflow-auto">
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="spinner-border text-primary" role="status"></div>
                        </div>
                    }
                    else
                    {
                        <TableViewer dataTable="TableData" PrimaryKey="@PrimaryKeyColumn">
                            <NewColumnHeader>
                                <th class="text-center">Actions</th>
                            </NewColumnHeader>
                            <NewColumnValue>
                                @for(int i = 0; i<TableData.Rows.Count; i++){
                                    <td class="text-center">
                                        <Button btnType="Blue" Text="Edit" 
                                                OnClick="() => EditRow(i)" DelayTime="0" />
                                        <Button btnType="Danger" Text="Delete" 
                                                OnClick="() => DeleteRow(i)" DelayTime="0" />
                                    </td>
                                }
                            </NewColumnValue>
                        </TableViewer>
                    }
                </div>
                
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string TableName { get; set; } = "";
    [Parameter] public bool Display { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<DataRow> EditClicked { get; set; }

    private ClsDatabase db = new();
    private DataTable TableData = new();
    private List<string> Columns = new();
    private string PrimaryKeyColumn = "";
    private bool IsLoading;
    private string searchText = "";

    protected override async Task OnParametersSetAsync()
    {
        if (Display)
            await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();

        // initialize columns once
        if (Columns.Count == 0)
        {
            var dtCols = db.GetDataTable($@"
                SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_NAME = '{TableName}' 
                ORDER BY ORDINAL_POSITION");
            Columns = dtCols.Rows
                        .Cast<DataRow>()
                        .Select(r => r["COLUMN_NAME"].ToString()!)
                        .ToList();
            // assume first column is primary key
            PrimaryKeyColumn = Columns.First();
        }

        // build WHERE with SQL LIKE over all columns
        string where = "";
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            var pattern = $"%{searchText.Replace("'", "''")}%";
            where = "WHERE " + string.Join(" OR ",
                Columns.Select(c => $"CAST({c} AS NVARCHAR(MAX)) LIKE '{pattern}'"));
        }

        // fetch data
        TableData = db.GetDataTable($@"
            SELECT * FROM {TableName} 
            {where} 
            ORDER BY (SELECT NULL)");

        IsLoading = false;
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        await LoadData();
    }

    private async Task ClearSearch()
    {
        searchText = "";
        await LoadData();
    }

    private async Task CloseModal()
    {
        Display = false;
        await OnClose.InvokeAsync();
    }

    private void EditRow(int key)
    {
        EditClicked.InvokeAsync(TableData.Rows[key]);
    }

    private async Task DeleteRow(int key)
    {
        var pkey = TableData.Rows[key][PrimaryKeyColumn]?.ToString();
        if (!string.IsNullOrEmpty(key))
        {
            db.ExecuteQuery($@"DELETE FROM {TableName} 
                                WHERE {PrimaryKeyColumn} = {key}");
            await LoadData();
        }
    }

    public void Dispose() { }
}