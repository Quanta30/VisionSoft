@using System.Data
@using Microsoft.AspNetCore.Components
@using System.Text.RegularExpressions
@implements IDisposable

@if (Display)
{
    <!-- Modal Backdrop -->
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center" 
         style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        
        <!-- Modal Container with proper sizing -->
        <div class="position-relative" 
             style="width: calc(100vw - 4rem); height: calc(100vh - 4rem); min-width: 800px; min-height: 600px; max-width: 1400px; max-height: 900px;"
             @onclick="CloseModal">
            
            <!-- Modal Content -->
            <div class="card border shadow-lg w-100 h-100" 
                 @onclick:stopPropagation="true">
                
                <!-- Modal Header -->
                <div class="card-header bg-light border-bottom text-dark">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0 fw-semibold">
                                Select Item
                            </h5>
                            @if (filteredData != null && filteredData.Rows.Count > 0)
                            {
                                <small class="opacity-75">@totalRecords total items, showing @filteredData.Rows.Count</small>
                            }
                        </div>
                        <div class="col-auto">
                            <button type="button" 
                                    class="btn btn-outline-danger btn-sm fw-semibold" 
                                    aria-label="Close" 
                                    @onclick="CloseModal"
                                    @onclick:stopPropagation="true"
                                    @onclick:preventDefault="true">
                                <i class="bi bi-x-circle me-1"></i>
                                CLOSE
                            </button>
                        </div>
                    </div>
                    
                    <!-- Search Bar and Pagination Controls -->
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input type="text" 
                                       class="form-control @(!isValidRegex ? "is-invalid" : "")" 
                                       placeholder="Search items..." 
                                       @bind="searchText" 
                                       @oninput="OnSearchInput"
                                       @onclick:stopPropagation="true" />
                            
                                    <button class="btn btn-outline-secondary" 
                                            type="button" 
                                            @onclick="ClearSearch"
                                            @onclick:stopPropagation="true">
                                        <i class="bi bi-x">X</i>
                                    </button>
                              
                            </div>
                            
                            <!-- Regex validation feedback -->
                            @if (!isValidRegex && !string.IsNullOrEmpty(regexError))
                            {
                                <div class="invalid-feedback d-block">
                                    <small>Invalid regex: @regexError</small>
                                </div>
                            }
                            
                            <!-- Search examples -->
                            
                        </div>
                        <div class="col-md-6 text-end">
                            <!-- Pagination Controls -->
                            <div class="d-flex justify-content-end align-items-center gap-2">
                                <span class="text-muted small">
                                    Page @currentPage of @totalPages
                                </span>
                                <div class="btn-group" role="group">
                                    <button type="button" 
                                            class="btn btn-outline-primary btn-sm" 
                                            @onclick="PreviousPage" 
                                            disabled="@(currentPage <= 1)"
                                            @onclick:stopPropagation="true">
                                        <i class="bi bi-chevron-left">&lt;</i>
                                    </button>
                                    <span class="btn btn-outline-secondary btn-sm disabled">
                                        @currentPage
                                    </span>
                                    <button type="button" 
                                            class="btn btn-outline-primary btn-sm" 
                                            @onclick="NextPage" 
                                            disabled="@(currentPage >= totalPages)"
                                            @onclick:stopPropagation="true">
                                        <i class="bi bi-chevron-right">&gt;</i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Modal Body -->
                <div class="card-body bg-white p-0 d-flex flex-column" style="height: calc(100% - 200px);">
                    @if (isLoading)
                    {
                        <div class="d-flex align-items-center justify-content-center h-100">
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <h6 class="mt-3 text-muted">Filtering data...</h6>
                            </div>
                        </div>
                    }
                    else if (filteredData is null || filteredData.Rows.Count == 0)
                    {
                        <div class="d-flex align-items-center justify-content-center h-100">
                            <div class="text-center">
                                <div class="mb-4">
                                    <i class="bi bi-inbox display-1 text-muted"></i>
                                </div>
                                <h4 class="text-muted fw-light">
                                    @(string.IsNullOrEmpty(searchText) ? "No data available" : "No matching items found")
                                </h4>
                                <p class="text-muted">
                                    @(string.IsNullOrEmpty(searchText) ? "Please check your data source and try again" : $"No items found for '{searchText}'")
                                </p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive flex-grow-1">
                            <table class="table table-hover mb-0">
                                <thead class="table-light sticky-top">
                                    <tr>
                                        <th class="text-center fw-semibold" style="width: 120px;">
                                            <i class="bi bi-cursor-fill me-1 text-primary"></i>
                                            Actions
                                        </th>
                                        @foreach (DataColumn col in filteredData.Columns)
                                        {
                                            @if (col.ColumnName != "CreationDate" && col.ColumnName != "userEmail")
                                            {
                                                <th class="fw-semibold text-dark">@col.ColumnName</th>
                                            }
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DataRow row in filteredData.Rows)
                                    {
                                        <tr class="border-bottom">
                                            <td class="text-center align-middle py-3">
                                                <button type="button" 
                                                        class="btn btn-outline-primary btn-sm fw-semibold" 
                                                        @onclick="() => HandleSelectClicked(row)"
                                                        @onclick:stopPropagation="true"
                                                        @onclick:preventDefault="true">
                                                    <i class="bi bi-check-circle me-1"></i>
                                                    Select
                                                </button>
                                            </td>
                                            @foreach (DataColumn col in filteredData.Columns)
                                            {
                                                @if (col.ColumnName != "CreationDate" && col.ColumnName != "userEmail")
                                                {
                                                    <td class="align-middle py-3">
                                                        <span class="text-dark">@row[col]</span>
                                                    </td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                
                <!-- Modal Footer -->
                <div class="card-footer bg-light border-top">
                    <div class="row align-items-center">
                        <div class="col">
                            @if (filteredData != null && filteredData.Rows.Count > 0)
                            {
                                <span class="text-muted small">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, totalRecords)) of @totalRecords items
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public DataTable? TableData { get; set; }
    [Parameter] public EventCallback<DataRow> OnSelectClicked { get; set; }
    [Parameter] public bool Display { get; set; } = false;
    [Parameter] public EventCallback OnClosed { get; set; }

    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;

    // Search variables
    private string searchText = "";
    private Timer? searchTimer;
    private bool isLoading = false;
    private bool isValidRegex = true;
    private string regexError = "";

    // Filtered data for display
    private DataTable? filteredData;

    protected override async Task OnParametersSetAsync()
    {
        if (Display && TableData != null)
        {
            await FilterAndPaginateData();
        }
    }

    private async Task FilterAndPaginateData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await Task.Delay(50); // Small delay to show loading

            if (TableData == null)
            {
                filteredData = null;
                totalRecords = 0;
                totalPages = 0;
                return;
            }

            // Apply search filter
            var searchFilteredData = FilterDataWithRegex(TableData);
            totalRecords = searchFilteredData.Rows.Count;
            totalPages = totalRecords > 0 ? (int)Math.Ceiling((double)totalRecords / pageSize) : 1;

            // Ensure current page is valid
            if (currentPage > totalPages && totalPages > 0)
            {
                currentPage = 1;
            }

            // Apply pagination
            int offset = (currentPage - 1) * pageSize;
            filteredData = ApplyPagination(searchFilteredData, offset, pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering data: {ex.Message}");
            filteredData = TableData?.Clone(); // Empty table with same structure
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private DataTable FilterDataWithRegex(DataTable sourceData)
    {
        if (string.IsNullOrEmpty(searchText) || !isValidRegex)
            return sourceData;

        var filteredData = sourceData.Clone();

        try
        {
            var regex = new Regex(searchText, RegexOptions.IgnoreCase);

            foreach (DataRow row in sourceData.Rows)
            {
                bool matchFound = false;

                foreach (DataColumn column in sourceData.Columns)
                {
                    if (IsTextColumn(column))
                    {
                        string cellValue = row[column]?.ToString() ?? "";
                        if (regex.IsMatch(cellValue))
                        {
                            matchFound = true;
                            break;
                        }
                    }
                }

                if (matchFound)
                {
                    filteredData.ImportRow(row);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Regex filtering error: {ex.Message}");
            regexError = ex.Message;
            isValidRegex = false;
            return sourceData; // Return original data if regex fails
        }

        return filteredData;
    }

    private bool IsTextColumn(DataColumn column)
    {
        var textTypes = new[] { typeof(string), typeof(char) };
        return textTypes.Contains(column.DataType) || column.DataType == typeof(object);
    }

    private DataTable ApplyPagination(DataTable sourceData, int offset, int pageSize)
    {
        var paginatedData = sourceData.Clone();

        var rowsToTake = sourceData.Rows
            .Cast<DataRow>()
            .Skip(offset)
            .Take(pageSize);

        foreach (var row in rowsToTake)
        {
            paginatedData.ImportRow(row);
        }

        return paginatedData;
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";

        // Validate regex
        try
        {
            if (!string.IsNullOrEmpty(searchText))
            {
                var testRegex = new Regex(searchText, RegexOptions.IgnoreCase);
            }
            isValidRegex = true;
            regexError = "";
        }
        catch (Exception ex)
        {
            isValidRegex = false;
            regexError = ex.Message;
        }

        // Cancel previous timer
        searchTimer?.Dispose();

        // Start new timer for 300ms delay
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                currentPage = 1; // Reset to first page on search
                await FilterAndPaginateData();
            });
        }, null, 300, Timeout.Infinite);
    }

    private async Task ClearSearch()
    {
        searchText = "";
        isValidRegex = true;
        regexError = "";
        currentPage = 1;
        await FilterAndPaginateData();
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await FilterAndPaginateData();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await FilterAndPaginateData();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages && pageNumber != currentPage)
        {
            currentPage = pageNumber;
            await FilterAndPaginateData();
        }
    }

    private async Task CloseModal()
    {
        try
        {
            Console.WriteLine("CloseModal called");
            Display = false;
            
            // Reset search and pagination when closing
            searchText = "";
            currentPage = 1;
            isValidRegex = true;
            regexError = "";
            
            await OnClosed.InvokeAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CloseModal: {ex.Message}");
        }
    }

    private async Task HandleSelectClicked(DataRow row)
    {
        try
        {
            Console.WriteLine("HandleSelectClicked called");
            await OnSelectClicked.InvokeAsync(row);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleSelectClicked: {ex.Message}");
        }
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}