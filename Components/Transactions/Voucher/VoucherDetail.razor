@using System.Data
@namespace VisionSoft.Components.Transactions.Voucher
@rendermode InteractiveServer

<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style="" />
    </td>
    <td>
        @SerialNo
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="LedgerMaster" PrimaryColumn="LedgerCode" DisplayColumn="LedgerName"
                  Value="@model.dict["LedgerCode"]" ValueChanged="OnLedgerChanged"
                  GetInputReference="@((eref) => getInputReferences(0, eref))"
                  NextReference="@(GetRef(1))"
                  @ref="firstReference" />
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="LedgerMaster" PrimaryColumn="LedgerCode" DisplayColumn="LedgerName"
                  Value="@model.dict["OppositeLedgerCode"]" ValueChanged="OnOppositeLedgerChanged"
                  GetInputReference="@((eref) => getInputReferences(1, eref))"
                  NextReference="@(GetRef(2))" />
    </td>
    <td>
        <div style="width:100px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["DebitAmount"]" Placeholder="0.00"
                     ChangeFunction="OnAmountChanged" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(2, eref))"
                     NextReference="@(GetRef(3))" />
        </div>
    </td>
    <td>
        <div style="width:100px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["CreditAmount"]" Placeholder="0.00"
                     ChangeFunction="OnAmountChanged" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(3, eref))"
                     OnEnterPressed="OnEnterPressed" />
        </div>
    </td>
</tr>

@code {
    // =================================================================================
    // PARAMETERS
    // =================================================================================

    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public string VoucherNo { get; set; }
    [Parameter] public string VoucherType { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public EventCallback OnEnterPressed { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }

    // =================================================================================
    // REFERENCES & STATE
    // =================================================================================

    private Model model = new Model("VoucherDetails", "");
    private ClsDatabase db = new ClsDatabase();

    // Focus Management
    public T_RInput firstReference;
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();

    // =================================================================================
    // LIFECYCLE METHODS
    // =================================================================================

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["DebitAmount"])) model.dict["DebitAmount"] = "0";
        if (string.IsNullOrEmpty(model.dict["CreditAmount"])) model.dict["CreditAmount"] = "0";
    }

    protected override void OnParametersSet()
    {
        model.dict["VoucherNo"] = VoucherNo;
        model.dict["Sequence"] = SerialNo.ToString();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialDataRow != null)
            {
                model.Populate(InitialDataRow);
                InitialDataRow = null; // Prevent re-population
                StateHasChanged();
            }
            if (firstReference?.reference.Id != null)
            {
                await firstReference.Focus();
            }
        }
    }

    // =================================================================================
    // FOCUS MANAGEMENT
    // =================================================================================

    public void getInputReferences(int position, ElementReference eref)
    {
        references[position] = eref;
    }

    private ElementReference GetRef(int idx)
    {
        return references.ContainsKey(idx) ? references[idx] : default;
    }

    // =================================================================================
    // EVENT HANDLERS
    // =================================================================================

    private async Task OnLedgerChanged(string ledgerCode)
    {
        model.dict["LedgerCode"] = ledgerCode;
        ValidateAmounts();
        await OnCalculationChanged.InvokeAsync();
        StateHasChanged();
    }

    private void OnOppositeLedgerChanged(string oppositeLedgerCode)
    {
        model.dict["OppositeLedgerCode"] = oppositeLedgerCode;
        StateHasChanged();
    }

    private async Task OnAmountChanged(string value)
    {
        ValidateAmounts();
        await OnCalculationChanged.InvokeAsync();
        StateHasChanged();
    }

    private void ValidateAmounts()
    {
        if (decimal.TryParse(model.dict["DebitAmount"], out decimal debit) && debit != 0)
        {
            model.dict["CreditAmount"] = "0";
        }
        else if (decimal.TryParse(model.dict["CreditAmount"], out decimal credit) && credit != 0)
        {
            model.dict["DebitAmount"] = "0";
        }
    }

    private async Task HandleRemove()
    {
        await OnRemove.InvokeAsync(SerialNo);
    }

    // =================================================================================
    // PUBLIC API
    // =================================================================================

    public void SaveDetail(Transaction transaction)
    {
        if (string.IsNullOrEmpty(model.dict["LedgerCode"]) || model.dict["LedgerCode"] == "0")
        {
            return; // Do not save rows without a ledger
        }
        model.Save(transaction);
    }

    public decimal GetDebitAmount()
    {
        return decimal.TryParse(model.dict["DebitAmount"], out decimal debit) ? debit : 0;
    }

    public decimal GetCreditAmount()
    {
        return decimal.TryParse(model.dict["CreditAmount"], out decimal credit) ? credit : 0;
    }
}
