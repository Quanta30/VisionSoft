@*  QuotationNo	1	NULL	NO	bigint	NULL
Quotationdate	2	NULL	YES	datetime	NULL
CustomerName	3	('-')	NO	varchar	100
City	4	('-')	NO	varchar	50
Mobileno	5	('-')	NO	varchar	50
TotalAmount	6	((0))	NO	float	NULL
Discount	7	((0))	NO	float	NULL
GstAmount	8	((0))	NO	float	NULL
AddLess	9	((0))	NO	float	NULL
Rounding	10	((0))	NO	float	NULL
NetAmount	11	((0))	NO	float	NULL
Narration	12	('-')	NO	varchar	500
Cancelled	13	((0))	NO	int	NULL  *@

@* QuotationNo	1	((0))	NO	bigint	NULL
SrNo	2	((0))	NO	int	NULL
ProductCode	3	((0))	NO	int	NULL
Rate	4	((0))	NO	float	NULL
Quantity	5	((0))	NO	float	NULL
Discount	6	((0))	NO	float	NULL
Free	7	((0))	NO	float	NULL
GST0APPAMOUNT	8	((0))	NO	float	NULL
SGST0AMOUNT	9	((0))	NO	float	NULL
CGST0AMOUNT	10	((0))	NO	float	NULL
GST5APPAMOUNT	11	((0))	NO	float	NULL
SGST5AMOUNT	12	((0))	NO	float	NULL
CGST5AMOUNT	13	((0))	NO	float	NULL
GST12APPAMOUNT	14	((0))	NO	float	NULL
SGST12AMOUNT	15	((0))	NO	float	NULL
CGST12AMOUNT	16	((0))	NO	float	NULL
GST18APPAMOUNT	17	((0))	NO	float	NULL
SGST18AMOUNT	18	((0))	NO	float	NULL
CGST18AMOUNT	19	((0))	NO	float	NULL
GST28APPAMOUNT	20	((0))	NO	float	NULL
SGST28AMOUNT	21	((0))	NO	float	NULL
CGST28AMOUNT	22	((0))	NO	float	NULL
IGST0APPAMOUNT	23	((0))	NO	float	NULL
IGST0AMOUNT	24	((0))	NO	float	NULL
IGST5APPAMOUNT	25	((0))	NO	float	NULL
IGST5AMOUNT	26	((0))	NO	float	NULL
IGST12APPAMOUNT	27	((0))	NO	float	NULL
IGST12AMOUNT	28	((0))	NO	float	NULL
IGST18APPAMOUNT	29	((0))	NO	float	NULL
IGST18AMOUNT	30	((0))	NO	float	NULL
IGST28APPAMOUNT	31	((0))	NO	float	NULL
IGST28AMOUNT	32	((0))	NO	float	NULL
UTGST0APPAMOUNT	33	((0))	NO	float	NULL
UTGST0AMOUNT	34	((0))	NO	float	NULL
UTGST5APPAMOUNT	35	((0))	NO	float	NULL
UTGST5AMOUNT	36	((0))	NO	float	NULL
UTGST12APPAMOUNT	37	((0))	NO	float	NULL
UTGST12AMOUNT	38	((0))	NO	float	NULL
UTGST18APPAMOUNT	39	((0))	NO	float	NULL
UTGST18AMOUNT	40	((0))	NO	float	NULL
UTGST28APPAMOUNT	41	((0))	NO	float	NULL
UTGST28AMOUNT	42	((0))	NO	float	NULL *@


@page "/quotation"
@inject IJSRuntime JS
@rendermode InteractiveServer
@using System.Data
@using VisionSoft

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="QuotationHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Sales Quotation">
<ChildContent>
    <T_Row>
        <T_Input Title="Quotation No. *" ReadOnly @bind-Value='model.dict["QuotationNo"]' />
        <T_Input Title="Quotation Date" Type="Date" @bind-Value='model.dict["Quotationdate"]' />
        <T_Input Title="Customer Name *" Required="true" @bind-Value='model.dict["CustomerName"]' />
    </T_Row>
    
    <T_Row>
        
        <T_Input Title="City" @bind-Value='model.dict["City"]' />
        <T_Input Title="Mobile No." @bind-Value='model.dict["Mobileno"]' />
        <T_Textarea Title="Narration" Rows=2 MaxLength=500 @bind-Value='model.dict["Narration"]' />
    </T_Row>
    

    
    <T_Row>
        <T_Button Text="Add Product" btnType="Save" OnClick="HandleAdd"/>
        
        @if(isAddClicked){
            <FrmView TableName="ProductMaster" OnClosed="HandleClose" SelectClicked="HandleSelect"/>
        }
        
        <T_TableView dataTable="dt">
            <NewColumnHeader>
                <th style="width: 80px;">Actions</th>
                <th style="width: 200px;">Product Name</th>
                <th style="width: 100px;">Quantity</th>
                <th style="width: 100px;">Rate</th>
                <th style="width: 80px;">Discount</th>
                <th style="width: 80px;">Free</th>
                <th style="width: 80px;">GST %</th>
                <th style="width: 120px;">GST Amount</th>
                <th style="width: 120px;">Net Amount</th>
            </NewColumnHeader>
            <NewColumnValue Context="row">
                <td>
                    <T_Button Text="Remove" 
                              btnType="Danger"
                              OnClick="() => HandleRemove(row.RowIndex)" />
                </td>
                <td>@dt.Rows[row.RowIndex]["ProductName"]</td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.001"
                           min="0"
                           placeholder="1.000"
                           value='@detailsList[row.RowIndex].dict["Quantity"]'
                           @onchange="(e) => OnQuantityChange(row.RowIndex, e)"
                           style="width: 90px;" />
                </td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.01"
                           min="0"
                           placeholder="0.00"
                           value='@detailsList[row.RowIndex].dict["Rate"]'
                           @onchange="(e) => OnRateChange(row.RowIndex, e)"
                           style="width: 90px;" />
                </td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.01"
                           min="0"
                           max="100"
                           placeholder="0.00"
                           value='@detailsList[row.RowIndex].dict["Discount"]'
                           @onchange="(e) => OnDiscountChange(row.RowIndex, e)"
                           style="width: 70px;" />
                </td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.001"
                           min="0"
                           placeholder="0.000"
                           value='@detailsList[row.RowIndex].dict["Free"]'
                           @onchange="(e) => OnFreeChange(row.RowIndex, e)"
                           style="width: 70px;" />
                </td>
                <td class="text-center">
                    @dt.Rows[row.RowIndex]["GSTRate"]%
                </td>
                <td class="text-end">
                    ₹@CalculateGSTAmount(row.RowIndex).ToString("F2")
                </td>
                <td class="text-end">
                    ₹@CalculateRowNetAmount(row.RowIndex).ToString("F2")
                </td>
            </NewColumnValue>
        </T_TableView>
        

    <!-- Financial Summary and Final Amount Section - Side by Side -->
    <div class="mt-3">
        <div class="d-flex gap-3">
            <div style="flex: 0 0 700px;">

            </div>
            <div style="flex: 1;">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white">
                        <h6 class="mb-0">Final Calculations</h6>
                    </div>
                    <div class="card-body">
                        <div class="row mb-2">
                            <div class="col-6">
                                <label class="form-label">Total Discount:</label>
                                <input type="number" class="form-control form-control-sm" step="0.01"
                                    value='@model.dict["Discount"]' 
                                    @onchange="(e) => OnTotalDiscountChange(e)" />
                            </div>
                            <div class="col-6">
                                <label class="form-label">Add/Less:</label>
                                <input type="number" class="form-control form-control-sm" step="0.01"
                                    value='@model.dict["AddLess"]' 
                                    @onchange="(e) => OnAddLessChange(e)" />
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-6">
                                <label class="form-label">Rounding:</label>
                                <input type="number" class="form-control form-control-sm" step="0.01"
                                    value='@model.dict["Rounding"]' 
                                    @onchange="(e) => OnRoundingChange(e)" />
                            </div>
                            <div class="col-6">
                                <T_Checkbox Title="Cancelled" @bind-Value='model.dict["Cancelled"]' />
                            </div>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between">
                            <h5>Net Amount:</h5>
                            <h5 class="text-success">₹@model.dict["NetAmount"]</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </T_Row>
</ChildContent>
    <CardFooterContent>
        <T_Button Text="Save" spanText="Saving..." OnClick="HandleSave" btnType="Save"/>
        <T_Button Text="Clear" OnClick="HandleClear"/>
        <T_Button Text="View" OnClick="HandleView"/>
        <T_Button Text="Print" OnClick="HandlePrint" btnType="Info"/>
    </CardFooterContent>
</T_Frm>

@code{
    Model model = new Model("QuotationHead", "QuotationNo");
    List<Model> detailsList = new List<Model>();
    ClsDatabase db = new ClsDatabase();
    DataTable? dt = null;

    private T_Msg? Msg;
    public DotNetObjectReference<Quotation>? dotNetRef;

    //Boolean Variables
    private bool isAddClicked = false;
    private bool isViewing = false;
    private bool isEditing = false;

    protected override void OnInitialized()
    {
        // DataTable structure for display
        dt = new DataTable();
        dt.Columns.Add("ProductCode", typeof(int));
        dt.Columns.Add("ProductName", typeof(string));
        dt.Columns.Add("SaleRate", typeof(decimal));
        dt.Columns.Add("GSTRate", typeof(decimal));
        dt.Columns.Add("GSTCategoryCode", typeof(int));
        
        // Set default values
        model.dict["Quotationdate"] = DateTime.Now.ToString("yyyy-MM-dd");
        model.dict["TotalAmount"] = "0";
        model.dict["Discount"] = "0";
        model.dict["GstAmount"] = "0";
        model.dict["AddLess"] = "0";
        model.dict["Rounding"] = "0";
        model.dict["NetAmount"] = "0";
        model.dict["Cancelled"] = "0";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    //Button Handles
    [JSInvokable]
    public void HandleAdd(){
        isAddClicked = !isAddClicked;
        StateHasChanged();
    }
    
    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
        StateHasChanged();
    }
    
    public void HandleSelect(DataRow row1){
        try
        {
            Model detail = new Model("QuotationDetails", "");
            
            string productCode = row1["ProductCode"]?.ToString() ?? "";
            string productName = row1["ProductName"]?.ToString() ?? "";
            
            if (string.IsNullOrEmpty(productCode) || string.IsNullOrEmpty(productName))
            {
                Msg?.Show("Product information is missing.", "error", "");
                return;
            }
            
            // Check if product already exists
            bool alreadyExists = detailsList.Any(d => d.dict["ProductCode"] == productCode);
            if (alreadyExists)
            {
                Msg?.Show("This product is already added to the quotation.", "warning", "");
                isAddClicked = false;
                StateHasChanged();
                return;
            }
            
            // Create detail model - use available columns from ProductMaster
            detail.dict["ProductCode"] = productCode;
            detail.dict["Rate"] = row1["Rate"]?.ToString() ?? "0";  // ✅ Use "Rate" instead of "SaleRate"
            detail.dict["Quantity"] = "1";
            detail.dict["Discount"] = "0";
            detail.dict["Free"] = "0";
            detail.dict["QuotationNo"] = model.dict["QuotationNo"];
            detail.dict["SrNo"] = (detailsList.Count + 1).ToString();
            
            // Initialize all GST fields to 0
            InitializeGSTFields(detail);
            
            // Add to list
            detailsList.Add(detail);
            
            // Add row to display DataTable - use correct column names
            var newRow = dt!.NewRow();
            newRow["ProductCode"] = row1["ProductCode"];
            newRow["ProductName"] = row1["ProductName"];
            newRow["SaleRate"] = row1["Rate"] ?? 0;  // ✅ Map "Rate" to "SaleRate" for display
            newRow["GSTRate"] = row1["GSTRate"] ?? 0;
            newRow["GSTCategoryCode"] = row1["GSTCategoryCode"] ?? 0;
            
            dt.Rows.Add(newRow);
            
            isAddClicked = false;
            UpdateAllCalculations();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleSelect: {ex.Message}");
            Msg?.Show($"Error selecting product: {ex.Message}", "error", "");
        }
    }
    
    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }
    
    public void HandleEdit(DataRow row){
        try
        {
            if (row["QuotationNo"] != null)
            {
                model.PopulateViaKey(Convert.ToInt32(row["QuotationNo"]));
                LoadQuotationDetails(Convert.ToInt32(row["QuotationNo"]));
                isEditing = true;
                isViewing = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleEdit: {ex.Message}");
        }
    }  
    
    public void HandleDelete(){
        try
        {
            if (!string.IsNullOrEmpty(model.dict["QuotationNo"]))
            {
                // Delete details first
                string deleteDetailsQuery = $"DELETE FROM QuotationDetails WHERE QuotationNo = {model.dict["QuotationNo"]}";
                db.ExecuteQuery(deleteDetailsQuery);
                
                // Delete header
                model.Delete(Convert.ToInt32(model.dict["QuotationNo"]));
                
                // Clear form
                HandleClear();
                
                Msg?.Show("Quotation deleted successfully!", "success", "");
            }
        }
        catch (Exception ex)
        {
            Msg?.Show($"Error deleting quotation: {ex.Message}", "error", "");
        }
    }
    
    public void HandleRemove(int rowIndex){
        try
        {
            if (rowIndex >= 0 && rowIndex < detailsList.Count)
            {
                detailsList.RemoveAt(rowIndex);
                
                if (dt != null && rowIndex < dt.Rows.Count)
                {
                    dt.Rows.RemoveAt(rowIndex);
                }
                
                // Update serial numbers
                for (int i = 0; i < detailsList.Count; i++)
                {
                    detailsList[i].dict["SrNo"] = (i + 1).ToString();
                }
                
                UpdateAllCalculations();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleRemove: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public void HandleSave(){
        try
        {
            if (detailsList.Count == 0)
            {
                Msg?.Show("Please add at least one product.", "warning", "");
                return;
            }
            
            if (string.IsNullOrEmpty(model.dict["CustomerName"]))
            {
                Msg?.Show("Please enter customer name.", "warning", "");
                return;
            }
            
            // Update final calculations
            UpdateAllCalculations();
            
            // Save header
            bool headerSaved = false;
            if (!isEditing)
            {
                headerSaved = model.Save();
            }
            else
            {
                headerSaved = model.Update();
            }
            
            if (headerSaved)
            {
                // Delete existing details if updating
                if (isEditing && !string.IsNullOrEmpty(model.dict["QuotationNo"]))
                {
                    string deleteQuery = $"DELETE FROM QuotationDetails WHERE QuotationNo = {model.dict["QuotationNo"]}";
                    db.ExecuteQuery(deleteQuery);
                }
                
                // Save details with GST calculations
                bool allDetailsSaved = true;
                for (int i = 0; i < detailsList.Count; i++)
                {
                    var detail = detailsList[i];
                    detail.dict["QuotationNo"] = model.dict["QuotationNo"];
                    
                    // Calculate and set GST amounts
                    CalculateAndSetGSTAmounts(detail, i);
                    
                    if (!detail.Save())
                    {
                        allDetailsSaved = false;
                        break;
                    }
                }
                
                if (allDetailsSaved)
                {
                    Msg?.Show("Quotation saved successfully!", "success", "");
                    HandleClear();
                }
                else
                {
                    Msg?.Show("Error saving quotation details.", "error", "");
                }
            }
            else
            {
                Msg?.Show("Error saving quotation header.", "error", "");
            }
        }
        catch (Exception ex)
        {
            Msg?.Show($"Error saving quotation: {ex.Message}", "error", "");
        }
    }
    
    [JSInvokable]
    public void HandleClear(){
        isEditing = false;
        isAddClicked = false;
        isViewing = false;
        model.Clear();
        detailsList.Clear();
        dt?.Clear();
        model.dict["Quotationdate"] = DateTime.Now.ToString("yyyy-MM-dd");
        model.dict["TotalAmount"] = "0";
        model.dict["Discount"] = "0";
        model.dict["GstAmount"] = "0";
        model.dict["AddLess"] = "0";
        model.dict["Rounding"] = "0";
        model.dict["NetAmount"] = "0";
        model.dict["Cancelled"] = "0";
        StateHasChanged();
    }
    
    [JSInvokable]
    public void HandlePrint(){
        // Implement print functionality
        Msg?.Show("Print functionality to be implemented.", "info", "");
    }
    
    // Load quotation details for editing
    private void LoadQuotationDetails(int quotationNo)
    {
        try
        {
            detailsList.Clear();
            dt?.Clear();
            
            string query = $@"
                SELECT qd.*, pm.ProductName, pm.Rate, pm.GSTRate, pm.GSTCategoryCode
                FROM QuotationDetails qd 
                INNER JOIN ProductMaster pm ON qd.ProductCode = pm.ProductCode
                WHERE qd.QuotationNo = {quotationNo}
                ORDER BY qd.SrNo";
            
            DataTable detailsTable = db.GetDataTable(query);
            
            foreach (DataRow row in detailsTable.Rows)
            {
                Model detail = new Model("QuotationDetails", "");
                detail.dict["QuotationNo"] = quotationNo.ToString();
                detail.dict["ProductCode"] = row["ProductCode"]?.ToString() ?? "";
                detail.dict["Rate"] = row["Rate"]?.ToString() ?? "0";
                detail.dict["Quantity"] = row["Quantity"]?.ToString() ?? "0";
                detail.dict["Discount"] = row["Discount"]?.ToString() ?? "0";
                detail.dict["Free"] = row["Free"]?.ToString() ?? "0";
                detail.dict["SrNo"] = row["SrNo"]?.ToString() ?? "";
                
                // Load all GST fields
                LoadGSTFields(detail, row);
                
                detailsList.Add(detail);
                
                // Add to display table
                var newRow = dt!.NewRow();
                newRow["ProductCode"] = row["ProductCode"];
                newRow["ProductName"] = row["ProductName"];
                newRow["SaleRate"] = row["Rate"];  // ✅ Use "Rate" from ProductMaster
                newRow["GSTRate"] = row["GSTRate"];
                newRow["GSTCategoryCode"] = row["GSTCategoryCode"];
                
                dt.Rows.Add(newRow);
            }
            
            UpdateAllCalculations();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading quotation details: {ex.Message}");
        }
    }
    
    // Initialize all GST fields to 0
    private void InitializeGSTFields(Model detail)
    {
        var gstFields = new[] { "GST0APPAMOUNT", "SGST0AMOUNT", "CGST0AMOUNT", "GST5APPAMOUNT", "SGST5AMOUNT", "CGST5AMOUNT",
                               "GST12APPAMOUNT", "SGST12AMOUNT", "CGST12AMOUNT", "GST18APPAMOUNT", "SGST18AMOUNT", "CGST18AMOUNT",
                               "GST28APPAMOUNT", "SGST28AMOUNT", "CGST28AMOUNT", "IGST0APPAMOUNT", "IGST0AMOUNT", "IGST5APPAMOUNT",
                               "IGST5AMOUNT", "IGST12APPAMOUNT", "IGST12AMOUNT", "IGST18APPAMOUNT", "IGST18AMOUNT",
                               "IGST28APPAMOUNT", "IGST28AMOUNT", "UTGST0APPAMOUNT", "UTGST0AMOUNT", "UTGST5APPAMOUNT",
                               "UTGST5AMOUNT", "UTGST12APPAMOUNT", "UTGST12AMOUNT", "UTGST18APPAMOUNT", "UTGST18AMOUNT",
                               "UTGST28APPAMOUNT", "UTGST28AMOUNT" };
        
        foreach (var field in gstFields)
        {
            detail.dict[field] = "0";
        }
    }
    
    // Load GST fields from database row
    private void LoadGSTFields(Model detail, DataRow row)
    {
        var gstFields = new[] { "GST0APPAMOUNT", "SGST0AMOUNT", "CGST0AMOUNT", "GST5APPAMOUNT", "SGST5AMOUNT", "CGST5AMOUNT",
                               "GST12APPAMOUNT", "SGST12AMOUNT", "CGST12AMOUNT", "GST18APPAMOUNT", "SGST18AMOUNT", "CGST18AMOUNT",
                               "GST28APPAMOUNT", "SGST28AMOUNT", "CGST28AMOUNT", "IGST0APPAMOUNT", "IGST0AMOUNT", "IGST5APPAMOUNT",
                               "IGST5AMOUNT", "IGST12APPAMOUNT", "IGST12AMOUNT", "IGST18APPAMOUNT", "IGST18AMOUNT",
                               "IGST28APPAMOUNT", "IGST28AMOUNT", "UTGST0APPAMOUNT", "UTGST0AMOUNT", "UTGST5APPAMOUNT",
                               "UTGST5AMOUNT", "UTGST12APPAMOUNT", "UTGST12AMOUNT", "UTGST18APPAMOUNT", "UTGST18AMOUNT",
                               "UTGST28APPAMOUNT", "UTGST28AMOUNT" };
        
        foreach (var field in gstFields)
        {
            detail.dict[field] = row[field]?.ToString() ?? "0";
        }
    }
    
    // Calculate and set GST amounts for a detail
    private void CalculateAndSetGSTAmounts(Model detail, int rowIndex)
    {
        if (rowIndex >= dt!.Rows.Count) return;
        
        decimal quantity = Convert.ToDecimal(detail.dict["Quantity"] ?? "0");
        decimal rate = Convert.ToDecimal(detail.dict["Rate"] ?? "0");
        decimal discount = Convert.ToDecimal(detail.dict["Discount"] ?? "0");
        decimal gstRate = Convert.ToDecimal(dt.Rows[rowIndex]["GSTRate"] ?? "0");
        
        decimal taxableAmount = (quantity * rate) - discount;
        decimal gstAmount = (taxableAmount * gstRate) / 100;
        
        // Reset all GST fields
        InitializeGSTFields(detail);
        
        // Set appropriate GST fields based on GST rate
        if (gstRate == 0)
        {
            detail.dict["GST0APPAMOUNT"] = taxableAmount.ToString("F2");
        }
        else if (gstRate == 5)
        {
            detail.dict["GST5APPAMOUNT"] = taxableAmount.ToString("F2");
            detail.dict["SGST5AMOUNT"] = (gstAmount / 2).ToString("F2");
            detail.dict["CGST5AMOUNT"] = (gstAmount / 2).ToString("F2");
        }
        else if (gstRate == 12)
        {
            detail.dict["GST12APPAMOUNT"] = taxableAmount.ToString("F2");
            detail.dict["SGST12AMOUNT"] = (gstAmount / 2).ToString("F2");
            detail.dict["CGST12AMOUNT"] = (gstAmount / 2).ToString("F2");
        }
        else if (gstRate == 18)
        {
            detail.dict["GST18APPAMOUNT"] = taxableAmount.ToString("F2");
            detail.dict["SGST18AMOUNT"] = (gstAmount / 2).ToString("F2");
            detail.dict["CGST18AMOUNT"] = (gstAmount / 2).ToString("F2");
        }
        else if (gstRate == 28)
        {
            detail.dict["GST28APPAMOUNT"] = taxableAmount.ToString("F2");
            detail.dict["SGST28AMOUNT"] = (gstAmount / 2).ToString("F2");
            detail.dict["CGST28AMOUNT"] = (gstAmount / 2).ToString("F2");
        }
    }
    
    // Calculate GST amount for display
    private decimal CalculateGSTAmount(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < detailsList.Count && rowIndex < dt!.Rows.Count)
        {
            decimal quantity = Convert.ToDecimal(detailsList[rowIndex].dict["Quantity"] ?? "0");
            decimal rate = Convert.ToDecimal(detailsList[rowIndex].dict["Rate"] ?? "0");
            decimal discount = Convert.ToDecimal(detailsList[rowIndex].dict["Discount"] ?? "0");
            decimal gstRate = Convert.ToDecimal(dt.Rows[rowIndex]["GSTRate"] ?? "0");
            
            decimal taxableAmount = (quantity * rate) - discount;
            return (taxableAmount * gstRate) / 100;
        }
        return 0;
    }
    
    // Calculate net amount for a row
    private decimal CalculateRowNetAmount(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < detailsList.Count)
        {
            decimal quantity = Convert.ToDecimal(detailsList[rowIndex].dict["Quantity"] ?? "0");
            decimal rate = Convert.ToDecimal(detailsList[rowIndex].dict["Rate"] ?? "0");
            decimal discount = Convert.ToDecimal(detailsList[rowIndex].dict["Discount"] ?? "0");
            
            decimal taxableAmount = (quantity * rate) - discount;
            decimal gstAmount = CalculateGSTAmount(rowIndex);
            
            return taxableAmount + gstAmount;
        }
        return 0;
    }
    
    // Update all calculations
    private void UpdateAllCalculations()
    {
        decimal totalAmount = 0;
        decimal totalGstAmount = 0;
        
        for (int i = 0; i < detailsList.Count; i++)
        {
            decimal quantity = Convert.ToDecimal(detailsList[i].dict["Quantity"] ?? "0");
            decimal rate = Convert.ToDecimal(detailsList[i].dict["Rate"] ?? "0");
            decimal discount = Convert.ToDecimal(detailsList[i].dict["Discount"] ?? "0");
            
            decimal taxableAmount = (quantity * rate) - discount;
            decimal gstAmount = CalculateGSTAmount(i);
            
            totalAmount += taxableAmount;
            totalGstAmount += gstAmount;
        }
        
        model.dict["TotalAmount"] = totalAmount.ToString("F2");
        model.dict["GstAmount"] = totalGstAmount.ToString("F2");
        
        UpdateFinalAmounts();
    }
    
    // Update final net amount
    private void UpdateFinalAmounts()
    {
        decimal totalAmount = Convert.ToDecimal(model.dict["TotalAmount"] ?? "0");
        decimal gstAmount = Convert.ToDecimal(model.dict["GstAmount"] ?? "0");
        decimal additionalDiscount = Convert.ToDecimal(model.dict["Discount"] ?? "0");
        decimal addLess = Convert.ToDecimal(model.dict["AddLess"] ?? "0");
        decimal rounding = Convert.ToDecimal(model.dict["Rounding"] ?? "0");
        
        decimal netAmount = totalAmount + gstAmount - additionalDiscount + addLess + rounding;
        model.dict["NetAmount"] = netAmount.ToString("F2");
        
        StateHasChanged();
    }
    
    // Event handlers
    public void OnQuantityChange(int index, ChangeEventArgs e)
    {
        if (index >= 0 && index < detailsList.Count)
        {
            detailsList[index].dict["Quantity"] = e.Value?.ToString() ?? "0";
            UpdateAllCalculations();
        }
    }

    public void OnRateChange(int index, ChangeEventArgs e)
    {
        if (index >= 0 && index < detailsList.Count)
        {
            detailsList[index].dict["Rate"] = e.Value?.ToString() ?? "0";
            UpdateAllCalculations();
        }
    }

    public void OnDiscountChange(int index, ChangeEventArgs e)
    {
        if (index >= 0 && index < detailsList.Count)
        {
            detailsList[index].dict["Discount"] = e.Value?.ToString() ?? "0";
            UpdateAllCalculations();
        }
    }

    public void OnFreeChange(int index, ChangeEventArgs e)
    {
        if (index >= 0 && index < detailsList.Count)
        {
            detailsList[index].dict["Free"] = e.Value?.ToString() ?? "0";
            UpdateAllCalculations();
        }
    }
    
    
        // Event handlers for final calculations
    public void OnTotalDiscountChange(ChangeEventArgs e)
    {
        model.dict["Discount"] = e.Value?.ToString() ?? "0";
        UpdateFinalAmounts();
    }

    public void OnAddLessChange(ChangeEventArgs e)
    {
        model.dict["AddLess"] = e.Value?.ToString() ?? "0";
        UpdateFinalAmounts();
    }

    public void OnRoundingChange(ChangeEventArgs e)
    {
        model.dict["Rounding"] = e.Value?.ToString() ?? "0";
        UpdateFinalAmounts();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}