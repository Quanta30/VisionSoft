@* @using System.Data
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

<div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="OpenFrmViewHelper" @onclick:stopPropagation="true">
            <i class="bi bi-plus"></i> Add Product for Adjustment
        </button>
    </div>

    <div>
        @if (DetailModel.adjustmentDetails.Count == 0)
        {
            <div class="alert alert-info">No products added for adjustment yet.</div>
        }
        else
        {
            <div class="border overflow-auto" style="overflow: auto; max-height: 400px; max-width: 90vw; overflow-x: auto; overflow-y: auto;">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light sticky-top">
                            <tr>
                                <th style="min-width: 80px;">Sr No</th>
                                <th style="min-width: 150px;">Product Name</th>
                                <th style="min-width: 100px;">Current Qty</th>
                                <th style="min-width: 120px;">Adjustment Type</th>
                                <th style="min-width: 100px;">Adj. Quantity</th>
                                <th style="min-width: 100px;">Rate</th>
                                <th style="min-width: 100px;">Amount</th>
                                <th style="min-width: 120px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < DetailModel.adjustmentDetails.Count; i++)
                            {
                                var index = i;
                                var detail = DetailModel.adjustmentDetails[index];
                                <tr>
                                    <td class="text-center">@(index + 1)</td>
                                    <td>
                                        <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" 
                                            title="@detail.productName">
                                            @detail.productName
                                        </div>
                                    </td>
                                    <td class="text-center">@detail.currentQuantity</td>
                                    <td>
                                        <select class="form-select form-select-sm" 
                                                @bind="detail.adjustmentTypeStr"
                                                ValueChanged="() => UpdateParent()"
                                                @onclick:stopPropagation="true">
                                            <option value="Add">Add</option>
                                            <option value="Less">Less</option>
                                        </select>
                                    </td>
                                    <td>
                                        <div class="input-group input-group-sm" style="width: 100px;">
                                            <input type="number" class="form-control form-control-sm text-center" 
                                                @bind="detail.quantityStr"
                                                ValueChanged="() => UpdateParent()"
                                                min="0" max="9999" step="0.01"
                                                @onclick:stopPropagation="true" />
                                        </div>
                                    </td>
                                    <td>
                                        <div class="input-group input-group-sm" style="width: 100px;">
                                            <input type="number" class="form-control form-control-sm text-center" 
                                                @bind="detail.rateStr"
                                                ValueChanged="() => UpdateParent()"
                                                min="0" step="0.01"
                                                @onclick:stopPropagation="true" />
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-info fs-6">@detail.GetAmount().ToString("F2")</span>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => RemoveDetail(index)" 
                                                @onclick:stopPropagation="true">
                                            <i class="bi bi-trash"></i> Remove
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <td colspan="6" class="text-end"><strong>Total Amount:</strong></td>
                                <td class="text-end">
                                    <span class="badge bg-success fs-6">@DetailModel.CalculateTotalAmount().ToString("F2")</span>
                                </td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        }
    </div>

    <FrmViewHelper TableData="@TableData" 
                   OnSelectClicked="HandleRowSelected" 
                   OnClosed="HandleModalClosed"
                   Display="@isFrmViewHelperVisible" />
</div>

@code {
    private DataTable? TableData;
    private bool isFrmViewHelperVisible = false;

    [Parameter] public AdjustmentDetailModel2 DetailModel { get; set; } = new();
    [Parameter] public EventCallback OnUpdate { get; set; }

    ClsDatabase db = new ClsDatabase();

    protected override async Task OnInitializedAsync()
    {
        await LoadPhysicalStockData();
    }

    private async Task LoadPhysicalStockData()
    {
        try
        {
            // Join PhysicalStock with ProductMaster to get complete product information
            string query = @"
                SELECT 
                    ps.StockID,
                    ps.ProductCode,
                    pm.ProductName,
                    ps.Quantity as CurrentQuantity,
                    ps.SaleRate as Rate,
                    ps.PurchaseRate,
                    ps.NetPurchaseRate
                FROM PhysicalStock ps 
                INNER JOIN ProductMaster pm ON ps.ProductCode = pm.ProductCode 
                WHERE ps.Quantity > 0
                ORDER BY pm.ProductName";
            
            TableData = db.GetDataTable(query);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading physical stock data: {ex.Message}");
        }
    }

    private void OpenFrmViewHelper()
    {
        if(isFrmViewHelperVisible) return;

        Console.WriteLine("Opening Physical Stock selection modal");
        isFrmViewHelperVisible = true;
        StateHasChanged();
    }

    private void HandleModalClosed()
    {
        Console.WriteLine("Modal closed - resetting state");
        isFrmViewHelperVisible = false;
        StateHasChanged();
    }

    private async Task HandleRowSelected(DataRow selectedRow)
    {
        Console.WriteLine("Physical Stock row selected - processing...");
        
        // Check if this StockID is already selected
        var stockID = selectedRow["StockID"]?.ToString();
        if (DetailModel.adjustmentDetails.Any(d => d.stockIDStr == stockID))
        {
            Console.WriteLine("Product already selected");
            isFrmViewHelperVisible = false;
            StateHasChanged();
            return;
        }

        // Add detail to model
        DetailModel.AddDetail(selectedRow);
        
        // Close modal
        isFrmViewHelperVisible = false;
        
        Console.WriteLine($"Added adjustment detail. Total details: {DetailModel.adjustmentDetails.Count}");
        
        await UpdateParent();
    }

    private async Task RemoveDetail(int index)
    {
        Console.WriteLine($"Removing adjustment detail at index {index}");
        DetailModel.RemoveDetail(index);
        await UpdateParent();
    }

    private async Task UpdateParent()
    {
        await OnUpdate.InvokeAsync();
        StateHasChanged();
    }

    // Public methods for parent component
    public void ClearAll()
    {
        DetailModel.Clear();
        StateHasChanged();
    }
} *@