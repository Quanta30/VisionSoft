@page "/Quotations"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.Quotation
@rendermode InteractiveServer 

@* QuotationDetails	QuotationNo
QuotationDetails	SrNo
QuotationDetails	ProductCode
QuotationDetails	Rate
QuotationDetails	Quantity
QuotationDetails	Discount
QuotationDetails	Free *@

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="AdjustmentHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Quotation">
<ChildContent>
    <T_Row>
        <T_Input Title="Quotation No *" ReadOnly=true @bind-Value="@model.dict["QuotationNo"]" ColSize="col-md-3"/>
        <T_Input Title="Quotation Date" Type="date" @bind-Value="@model.dict["Quotationdate"]" ColSize="col-md-3"/>
        <T_Input Title="Customer Name" @bind-Value="@model.dict["CustomerName"]" MaxLength=100 ColSize="col-md-3"/>
        <T_Input Title="City" @bind-Value="@model.dict["City"]" MaxLength=50 ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Input Title="Mobile No." @bind-Value="@model.dict["Mobileno"]" MaxLength="50" ColSize="col-md-3"/>
        <T_Checkbox Title="Cancelled" @bind-Value="@model.dict["Cancelled"]" ColSize="col-md-3"/>
        <T_Textarea Title="Narration" @bind-Value="@model.dict["Narration"]" ColSize="col-md-6"/>
    </T_Row>
    <TableView TableName="Quotation Details" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Sr. No.</th>
            <th>Product</th>
            <th>Rate</th>
            <th>Quantity</th>
            <th>Discount</th>
            <th>Free</th>
            <th>GST%</th>
            <th>Taxable Amount</th>
            <th>CGST/SGST</th>
            <th>Total GST</th>
            <th>Net Amount</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i<details.Count; i++){
                <QuotationDetail SerialNo=@(i+1) 
                                QuotationNo=@Convert.ToInt32(model.dict["QuotationNo"]) 
                                OnRemove="HandleRemove" model="@details[i]" /> 
            }
        </TableRows>
        <TableFooter>
            
        </TableFooter>
    </TableView>
    <T_SummaryCard >
        <T_Input Title="Total Amount" Layout=2 ReadOnly @bind-Value="@model.dict["TotalAmount"]" Placeholder="-"/>
        <T_Input Title="GST" Layout=2 ReadOnly @bind-Value="@model.dict["GstAmount"]" Placeholder="-"/>
        <T_Input Title="Discount" Layout=2 @bind-Value="@model.dict["Discount"]"/>
        <T_Input Title="Add/Less" Layout=2 @bind-Value="@model.dict["AddLess"]"/>
        <T_Input Title="Rounding" Layout=2 @bind-Value="@model.dict["Rounding"]"/>
        <T_Input Title="Net Amount" Layout=2 ReadOnly @bind-Value="@model.dict["NetAmount"]" Placeholder="-"/>
    </T_SummaryCard>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style=""/>
    <T_Button Text="View" Style=""/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>


</T_Frm>

@code{
    //ELEMENT REFERENCES
    private T_Msg Msg;
    public DotNetObjectReference<Quotations2> dotNetRef;
    
   
    //Models
    Model model = new Model("QuotationHead", "QuotationNo");
    List<Model> details = new List<Model>();
   

    //Count

    public List<float> gsts = new List<float>();

    //BooleanValues
    private bool isViewing = false;
    private bool isAddClicked = false;
    private bool isEditing = false;







    //Handle Methods
    public void HandleSelect(DataRow row){

    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        Model detail = new Model("QuotationDetails", "");
        details.Add(detail);
        StateHasChanged();
    }

    public void HandleEdit(DataRow row){
        isEditing = true;
        //Fetch
    }

    public void HandleSave(){
        Console.WriteLine("Saving");
        try{
            model.Save();
            foreach(Model detail in details)detail.Save();
            Msg.Success();
        }
        catch(Exception e){
            Msg.SaveError();
        }
    }

    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
    }

    public void HandleDelete(DataRow row){

    }

    public void HandleRemove(int i){
        Console.WriteLine($"Removing Row in Parent {i}");
        if (i >= 0 && i < details.Count)
        {
            details.RemoveAt(i);  // âœ… Correct - RemoveAt() for index
            Console.WriteLine($"Count At {i}");
            StateHasChanged();
        }
    }


    // Add calculation method
    private void CalculateTotals()
    {
        float totalAmount = 0;
        float gstAmount = 0;
        float discount = 0;

        foreach(Model detail in details){
            totalAmount += float.TryParse(detail.dict2["TotalAmount"], out float ta)?ta:0;
            gstAmount += float.TryParse(detail.dict2["Gst"], out float gt)?gt:0;
            discount += float.TryParse(detail.dict2["Discount"], out float dt)?dt:0;
        }

        model.dict["TotalAmount"] = totalAmount.ToString("F2");
        model.dict["GstAmount"] = gstAmount.ToString("F2");
        model.dict["Discount"] = discount.ToString("F2");
        
        // Calculate net amount
        float additionalDiscount = float.TryParse(model.dict["Discount"], out float d) ? d : 0;
        float addLess = float.TryParse(model.dict["AddLess"], out float al) ? al : 0;
        float rounding = float.TryParse(model.dict["Rounding"], out float r) ? r : 0;
        
        float netAmount = totalAmount + gstAmount - additionalDiscount + addLess + rounding;
        model.dict["NetAmount"] = netAmount.ToString("F2");

        StateHasChanged();
    }


    //Update Calculations
    public void UpdateCalculations(int Serial){

    }

}