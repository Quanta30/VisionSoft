@page "/Quotation"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.Quotation
@rendermode InteractiveServer

<!-- Message Component -->
<T_Msg @ref="Msg" />

<!-- View Mode: Renders when 'isViewing' is true -->
@if (isViewing)
{
    <FrmView TableName="QuotationHead" 
             OnClosed="HandleCloseView" 
             EditClicked="HandleEdit" 
             DeleteClicked="HandleDelete" 
             PrimaryKeyColumn="QuotationNo" />
}

<!-- Quotation Form -->
<T_Frm FormName="Quotation">
    <ChildContent>
        <!-- Header Fields -->
        <T_Row>
            <T_Input Title="Quotation No *" ReadOnly=true 
                     @bind-Value="@(model.dict["QuotationNo"])" 
                     ColSize="col-md-3" />
            
            <T_Input Title="Quotation Date" Type="date" 
                     @bind-Value="@(model.dict["Quotationdate"])" 
                     ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(0, eref))"
                     NextReference="@(GetRef(1))" 
                     @ref="firstReference" />
            
            <T_Input Title="Customer Name" 
                     @bind-Value="@(model.dict["CustomerName"])" 
                     MaxLength=100 
                     ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(1, eref))"
                     NextReference="@(GetRef(2))" />
            
            <T_Input Title="City" 
                     @bind-Value="@(model.dict["City"])" 
                     MaxLength=50 
                     ColSize="col-md-3"
                     GetInputReference="@((eref) => getInputReferences(2, eref))"
                     NextReference="@(GetRef(3))" />
        </T_Row>
        
        <T_Row>
            <T_Input Title="Mobile No." 
                     @bind-Value="@(model.dict["Mobileno"])" 
                     MaxLength="50" 
                     ColSize="col-md-3"
                     Type="Number"
                     GetInputReference="@((eref) => getInputReferences(3, eref))"
                     NextReference="@(GetRef(4))" />
            
            
            <T_Textarea Title="Narration" 
                        @bind-Value="@(model.dict["Narration"])" 
                        ColSize="col-md-6"
                        GetInputReference="@((eref) => getInputReferences(4, eref))"
                        NextReference="@(GetRef(6))"
                        OnEnterPressed="HandleAdd" />
        </T_Row>

        <!-- Details Table -->
        <TableView TableName="Quotation Details" HandleAdd="HandleAdd" Info="(Press : ALT + A)">
            <TableHeads>
                <th>Action</th>
                <th>Sr. No.</th>
                <th>Product</th>
                <th>Rate</th>
                <th>Quantity</th>
                <th>Discount</th>
                <th>Free</th>
                <th>GST%</th>
                <th>Taxable Amount</th>
                <th>CGST/SGST</th>
                <th>Total GST</th>
                <th>Net Amount</th>
            </TableHeads>
            
            <TableRows>
                @for (int i = 0; i < detailComponents.Count; i++)
                {
                    int index = i;
                    int detailId = detailIds.Count > index ? detailIds[index] : index;
                    
                    <QuotationDetail @key="@($"detail-{detailId}")"
                                     @ref="detailComponents[index]"
                                     SerialNo="@(index + 1)"
                                     QuotationNo="@(Convert.ToInt32(model.dict["QuotationNo"]))"
                                     InitialDataRow="detailRows.Count > index ? detailRows[index] : null"
                                     OnRemove="@((idx) => HandleRemoveDetail(idx))"
                                     OnAdd="HandleAdd"
                                     OnCalculationChanged="CalculateTotals"
                                     endReference="@(GetRef(6))"
                                     transaction="@transaction" />
                }
            </TableRows>
            
            <TableFooter>
                Total Count: @detailComponents.Count | Total Qty: @model.dict2["TotalQty"]
            </TableFooter>
        </TableView>

        <!-- Summary Section -->
        <T_SummaryCard>
            <T_Input Title="Total Amount" Layout=2 ReadOnly 
                     @bind-Value="@(model.dict["TotalAmount"])" 
                     Placeholder="-" Type="Number" />
            
            <T_Input Title="GST Amount" Layout=2 ReadOnly 
                     @bind-Value="@(model.dict["GstAmount"])" 
                     Placeholder="-" Type="Number" />
            
            <T_Input Title="Discount" Layout=2 
                     @bind-Value="@(model.dict["Discount"])" 
                     ChangeFunction="CalculateTotals" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(6, eref))"
                     NextReference="@(GetRef(7))" />
            
            <T_Input Title="Add/Less" Layout=2 
                     @bind-Value="@(model.dict["AddLess"])" 
                     ChangeFunction="CalculateTotals" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(7, eref))"
                     NextReference="@(GetRef(8))" />
            
            <T_Input Title="Rounding" Layout=2 
                     @bind-Value="@(model.dict["Rounding"])" 
                     ChangeFunction="CalculateTotals" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(8, eref))"
                     NextReference="@(GetRef(6))" />
            
            <T_Input Title="Net Amount" Layout=2 ReadOnly 
                     @bind-Value="@(model.dict["NetAmount"])" 
                     Placeholder="-" Type="Number" />
        </T_SummaryCard>
    </ChildContent>

    <!-- Footer Buttons -->
    <CardFooterContent>
        <T_Button Text="Save" OnClick="HandleSave" Info="(ALT + S)" />
        <T_Button Text="Clear" OnClick="HandleClear" Info="(ALT + C)" />
        <T_Button Text="View" OnClick="HandleView" Info="(ALT + V)" />
        <T_Button Text="Print" Info="(ALT + P)" />
    </CardFooterContent>
</T_Frm>

@code {
    #region Component References & Variables
    
    // UI References
    private T_Msg Msg;
    private T_Input firstReference;
    private DotNetObjectReference<Quotations> dotNetRef;
    
    // Database and Models
    private ClsDatabase db = new();
    private Model model = new("QuotationHead", "QuotationNo");
    public Transaction transaction = new Transaction();
    
    // Component Management
    private List<QuotationDetail> detailComponents = new();
    private List<DataRow> detailRows = new();
    private List<int> detailIds = new();
    private int nextDetailId = 1;
    
    // State Management
    private bool isViewing = false;
    private bool isEditing = false;
    
    // Element References Management
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();
    
    #endregion

    #region Element Reference Methods
    
    public void getInputReferences(int position, ElementReference eref)
    {
        if (!references.ContainsKey(position))
        {
            references.Add(position, eref);
            Console.WriteLine($"Quotation: Added reference for position {position}, Id: {eref}");
        }
        else
        {
            references[position] = eref;
            Console.WriteLine($"Quotation: Updated reference for position {position}, Id: {eref}");
        }
    }

    private ElementReference GetRef(int idx) 
    {
        bool hasRef = references.ContainsKey(idx);
        return hasRef ? references[idx] : default;
    }
    
    #endregion

    #region Blazor Lifecycle Methods
    
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["Quotationdate"]))
        {
            model.dict["Quotationdate"] = DateTime.Now.ToString("yyyy-MM-dd");
        }
        
        model.dict["Cancelled"] ??= "false";
        model.dict2["TotalQty"] = "0";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Quotation: First render, focusing firstReference");
            if (firstReference != null)
            {
                await firstReference.Focus();
            }
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
        Console.WriteLine($"Quotation: References count: {references.Count}");

    }
    
    #endregion

    #region Main UI Event Handlers
    
    [JSInvokable]
    public async Task HandleSave()
    {
        try
        {
            // Validation
            if (string.IsNullOrEmpty(model.dict["CustomerName"]))
            {
                await Msg.Error("Please enter customer name.");
                return;
            }

            if (detailComponents.Count == 0)
            {
                await Msg.Error("Please add at least one quotation item.");
                return;
            }

            // Delete existing details if editing
            if (isEditing)
            {
                transaction.AddQuery($"DELETE FROM QuotationDetails WHERE QuotationNo = '{model.dict2["QuotationNo"]}'");
            }

            // Save Details
  
            foreach (var detail in detailComponents)
            {
                detail.SaveDetail();
            }


            // Save Header
            bool result;
            if (isEditing)
                model.Update(transaction);
            else
                model.Save(transaction);

            if (!transaction.Execute())
                throw new Exception("Failed to save");

            await Msg.Success();
            await HandleClear();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Quotation: Save error: {ex.Message}");
            await Msg.SaveError();
        }
    }

    [JSInvokable]
    public async Task HandleClear()
    {
        model.Clear();
        detailComponents.Clear();
        detailRows.Clear();
        detailIds.Clear();
        transaction.ClearQuery();
        nextDetailId = 1;
        isEditing = false;
        isViewing = false;
        references.Clear();

        // Reset date to today after clearing
        OnInitialized();
        StateHasChanged();
        await Task.Delay(50);
        if (firstReference != null)
        {
            await firstReference.Focus();
        }
    }

    [JSInvokable]
    public void HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
    }

    public async Task HandleEdit(DataRow rowToEdit)
    {
        await HandleClear();
        nextDetailId += 10;
        isEditing = true;
        isViewing = false;

        // Populate header fields
        model.Populate(rowToEdit);
        model.dict2["QuotationNo"] = model.dict["QuotationNo"]; // Store original primary key
        model.dict2["TotalQty"] = "0";
        // Fetch and populate detail lines
        DataTable detailsTable = db.GetDataTable($"SELECT * FROM QuotationDetails WHERE QuotationNo = '{model.dict["QuotationNo"]}'");
        foreach (DataRow detailRow in detailsTable.Rows)
        {
            detailRows.Add(detailRow);
            detailComponents.Add(null);
            detailIds.Add(nextDetailId++);
        }

        await Task.Delay(50);
        if (firstReference != null)
        {
            await firstReference.Focus();
        }
    }

    public void HandleDelete(DataRow rowToDelete)
    {
        try
        {
            string pk = rowToDelete["QuotationNo"].ToString();
            transaction.AddQuery($"DELETE FROM QuotationDetails WHERE QuotationNo = '{pk}'");
            transaction.AddQuery($"DELETE FROM QuotationHead WHERE QuotationNo = '{pk}'");
            if (transaction.Execute())
            {
                Msg.Success();
            }
            else
            {
                Msg.Error("Failed to delete the quotation.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Quotation: Delete error: {ex.Message}");
            Msg.Error("Failed to delete the quotation.");
        }
    }

    public void HandleCloseView()
    {
        isViewing = false;
        StateHasChanged();
    }
    
    #endregion

    #region Detail Line Handlers
    
    [JSInvokable]
    public async Task HandleAdd()
    {
        detailComponents.Add(null);
        detailIds.Add(nextDetailId++);
        StateHasChanged();
        await Task.Delay(50);
        if (detailComponents.LastOrDefault()?.firstReference != null)
        {
            await detailComponents.Last().firstReference.Focus();
        }
    }

    public void HandleRemoveDetail(int serialNo)
    {
        int index = serialNo - 1;
        
        if (index >= 0 && index < detailComponents.Count)
        {
            detailComponents.RemoveAt(index);
            detailIds.RemoveAt(index);
            
            if (detailRows.Count > index)
            {
                detailRows.RemoveAt(index);
            }
            
            CalculateTotals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Quotation: Invalid index {index} for removal. Component count: {detailComponents.Count}");
        }
    }
    
    #endregion

    #region Calculation Logic
    
    private void CalculateTotals()
    {
        float totalAmount = 0, gstAmount = 0, totalQty = 0;

        // Sum values from all detail components
        foreach (var detail in detailComponents)
        {
            if (detail != null)
            {
                totalAmount += detail.GetTotalAmount();
                gstAmount += detail.GetGstAmount();
                totalQty += float.TryParse(detail.model.dict["Quantity"], out float qty) ? qty : 0;
            }
        }

        // Update model with calculated values
        model.dict["TotalAmount"] = totalAmount.ToString("F2");
        model.dict["GstAmount"] = gstAmount.ToString("F2");
        model.dict2["TotalQty"] = totalQty.ToString("F2");

        // Get header-level adjustments
        float discount = float.TryParse(model.dict["Discount"], out float d) ? d : 0;
        float addLess = float.TryParse(model.dict["AddLess"], out float al) ? al : 0;
        float rounding = float.TryParse(model.dict["Rounding"], out float r) ? r : 0;

        // Calculate final net amount
        float netAmount = totalAmount - discount + addLess + rounding;
        model.dict["NetAmount"] = netAmount.ToString("F2");

        StateHasChanged();
    }
    
    #endregion
}