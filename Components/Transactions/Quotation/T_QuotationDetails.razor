@* T_QuotationDetails.razor *@
@using System.Data

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="mb-0">Quotation Details</h6>
        <button class="btn btn-sm btn-primary" @onclick="HandleAddNew">
            <i class="bi bi-plus"></i> Add Item
        </button>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive" style="max-height: 400px;">
            <table class="table table-sm table-hover mb-0">
                <thead class="table-light sticky-top">
                    <tr>
                        <th style="width: 50px;">Action</th>
                        <th style="width: 60px;">Sr No</th>
                        <th style="width: 200px;">Product</th>
                        <th style="width: 100px;">Rate</th>
                        <th style="width: 100px;">Qty</th>
                        <th style="width: 100px;">Discount</th>
                        <th style="width: 120px;">GST Category</th>
                        <th style="width: 100px;" class="text-end">Amount</th>
                        <th style="width: 100px;" class="text-end">GST Amt</th>
                        <th style="width: 100px;" class="text-end">Net Amt</th>
                    </tr>
                </thead>
                <tbody>
                    @if (IsAddingNew)
                    {
                        <T_DetailRow SrNo="@GetNextSrNo()" 
                                   ProductCode="@newItem.dict["ProductCode"]"
                                   Rate="@newItem.dict["Rate"]"
                                   Quantity="@newItem.dict["Quantity"]"
                                   Discount="@newItem.dict["Discount"]"
                                   IsEditing="true"
                                   OnSave="HandleSaveNew"
                                   OnCancel="HandleCancelNew"
                                   OnProductChanged="HandleProductChanged" />
                    }
                    
                    @for (int i = 0; i < Details.Count; i++)
                    {
                        int index = i;
                        var productInfo = GetProductInfo(Details[index].dict["ProductCode"]);
                        var productChangedCallback = GetProductChangedCallbackForIndex(index);
                        
                <T_DetailRow SrNo="@(index + 1)"
                        ProductCode="@Details[index].dict["ProductCode"]"
                        ProductName="@productInfo.ProductName"
                        Rate="@Details[index].dict["Rate"]"
                        Quantity="@Details[index].dict["Quantity"]"
                        Discount="@Details[index].dict["Discount"]"
                        GstCategoryCode="@productInfo.GSTCategoryCode"
                        GstCategoryName="@productInfo.GSTCategoryName"
                        GstPercentage="@productInfo.GSTPercentage"
                        GstCode="@productInfo.GSTCategoryCode"
                        IsEditing="@(EditingIndex == index)"
                        OnEdit="@(() => HandleEdit(index))"
                        OnSave="@(() => HandleSave(index))"
                        OnDelete="@(() => HandleDelete(index))"
                        OnCancel="@(() => HandleCancel(index))" />
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="card-footer">
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                <small class="text-muted">
                    Total Items: @Details.Count | 
                    Total Amount: @GetTotalAmount().ToString("F2")
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Model> Details { get; set; } = new List<Model>();
    [Parameter] public EventCallback DetailsChanged { get; set; }

    private bool IsAddingNew = false;
    private int EditingIndex = -1;
    private Model newItem = new Model("QuotationDetails", "SrNo");

    private ClsDatabase db = new ClsDatabase();

    // Product info class for better organization
    public class ProductInfo
    {
        public string ProductName { get; set; } = "";
        public string GSTCategoryCode { get; set; } = "";
        public string GSTCategoryName { get; set; } = "";
        public decimal GSTPercentage { get; set; } = 0;
        public string DefaultRate { get; set; } = "0";
    }

    private void HandleAddNew()
    {
        IsAddingNew = true;
        newItem = new Model("QuotationDetails", "SrNo");
        newItem.dict["ProductCode"] = "";
        newItem.dict["Rate"] = "0";
        newItem.dict["Quantity"] = "1";
        newItem.dict["Discount"] = "0";
        newItem.dict["Free"] = "0";
        StateHasChanged();
    }

    private void HandleProductChanged(string productCode)
    {
        if (!string.IsNullOrEmpty(productCode))
        {
            var productInfo = GetProductInfo(productCode);
            // Auto-fill rate from product master if available
            if (!string.IsNullOrEmpty(productInfo.DefaultRate))
            {
                newItem.dict["Rate"] = productInfo.DefaultRate;
            }
        }
        StateHasChanged();
    }

    private void HandleExistingProductChanged(int index, string productCode)
    {
        if (index < Details.Count && !string.IsNullOrEmpty(productCode))
        {
            var productInfo = GetProductInfo(productCode);
            // Auto-fill rate from product master if available
            if (!string.IsNullOrEmpty(productInfo.DefaultRate))
            {
                Details[index].dict["Rate"] = productInfo.DefaultRate;
            }
        }
        StateHasChanged();
    }

    private async Task HandleSaveNew(int srNo)
    {
        if (ValidateItem(newItem))
        {
            newItem.dict["SrNo"] = srNo.ToString();
            Details.Add(newItem);
            IsAddingNew = false;
            await DetailsChanged.InvokeAsync();
            StateHasChanged();
        }
    }

    private void HandleCancelNew(int srNo)
    {
        IsAddingNew = false;
        StateHasChanged();
    }

    private void HandleEdit(int index)
    {
        EditingIndex = index;
        StateHasChanged();
    }

    private async Task HandleSave(int index)
    {
        if (ValidateItem(Details[index]))
        {
            EditingIndex = -1;
            await DetailsChanged.InvokeAsync();
            StateHasChanged();
        }
    }

    private void HandleDelete(int index)
    {
        Details.RemoveAt(index);
        // Update SrNo for remaining items
        for (int i = 0; i < Details.Count; i++)
        {
            Details[i].dict["SrNo"] = (i + 1).ToString();
        }
        StateHasChanged();
    }

    private void HandleCancel(int index)
    {
        EditingIndex = -1;
        StateHasChanged();
    }

    private int GetNextSrNo() => Details.Count + 1;

    private ProductInfo GetProductInfo(string productCode)
    {
        var productInfo = new ProductInfo();
        
        if (string.IsNullOrEmpty(productCode)) return productInfo;

        try
        {
            // Get product details with GST category in one query
            var query = $@"
                SELECT 
                    p.ProductName,
                    p.Rate as DefaultRate,
                    p.GSTCategoryCode,
                    g.CategoryName as GSTCategoryName,
                    g.Percentage as GSTPercentage
                FROM ProductMaster p
                LEFT JOIN GstCategoryMaster g ON p.GSTCategoryCode = g.GstCode
                WHERE p.ProductCode = '{productCode}'";

            var dt = db.GetDataTable(query);
            
            if (dt.Rows.Count > 0)
            {
                var row = dt.Rows[0];
                productInfo.ProductName = row["ProductName"]?.ToString() ?? "";
                productInfo.DefaultRate = row["DefaultRate"]?.ToString() ?? "0";
                productInfo.GSTCategoryCode = row["GSTCategoryCode"]?.ToString() ?? "";
                productInfo.GSTCategoryName = row["GSTCategoryName"]?.ToString() ?? "";
                
                if (decimal.TryParse(row["GSTPercentage"]?.ToString(), out decimal percentage))
                {
                    productInfo.GSTPercentage = percentage;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting product info: {ex.Message}");
        }

        return productInfo;
    }

    private decimal GetTotalAmount()
    {
        decimal total = 0;
        foreach (var detail in Details)
        {
            if (decimal.TryParse(detail.dict["Rate"], out decimal rate) &&
                decimal.TryParse(detail.dict["Quantity"], out decimal qty))
            {
                decimal amount = rate * qty;
                if (decimal.TryParse(detail.dict["Discount"], out decimal discount))
                    amount -= discount;
                total += amount;
            }
        }
        return total;
    }

    private bool ValidateItem(Model item)
    {
        return !string.IsNullOrEmpty(item.dict["ProductCode"]) &&
               decimal.TryParse(item.dict["Rate"], out _) &&
               decimal.TryParse(item.dict["Quantity"], out _);
    }

    private EventCallback<string> GetProductChangedCallbackForIndex(int index)
    {
        return EventCallback.Factory.Create<string>(this, productCode => HandleExistingProductChanged(index, productCode));
    }
}