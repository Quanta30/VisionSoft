@using System.Data
@namespace VisionSoft.Components.Transactions.Quotation
@rendermode InteractiveServer

<T_Msg @ref="Msg"/>
<tr>
    <!-- Remove Button -->
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    
    <!-- Serial Number -->
    <td>
        @SerialNo
    </td>

    <!-- Product Selection -->
    <td>
        <T_RInput Title="" Layout="3" TableName="ProductMaster" 
                  PrimaryColumn="ProductName" DisplayColumn="ProductName" 
                  Value="@ProductName" ValueChanged="OnProductChanged"
                  GetInputReference="@((eref) => getInputReferences(0, eref))" 
                  NextReference="@(GetRef(1))" 
                  @ref="firstReference"/>
    </td>
    
    <!-- Rate Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(1, eref))" 
                     NextReference="@(GetRef(2))"/>
        </div>
    </td>

    <!-- Quantity Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(2, eref))" 
                     NextReference="@(GetRef(3))"/>
        </div>
    </td>

    <!-- Discount Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Discount"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(3, eref))" 
                     NextReference="@(GetRef(4))"/>
        </div>
    </td>

    <!-- Free Quantity -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Free"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(4, eref))" 
                     NextReference="@(GetRef(5))"/>
        </div>
    </td>

    <!-- GST Category Dropdown -->
    <td>
        <div style="width:70px">
            <T_Select Value="@GstCategoryCode.ToString()" 
                      Options="1:0% GST,2:5% GST,3:12% GST,4:18% GST,5:28% GST"
                      ValueChanged="OnGstCategoryChanged"
                      ColSize="col-md-3" Layout="2"
                      GetInputReference="@((eref) => getInputReferences(5, eref))" 
                      NextReference="@endReference"
                      OnEnterPressed="OnEnterPressed"/>
        </div>
    </td>

    <!-- Taxable Amount (ReadOnly) -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" Value="@taxableAmount.ToString("F2")" 
                     ReadOnly="true" Placeholder=""/>
        </div>
    </td>

    <!-- CGST/SGST Display -->
    <td>
        @(gst > 0 ? (gst/2).ToString("F2") : "0.00")
    </td>

    <!-- Total GST -->
    <td>
        @gst.ToString("F2")
    </td>

    <!-- Net Amount -->
    <td>
        @netAmount.ToString("F2")
    </td>
</tr>

@code {
    // ============================= PARAMETERS =============================
    
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public int QuotationNo { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }
    [Parameter] public ElementReference endReference { get; set; }
    [Parameter] public Transaction transaction { get; set; }

    // ============================= MODEL & HELPERS =============================
    
    public Model model = new("QuotationDetails", "");
    private ClsDatabase db = new();
    private T_Msg Msg;

    // ============================= CALCULATION FIELDS =============================
    
    public string ProductName = "";
    public float taxableAmount = 0;
    public float gst = 0;
    public float netAmount = 0;
    public int GstCategoryCode = 1;

    // ============================= UI REFERENCES =============================
    
    public T_RInput firstReference;
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();

    // ============================= COMPONENT LIFECYCLE METHODS =============================
    
    protected override void OnInitialized()
    {
        // Set default values
        model.dict["Rate"] ??= "0";
        model.dict["Quantity"] ??= "1";
        model.dict["Discount"] ??= "0";
        model.dict["Free"] ??= "0";
        Calculate();
    }

    protected override void OnParametersSet()
    {
        // Set quotation reference & serial number
        model.dict["QuotationNo"] = QuotationNo.ToString();
        model.dict["SrNo"] = SerialNo.ToString();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
            await firstReference.Focus();
            
        // Populate initial values if passed from edit/view
        if (InitialDataRow != null && firstRender)
        {  
            model.Populate(InitialDataRow);
            ProductName = ProductCodeToName(model.dict["ProductCode"]);
            Calculate();
            InitialDataRow = null;
            StateHasChanged();
        }
    }

    // ============================= ELEMENT REFERENCE METHODS =============================
    
    public void getInputReferences(int position, ElementReference eref)
    {
        if (!references.ContainsKey(position))
        {
            references.Add(position, eref);
            Console.WriteLine($"Added reference for position {position}");
        }
        else
        {
            references[position] = eref;
            Console.WriteLine($"Updated reference for position {position}");
        }
    }
    
    private ElementReference GetRef(int idx) 
    {
        return references.ContainsKey(idx) ? references[idx] : default;
    }

    public void OnEnterPressed()
    {
        endReference.FocusAsync();
    }

    // ============================= PRODUCT METHODS =============================
    
    private string ProductCodeToName(string code)
    {
        if (string.IsNullOrEmpty(code)) return "";
        string name = db.GetScalar($"SELECT ProductName FROM ProductMaster WHERE ProductCode='{code}'");
        Console.WriteLine($"ProductCode: {code}, ProductName: {name}");
        return name ?? "";
    }

    private string ProductNameToCode(string name)
    {
        if (string.IsNullOrEmpty(name)) return "";
        string code = db.GetScalar($"SELECT ProductCode FROM ProductMaster WHERE ProductName='{name}'");
        return code ?? "";
    }

    private void OnProductChanged(string productName)
    {
        try
        {
            ProductName = productName;
            model.dict["ProductCode"] = ProductNameToCode(productName);
            Console.WriteLine($"Product changed - ProductCode: {model.dict["ProductCode"]}");
            UpdateProductDetails();
            Calculate();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error in OnProductChanged: {ex.Message}");
        }
    }

    private void UpdateProductDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["ProductCode"]))
        {
            try
            {
                string query = $"SELECT PurchaseRate, GstCategoryCode FROM ProductMaster WHERE ProductCode = '{model.dict["ProductCode"]}'";
                DataTable result = db.GetDataTable(query);
                if (result.Rows.Count > 0)
                {
                    DataRow row = result.Rows[0];
                    model.dict["Rate"] = row["PurchaseRate"] != DBNull.Value ? row["PurchaseRate"].ToString() : "0";
                    GstCategoryCode = Convert.ToInt32(row["GstCategoryCode"]);
                }
                else
                {
                    Console.WriteLine("No product found for the selected code");
                    model.dict["Rate"] = "0";
                    GstCategoryCode = 2;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting product details: {ex.Message}");
                model.dict["Rate"] = "0";
                GstCategoryCode = 2;
            }
        }
    }

    // ============================= CALCULATION METHODS =============================
    
    private void Calculate()
    {
        // Parse values from model
        float rate = float.TryParse(model.dict["Rate"], out float r) ? r : 0;
        float quantity = float.TryParse(model.dict["Quantity"], out float q) ? q : 0;
        float discount = float.TryParse(model.dict["Discount"], out float d) ? d : 0;
        float free = float.TryParse(model.dict["Free"], out float f) ? f : 0;

        // Calculate amounts
        float gstPercent = GetGstPercent();
        float gross = rate * quantity;
        taxableAmount = gross - discount - (rate * free);
        gst = taxableAmount * gstPercent / 100f;
        netAmount = taxableAmount + gst;
    }

    private float GetGstPercent() => GstCategoryCode switch
    {
        1 => 0f,    // 0% GST
        2 => 5f,    // 5% GST
        3 => 12f,   // 12% GST
        4 => 18f,   // 18% GST
        5 => 28f,   // 28% GST
        _ => 0f     // Default to 0%
    };

    public void OnGstCategoryChanged(string value)
    {
        GstCategoryCode = Convert.ToInt32(value);
        OnChange("");
    }

    public void OnChange(string _)
    {
        Console.WriteLine("Change In Details");
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    // ============================= CRUD OPERATIONS =============================
    
    public async Task HandleRemove()
    {
        Console.WriteLine($"Removing row with SerialNo: {SerialNo}");
        await OnRemove.InvokeAsync(SerialNo);
    }

    public bool SaveDetail()
    {
        try
        {
            Console.WriteLine($"Saving detail {SerialNo}");
            
            // Set required fields
            model.dict["QuotationNo"] = QuotationNo.ToString();
            model.dict["SrNo"] = SerialNo.ToString();
            
            // Validate required data
            if (string.IsNullOrEmpty(model.dict["ProductCode"]) || model.dict["ProductCode"] == "0")
            {
                Console.WriteLine("Cannot save - no product selected");
                return false;
            }
            
            // Recalculate before saving
            Calculate();
            
            // Set GST fields
            float percent = GetGstPercent();
            string pct = percent.ToString("F0");
            model.dict[$"GST{pct}APPAMOUNT"] = taxableAmount.ToString("F2");
            model.dict[$"CGST{pct}AMOUNT"] = (gst / 2).ToString("F2");
            model.dict[$"SGST{pct}AMOUNT"] = (gst / 2).ToString("F2");
            
            // Save to database
            bool saved;
            if (transaction != null)
            {
                model.Save(transaction);
                saved = true;
            }
            else
            {
                saved = model.Save();
            }
            
            if (saved)
            {
                Console.WriteLine($"Detail {SerialNo} saved successfully");
            }
            else
            {
                Console.WriteLine($"Failed to save detail {SerialNo}");
            }
            
            return saved;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving detail {SerialNo}: {ex.Message}");
            return false;
        }
    }

    // ============================= PUBLIC GETTER METHODS =============================
    
    public float GetTotalAmount() => taxableAmount;
    public float GetGstAmount() => gst;
}