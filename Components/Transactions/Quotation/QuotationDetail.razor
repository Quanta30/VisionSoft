@using System.Data
@namespace VisionSoft.Components.Transactions.Quotation
@using Microsoft.AspNetCore.Components

<T_Msg @ref="Msg"/>
<tr>
    <!-- Remove Button -->
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    
    <!-- Serial Number -->
    <td>
        @SerialNo
    </td>

    <!-- Product Selection -->
    <td>
        <T_RInput Title="" Layout="3" TableName="PhysicalStockView" 
                  PrimaryColumn="ProductName" DisplayColumn="ProductName" 
                  Value=@ProductName ValueChanged="OnStockChanged"
                  GetInputReference="@((eref) => getInputReferences(0, eref))" 
                  NextReference="@(GetRef(1))" 
                  @ref="firstReference"/>
    </td>
    
    <!-- Rate Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number" 
                     GetInputReference="@((eref) => getInputReferences(1, eref))" 
                     NextReference="@(GetRef(2))"/>
        </div>
    </td>

    <!-- Quantity Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" 
                     Placeholder="" ChangeFunction="OnQuantityChange" Type="Number" 
                     GetInputReference="@((eref) => getInputReferences(2, eref))" 
                     NextReference="@(GetRef(3))"/>
        </div>
    </td>

    <!-- Discount Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Discount"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number" 
                     GetInputReference="@((eref) => getInputReferences(3, eref))" 
                     NextReference="@(GetRef(4))"/>
        </div>
    </td>

    <!-- Free Quantity -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Free"]" 
                     Placeholder="" ChangeFunction="OnChange" Type="Number"
                     GetInputReference="@((eref) => getInputReferences(4, eref))" 
                     NextReference="@(GetRef(5))"/>
        </div>
    </td>

    <!-- GST Category Dropdown -->
    <td>
        <div style="width:70px">
            <T_Select Value="@GstCategoryCode.ToString()" 
                      Options="1:0% GST,2:5% GST,3:12% GST,4:18% GST,5:28% GST"
                      ValueChanged="OnGstCategoryChanged"
                      ColSize="col-md-3" Layout="2"
                      GetInputReference="@((eref) => getInputReferences(5, eref))" 
                      NextReference="@endReference"
                      OnEnterPressed="OnEnterPressed"/>
        </div>
    </td>

    <!-- Taxable Amount (ReadOnly) -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" Value="@taxableAmount.ToString("F2")" 
                     ReadOnly="true" Placeholder=""/>
        </div>
    </td>

    <!-- CGST/SGST Display -->
    <td>
        @(gst > 0 ? (gst / 2).ToString("F2") : "0.00")
    </td>

    <!-- Total GST -->
    <td>
        @gst.ToString("F2")
    </td>

    <!-- Net Amount -->
    <td>
        @netAmount.ToString("F2")
    </td>
</tr>

@code {
    // ============================= PARAMETERS =============================
    
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public int QuotationNo { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }
    [Parameter] public ElementReference endReference { get; set; }
    [Parameter] public Transaction transaction { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }

    // ============================= MODEL & HELPERS =============================
    
    public Model model = new("QuotationDetails", "");
    private ClsDatabase db = new();
    private Utilities utilities = new();
    private T_Msg Msg;

    // ============================= CALCULATION FIELDS =============================
    
    public float taxableAmount = 0;
    public float gst = 0;
    public float netAmount = 0;
    public int GstCategoryCode = 1;
    public string ProductName;

    // ============================= UI REFERENCES =============================
    
    public T_RInput firstReference;
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();

    // ============================= COMPONENT LIFECYCLE METHODS =============================
    
    protected override void OnInitialized()
    {
        // Set default values
        model.dict["Rate"] ??= "0";
        model.dict["Quantity"] ??= "1";
        model.dict["Discount"] ??= "0";
        model.dict["Free"] ??= "0";
        Calculate();
    }

    protected override void OnParametersSet()
    {
        // Set quotation reference & serial number
        model.dict["QuotationNo"] = QuotationNo.ToString();
        model.dict["SrNo"] = SerialNo.ToString();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            Console.WriteLine($"QuotationDetail {SerialNo}: First render, focusing firstReference");
            if (firstReference != null )
            {
                await firstReference.Focus();
            }
        }
            
        // Populate initial values if passed from edit/view
        if (InitialDataRow != null && firstRender)
        {  
            model.Populate(InitialDataRow);
            ProductName = db.GetScalar($"select ProductName from ProductMaster where ProductCode = {model.dict["ProductCode"]}");
            
            // Determine GstCategoryCode from non-zero GST fields
            if (float.TryParse(model.dict["GST5APPAMOUNT"], out float gst5) && gst5 > 0) 
                GstCategoryCode = 2;
            else if (float.TryParse(model.dict["GST12APPAMOUNT"], out float gst12) && gst12 > 0) 
                GstCategoryCode = 3;
            else if (float.TryParse(model.dict["GST18APPAMOUNT"], out float gst18) && gst18 > 0) 
                GstCategoryCode = 4;
            else if (float.TryParse(model.dict["GST28APPAMOUNT"], out float gst28) && gst28 > 0) 
                GstCategoryCode = 5;
            else 
                GstCategoryCode = 1;
            
            Calculate();
            InitialDataRow = null;
            StateHasChanged();
        }
    }

    // ============================= ELEMENT REFERENCE METHODS =============================
    
    public void getInputReferences(int position, ElementReference eref)
    {
        if (!references.ContainsKey(position))
        {
            references.Add(position, eref);
            Console.WriteLine($"QuotationDetail {SerialNo}: Added reference for position {position}, Id: {eref}");
        }
        else
        {
            references[position] = eref;
            Console.WriteLine($"QuotationDetail {SerialNo}: Updated reference for position {position}, Id: {eref}");
        }
    }
    
    private ElementReference GetRef(int idx) 
    {
        bool hasRef = references.ContainsKey(idx);
        Console.WriteLine($"QuotationDetail {SerialNo}: GetRef({idx}) called, exists: {hasRef}, Id: {(hasRef ? references[idx] : "null")}");
        return hasRef ? references[idx] : default;
    }

    public async Task OnEnterPressed()
    {
        Console.WriteLine($"QuotationDetail {SerialNo}: OnEnterPressed, StockName: {ProductName}");
        if (ProductName == "" || ProductName == null || !IsValidQuantity(out _))
        {
                await endReference.FocusAsync();
                await OnRemove.InvokeAsync(SerialNo);
        }
        else
        {
            await OnAdd.InvokeAsync();
        }
    }

    // ============================= STOCK & PRODUCT METHODS =============================
    
    public void OnStockChanged(string pname)
    {
        try
        {
            ProductName = pname;
            model.dict["ProductCode"] = db.GetScalar($"Select ProductCode from ProductMaster where ProductName = '{pname}'");
            Console.WriteLine($"Product Code Set to {model.dict["ProductCode"]}");
            UpdateStockDetails();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"QuotationDetail {SerialNo}: Error in OnStockChanged: {ex.Message}");
        }
    }

    private void UpdateStockDetails()
    {
        try
        {
            if (!string.IsNullOrEmpty(model.dict["ProductCode"]) && model.dict["ProductCode"] != "0")
            {
                var result = db.GetDataTable($"SELECT SaleRate, GstCategoryCode FROM PhysicalStock WHERE ProductCode = '{model.dict["ProductCode"]}'");
                if (result.Rows.Count > 0)
                {
                    var row = result.Rows[0];
                    model.dict["Rate"] = row["SaleRate"]?.ToString() ?? "0";
                    GstCategoryCode = Convert.ToInt32(row["GstCategoryCode"]);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"QuotationDetail {SerialNo}: Error getting stock details: {ex.Message}");
            model.dict["Rate"] = "0";
            GstCategoryCode = 1; // Default to 0% GST for quotations
        }
    }

    // ============================= CALCULATION METHODS =============================
    
    private void Calculate()
    {
        // Parse values from model
        float rate = float.TryParse(model.dict["Rate"], out float r) ? r : 0;
        float qty = float.TryParse(model.dict["Quantity"], out float q) ? q : 0;
        float disc = float.TryParse(model.dict["Discount"], out float d) ? d : 0;
        float free = float.TryParse(model.dict["Free"], out float f) ? f : 0;

        // Calculate amounts
        float gross = rate * qty;
        taxableAmount = gross - disc - (rate * free);
        gst = taxableAmount - (taxableAmount * 100) / (100 + GetGstPercent());
        netAmount = taxableAmount;
    }

    private float GetGstPercent() => GstCategoryCode switch
    {
        1 => 0f,    // 0% GST
        2 => 5f,    // 5% GST
        3 => 12f,   // 12% GST
        4 => 18f,   // 18% GST
        5 => 28f,   // 28% GST
        _ => 0f     // Default to 0%
    };

    public void OnGstCategoryChanged(string Value)
    {
        GstCategoryCode = Convert.ToInt32(Value);
        OnChange("");
    }

    public void OnChange(string _) 
    {
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    public void OnQuantityChange(string qty)
    {
        if (string.IsNullOrEmpty(qty))
        {
            model.dict["Quantity"] = "0";
            Msg.Show($"Warning: Quantity cannot be empty for {ProductName}", "danger", "");
        }
        else if (!int.TryParse(qty, out int quantity) || quantity <= 0)
        {
            Msg.Show($"Warning: Invalid quantity '{qty}' for {ProductName}", "danger", "");
        }
        else
        {
            Msg.Clear();
        }
        OnChange("");
    }

    private bool IsValidQuantity(out float quantity)
    {
        if (float.TryParse(model.dict["Quantity"], out quantity) && quantity > 0)
            return true;
        Console.WriteLine($"QuotationDetail {SerialNo}: Invalid quantity '{model.dict["Quantity"]}'");
        Msg.Show($"Error: Quantity must be a valid number greater than 0 for {ProductName}", "danger", "");
        return false;
    }

    // ============================= CRUD OPERATIONS =============================
    
    public async Task HandleRemove() => await OnRemove.InvokeAsync(SerialNo);

    public bool SaveDetail()
    {
        try
        {
            Console.WriteLine($"QuotationDetail {SerialNo}: Saving detail, QuotationNo: {QuotationNo}, ProductCode: {model.dict["ProductCode"]}, Quantity: {model.dict["Quantity"]}");

            // Set required fields
            model.dict["QuotationNo"] = QuotationNo.ToString();
            model.dict["SrNo"] = SerialNo.ToString();

            // Validate required data
            if (string.IsNullOrEmpty(model.dict["ProductCode"]) || model.dict["ProductCode"] == "0")
            {
                Console.WriteLine($"QuotationDetail {SerialNo}: Cannot save - no stock selected");
                return false;
            }

            if (!IsValidQuantity(out float quantity))
            {
                Console.WriteLine($"QuotationDetail {SerialNo}: Cannot save - invalid or empty quantity '{model.dict["Quantity"]}'");
                return false;
            }

            // Recalculate before saving
            Calculate();

            // Clear all GST fields
            string[] gstPercentages = { "0", "5", "12", "18", "28" };
            foreach (string pr in gstPercentages)
            {
                model.dict[$"GST{pr}APPAMOUNT"] = "0";
                model.dict[$"CGST{pr}AMOUNT"] = "0";
                model.dict[$"SGST{pr}AMOUNT"] = "0";
            }

            // Set GST fields (assuming CGST/SGST for quotations, no IGST)
            float percent = GetGstPercent();
            string pct = percent.ToString("F0");
            model.dict[$"GST{pct}APPAMOUNT"] = taxableAmount.ToString("F2");
            model.dict[$"CGST{pct}AMOUNT"] = (gst / 2).ToString("F2");
            model.dict[$"SGST{pct}AMOUNT"] = (gst / 2).ToString("F2");

            // Save to database
            if (transaction != null)
            {
                model.Save(transaction);
                Console.WriteLine($"QuotationDetail {SerialNo}: Saved to transaction");
                return true;
            }
            else
            {
                bool saved = model.Save();
                Console.WriteLine($"QuotationDetail {SerialNo}: Saved directly, success: {saved}");
                return saved;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"QuotationDetail {SerialNo}: Error saving detail: {ex.Message}");
            return false;
        }
    }

    // ============================= PUBLIC GETTER METHODS =============================
    
    public float GetTotalAmount() => taxableAmount;
    public float GetGstAmount() => gst;
}