@using System.Data
@namespace VisionSoft.Components.Transactions.Quotation
@rendermode InteractiveServer
<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    <td>
        @SerialNo
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="ProductMaster" PrimaryColumn="ProductName" DisplayColumn="ProductName" Value="@ProductName" ValueChanged="OnProductChanged"/>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Discount"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Free"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <select class="form-control form-control-sm" value=@GstCategoryCode @onchange="OnGstCategoryChanged">
                <option value="1" selected>0% GST</option>
                <option value="2">5% GST</option>
                <option value="3">12% GST</option>
                <option value="4">18% GST</option>
                <option value="5">28% GST</option>
            </select>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" Value="@taxableAmount.ToString("F2")" ReadOnly="true" Placeholder=""/>
        </div>
    </td>
    <td>
        @(gst > 0 ? (gst/2).ToString("F2") : "0.00")
    </td>
    <td>
        @gst.ToString("F2")
    </td>
    <td>
        @netAmount.ToString("F2")
    </td>
</tr>

@code {
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public int QuotationNo { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }

    private Model model = new Model("QuotationDetails", "");
    private ClsDatabase db = new ClsDatabase();
    public string ProductName = "";
    public float taxableAmount = 0;
    public float gst = 0;
    public float netAmount = 0;
    public int GstCategoryCode = 0;

    protected override void OnParametersSet(){

        if (InitialDataRow != null)
        {
            model.Populate(InitialDataRow);
            ProductName = ProductCodeToName(model.dict["ProductCode"]);
        }
        else
        {
            model.dict["QuotationNo"] = QuotationNo.ToString();
            model.dict["SrNo"] = SerialNo.ToString();
        }
        Calculate();
    }

    private string ProductCodeToName(string code)
    {
        string name = db.GetScalar($"select ProductName from ProductMaster where ProductCode='{code}'");
        Console.WriteLine($"ProductCode: {code}, ProductName: {name}");
        return name;
    }

    private string ProductNameToCode(string name)
    {
        string code = db.GetScalar($"select ProductCode from ProductMaster where ProductName='{name}'");
        return code;
    }

    private void OnProductChanged(string productName)
    {
        try
        {
            string productCode = ProductNameToCode(productName);
            ProductName = productName;
            model.dict["ProductCode"] = productCode;
            Console.WriteLine($"Product changed - ProductCode: {productCode}");
            UpdateProductDetails();
            Calculate();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error in OnProductChanged: {ex.Message}");
        }
    }

    private void UpdateProductDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["ProductCode"]))
        {
            try
            {
                string query = $"SELECT PurchaseRate, GstCategoryCode FROM ProductMaster WHERE ProductCode = '{model.dict["ProductCode"]}'";
                DataTable result = db.GetDataTable(query);
                if (result.Rows.Count > 0)
                {
                    DataRow row = result.Rows[0];
                    model.dict["Rate"] = row["PurchaseRate"] != DBNull.Value ? row["PurchaseRate"].ToString() : "0";
                    GstCategoryCode = Convert.ToInt32(row["GstCategoryCode"]);
                }
                else
                {
                    Console.WriteLine("No product found for the selected code");
                    model.dict["Rate"] = "0";
                    GstCategoryCode = 2;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting product details: {ex.Message}");
                model.dict["Rate"] = "0";
                GstCategoryCode = 2;
            }
        }
    }

    public async Task HandleRemove()
    {
        Console.WriteLine($"Removing row with SerialNo: {SerialNo}");
        await OnRemove.InvokeAsync(SerialNo);
    }

    public bool SaveDetail()
    {
        try
        {
            Console.WriteLine($"Saving detail {SerialNo}");
            model.dict["QuotationNo"] = QuotationNo.ToString();
            model.dict["SrNo"] = SerialNo.ToString();
            if (string.IsNullOrEmpty(model.dict["ProductCode"]) || model.dict["ProductCode"] == "0")
            {
                Console.WriteLine("Cannot save - no product selected");
                return false;
            }
            Calculate();
            string percent = GetGstPercent().ToString();
            model.dict[$"GST{percent}APPAMOUNT"] = taxableAmount.ToString("F2");
            model.dict[$"CGST{percent}AMOUNT"] = (gst / 2).ToString("F2");
            model.dict[$"SGST{percent}AMOUNT"] = (gst / 2).ToString("F2");
            bool saved = model.Save();
            if (saved)
            {
                Console.WriteLine($"Detail {SerialNo} saved successfully");
            }
            else
            {
                Console.WriteLine($"Failed to save detail {SerialNo}");
            }
            return saved;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving detail {SerialNo}: {ex.Message}");
            return false;
        }
    }

    private float GetGstPercent()
    {
        return GstCategoryCode switch
        {
            1 => 0f,
            2 => 5f,
            3 => 12f,
            4 => 18f,
            5 => 28f,
            _ => 0f
        };
    }

    private void Calculate()
    {
        if (float.TryParse(model.dict["Rate"], out float rate) &&
            float.TryParse(model.dict["Quantity"], out float quantity) &&
            float.TryParse(model.dict["Discount"], out float discount) &&
            float.TryParse(model.dict["Free"], out float free))
        {
            float gstPercent = GetGstPercent();
            float gross = rate * quantity;
            taxableAmount = gross - discount - (rate * free);
            gst = taxableAmount * gstPercent / 100f;
            netAmount = taxableAmount + gst;
        }
        else
        {
            taxableAmount = 0;
            gst = 0;
            netAmount = 0;
        }
    }

    public void OnGstCategoryChanged(ChangeEventArgs e){
        GstCategoryCode = Convert.ToInt32(e.Value);
        OnChange(GstCategoryCode.ToString());
    }
    public void OnChange(string value)
    {
        Console.WriteLine("Change In Details");
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    public float GetTotalAmount() => netAmount;
    public float GetGstAmount() => gst;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["Rate"])) model.dict["Rate"] = "0";
        if (string.IsNullOrEmpty(model.dict["Quantity"])) model.dict["Quantity"] = "1";
        if (string.IsNullOrEmpty(model.dict["Discount"])) model.dict["Discount"] = "0";
        if (string.IsNullOrEmpty(model.dict["Free"])) model.dict["Free"] = "0";

        Calculate();
    }
}