@page "/NewEnquiry"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.NewEnquiry
@rendermode InteractiveServer 

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="NewEnquiryHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="New Enquiry">
<ChildContent>
    <T_Row>
        <T_Input Title="Enquiry No *" ReadOnly=true @bind-Value="@model.dict["EnquiryNo"]" ColSize="col-md-3"/>
        <T_Input Title="Enquiry Date" Type="date" @bind-Value="@model.dict["EnquiryDate"]" ColSize="col-md-3"/>
        <T_Input Title="Demo Date" Type="date" @bind-Value="@model.dict["DemoDate"]" ColSize="col-md-3"/>
        <T_Input Title="Reminder Date" Type="date" @bind-Value="@model.dict["ReminderDate"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Input Title="Party Name *" @bind-Value="@model.dict["PartyName"]" ColSize="col-md-4"/>
        <T_Input Title="Contact Person" @bind-Value="@model.dict["ContactPerson"]" ColSize="col-md-4"/>
        <T_Input Title="Phone No" @bind-Value="@model.dict["PhoneNo"]" ColSize="col-md-4"/>
    </T_Row>
    <T_Row>
        <T_Input Title="Mobile No" @bind-Value="@model.dict["MobileNo"]" ColSize="col-md-4"/>
        <T_Input Title="City" @bind-Value="@model.dict["City"]" ColSize="col-md-4"/>
        <T_RInput Title="Product" Layout="1" TableName="ProductMaster" PrimaryColumn="ProductCode" DisplayColumn="ProductName" Value="@model.dict["ProductCode"]" ValueChanged="OnProductChanged" ColSize="col-md-4"/>
    </T_Row>
    <T_Row>
        <T_Textarea Title="Address" @bind-Value="@model.dict["Address"]" ColSize="col-md-12"/>
    </T_Row>
    <T_Row>
        <T_Input Title="Reference Name" @bind-Value="@model.dict["ReferenceName"]" ColSize="col-md-6"/>
        <T_Input Title="Reference Contact No" @bind-Value="@model.dict["ReferenceContactNo"]" ColSize="col-md-6"/>
    </T_Row>
    <T_Row>
        <T_RInput Title="Marketing Person" Layout="1" TableName="EmployeeMaster" PrimaryColumn="MarketingPersonCode" DisplayColumn="EmployeeName" Value="@model.dict["MarketingPersonCode"]" ValueChanged="OnMarketingPersonChanged" ColSize="col-md-12"/>
    </T_Row>
    <T_Row>
        <T_Checkbox Title="Demo Required" @bind-Value="@model.dict["Demo"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Demo Completed" @bind-Value="@model.dict["DemoCompleted"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Hardware Requirement" @bind-Value="@model.dict["HardwareRequirement"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Call Closed" @bind-Value="@model.dict["CallClosed"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Textarea Title="Remarks" @bind-Value="@model.dict["Remark"]" ColSize="col-md-12"/>
    </T_Row>
    <TableView TableName="Enquiry Status Updates" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Sr. No.</th>
            <th>Current Status</th>
            <th>Status Date</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i<details.Count; i++){
                <NewEnquiryDetail SerialNo=@(i+1) 
                                EnquiryNo=@model.dict["EnquiryNo"] 
                                OnRemove="HandleRemove" model="@details[i]"/> 
            }
        </TableRows>
        <TableFooter>
            Total Status Updates: @details.Count
        </TableFooter>
    </TableView>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style="" OnClick="HandleClear"/>
    <T_Button Text="View" Style="" OnClick="HandleView"/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>

</T_Frm>

@code{
    //ELEMENT REFERENCES
    private T_Msg Msg;
    public DotNetObjectReference<NewEnquiry> dotNetRef;
    
    //Models and Class Objects
    Model model = new Model("NewEnquiryHead", "EnquiryNo");
    List<Model> details = new List<Model>();
    ClsDatabase db = new ClsDatabase();
   
    //BooleanValues
    private bool isViewing = false;
    private bool isAddClicked = false;
    private bool isEditing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            Console.WriteLine("First Render");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    private void OnProductChanged(string productCode)
    {
        model.dict["ProductCode"] = productCode;
        StateHasChanged();
    }

    private void OnMarketingPersonChanged(string marketingPersonCode)
    {
        model.dict["MarketingPersonCode"] = marketingPersonCode;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        Model detail = new Model("NewEnquiryDetails", "");
        details.Add(detail);
        StateHasChanged();
    }

    public void HandleEdit(DataRow row){
        HandleClear();
        isEditing = true;
        model.Populate(row);
        Console.WriteLine(model.dict["EnquiryNo"]);
        DataTable dataTable = db.GetDataTable($"Select * from NewEnquiryDetails where EnquiryNo='{model.dict["EnquiryNo"]}' ORDER BY SrNo");
        Console.WriteLine(dataTable.Rows.Count);
        foreach(DataRow row1 in dataTable.Rows){
            Model detail = new Model("NewEnquiryDetails", "");
            Console.WriteLine("Adding Detail");
            detail.Populate(row1);
            details.Add(detail);
        }
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleSave(){
        Console.WriteLine("Saving");
        
        // Validation
        if (string.IsNullOrEmpty(model.dict["PartyName"]))
        {
            await Msg.Error("Party Name is required.");
            return;
        }

        try{
            bool er = model.Save();
            foreach(Model detail in details){
                if(!er)throw new Exception();
                er = detail.Save();
            }
            if(!er)throw new Exception();
            await Msg.Success();
        }
        catch(Exception e){
            await Msg.SaveError();
        }
    }

    [JSInvokable]
    public void HandleClear(){
        Console.WriteLine("Clear Form");
        model.Clear();
        details.Clear();    
        isEditing=false;
        isAddClicked=false;
        isViewing=false;  
        StateHasChanged();
    }

    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
    }

    public void HandleDelete(DataRow row){
        string pk = row["EnquiryNo"].ToString();
        db.ExecuteQuery($"Delete From NewEnquiryHead where EnquiryNo='{pk}'");
        db.ExecuteQuery($"Delete From NewEnquiryDetails where EnquiryNo='{pk}'");
    }

    public void HandleRemove(int i){
        Console.WriteLine($"Removing Row in Parent {i}");
        if (i >= 0 && i < details.Count)
        {
            details.RemoveAt(i);
            Console.WriteLine($"Count At {i}");
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        // Initialize default values
        if (string.IsNullOrEmpty(model.dict["Demo"])) model.dict["Demo"] = "false";
        if (string.IsNullOrEmpty(model.dict["DemoCompleted"])) model.dict["DemoCompleted"] = "false";
        if (string.IsNullOrEmpty(model.dict["HardwareRequirement"])) model.dict["HardwareRequirement"] = "false";
        if (string.IsNullOrEmpty(model.dict["CallClosed"])) model.dict["CallClosed"] = "false";
        if (string.IsNullOrEmpty(model.dict["EnquiryDate"])) model.dict["EnquiryDate"] = DateTime.Now.ToString("yyyy-MM-dd");
    }
}