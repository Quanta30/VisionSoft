@page "/adjustment"
@inject IJSRuntime JS
@rendermode InteractiveServer
@using System.Data
@using VisionSoft

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="AdjustmentHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Stock Adjustment">
<ChildContent>
    <T_Row>
        <T_Input Title="Adjustment No. *" ReadOnly @bind-Value='model.dict["AdjustmentNo"]' />
        <T_Textarea Title="Narration *" Rows=1 Type="textarea" MaxLength=200 ColSize="col-md-8" Required="true" @bind-Value='model.dict["Narration"]' />
    </T_Row>
    
    <T_Row>
        <T_Input Title="Adjustment Date" Type="Date" @bind-Value='model.dict["AdjustmentDate"]' />
        <T_Checkbox Title="Cancelled" @bind-Value='model.dict["Cancelled"]' />        
    </T_Row>
    
    <T_Row>
        <T_Button Text="Add Item" btnType="Save" OnClick="HandleAdd"/>
        
        @if(isAddClicked){
            <FrmView TableName="PhysicalStockView" OnClosed="HandleClose" SelectClicked="HandleSelect"/>
        }
        
        <T_TableView dataTable="dt">
            <NewColumnHeader>
                <th style="width: 100px;">Actions</th>
                <th style="width: 200px;">Product Name</th>
                <th style="width: 100px;">Current Qty</th>
                <th style="width: 120px;">Adj. Quantity</th>
                <th style="width: 120px;">Adjustment Type</th>
                <th style="width: 100px;">Rate</th>
                <th style="width: 100px;">Amount</th>
            </NewColumnHeader>
            <NewColumnValue Context="row">
                <td>
                    <T_Button Text="Remove" 
                              btnType="Danger"
                              OnClick="() => HandleRemove(row.RowIndex)" />
                </td>
                <td>@dt.Rows[row.RowIndex]["ProductName"]</td>
                <td>@dt.Rows[row.RowIndex]["CurrentQuantity"]</td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.001"
                           min="-9999"
                           max="9999"
                           placeholder="0.000"
                           value='@detailsList[row.RowIndex].dict["Quantity"]'
                           @onchange="(e) => OnQuantityChange(row.RowIndex, e)"
                           style="width: 100px;" />
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            @bind='detailsList[row.RowIndex].dict["AdjustmentType"]'
                            style="width: 120px;">
                        <option value="">Select Type</option>
                        <option value="Add">Add Stock</option>
                        <option value="Less">Reduce Stock</option>
                        <option value="Damage">Damage</option>
                        <option value="Transfer">Transfer</option>
                        <option value="Lost">Lost</option>
                    </select>
                </td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.01"
                           min="0"
                           placeholder="0.00"
                           value='@detailsList[row.RowIndex].dict["Rate"]'
                           @onchange="(e) => OnRateChange(row.RowIndex, e)"
                           style="width: 100px;" />
                </td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm"
                           step="0.01"
                           readonly
                           placeholder="0.00"
                           value="@CalculateRowAmount(row.RowIndex)"
                           style="width: 100px; background-color: #f8f9fa;" />
                </td>
            </NewColumnValue>
        </T_TableView>
        
        @* <!-- Net Amount Display -->
        <T_SummaryCard Title="Adjustment Summary" 
                    SummaryItems="@GetSummaryItems()" 
                    CardClass="border-primary" /> *@
    </T_Row>
</ChildContent>
    <CardFooterContent>
        <T_Button Text="Save" spanText="Saving..." OnClick="HandleSave" btnType="Save"/>
        <T_Button Text="Clear" OnClick="HandleClear"/>
        <T_Button Text="View" OnClick="HandleView"/>
    </CardFooterContent>
</T_Frm>

@code{
    Model model = new Model("AdjustmentHead", "AdjustmentNo");
    List<Model> detailsList = new List<Model>();  // ✅ Changed from DModels to detailsList
    ClsDatabase db = new ClsDatabase();
    DataTable? dt = null;

    private T_Msg? Msg;
    public DotNetObjectReference<StockAdjustment>? dotNetRef;

    //Boolean Variables
    private bool isAddClicked = false;
    private bool isViewing = false;
    private bool isEditing = false;

    protected override void OnInitialized()
    {
        // ✅ Simplified DataTable structure - only ProductName, CurrentQuantity, PurchaseRate
        dt = new DataTable();
        dt.Columns.Add("ProductName", typeof(string));
        dt.Columns.Add("CurrentQuantity", typeof(decimal));
        dt.Columns.Add("PurchaseRate", typeof(decimal));
        
        // Set default values for main form
        model.dict["AdjustmentDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        model.dict["NetAmount"] = "0";
        model.dict["Cancelled"] = "0";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            Console.WriteLine("OnAfterRenderAsync executed");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    //Button Handles
    [JSInvokable]
    public void HandleAdd(){
        Console.WriteLine("Handling Add Button");
        isAddClicked = !isAddClicked;
        StateHasChanged();
    }
    
    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
        StateHasChanged();
    }
    
    public void HandleSelect(DataRow row1){
        try
        {
            // ✅ Create new adjustment detail with clear naming
            Model detail = new Model("AdjustmentDetails", "");
            
            // Get ProductName from the selected row
            string productName = row1["ProductName"]?.ToString() ?? "";
            
            if (string.IsNullOrEmpty(productName))
            {
                Msg?.Show("Product name is missing from selected item.", "error", "");
                return;
            }
            
            // ✅ Get only required stock details
            string query = $@"
                SELECT ps.StockId, pm.ProductName, ps.Quantity as CurrentQuantity, ps.PurchaseRate
                FROM PhysicalStock ps 
                INNER JOIN ProductMaster pm ON ps.ProductCode = pm.ProductCode 
                WHERE pm.ProductName = '{productName}'";
            
            DataTable stockTable = db.GetDataTable(query);
            
            if (stockTable.Rows.Count == 0)
            {
                Msg?.Show($"No stock found for product: {productName}", "warning", "");
                return;
            }
            
            DataRow stockRow = stockTable.Rows[0];
            
            // ✅ Check if item already exists in adjustment
            string stockId = stockRow["StockId"]?.ToString() ?? "";
            bool alreadyExists = detailsList.Any(d => d.dict["StockID"] == stockId);
            
            if (alreadyExists)
            {
                Msg?.Show("This item is already added to the adjustment.", "warning", "");
                isAddClicked = false;
                StateHasChanged();
                return;
            }
            
            // ✅ Create detail model with purchase rate as default
            detail.dict["StockID"] = stockId;
            detail.dict["AdjustmentType"] = "";
            detail.dict["Quantity"] = "0";
            detail.dict["Rate"] = stockRow["PurchaseRate"]?.ToString() ?? "0";  // ✅ Initialize with PurchaseRate
            detail.dict["AdjustmentNo"] = model.dict["AdjustmentNo"];
            detail.dict["SrNo"] = (detailsList.Count + 1).ToString();
            
            // Add to list
            detailsList.Add(detail);
            
            // ✅ Add row to display DataTable with only required data
            var newRow = dt!.NewRow();
            newRow["ProductName"] = stockRow["ProductName"];
            newRow["CurrentQuantity"] = stockRow["CurrentQuantity"];
            newRow["PurchaseRate"] = stockRow["PurchaseRate"];
            
            dt.Rows.Add(newRow);
            
            isAddClicked = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleSelect: {ex.Message}");
            Msg?.Show($"Error selecting item: {ex.Message}", "error", "");
            isAddClicked = false;
            StateHasChanged();
        }
    }
    
    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }
    
    public void HandleEdit(DataRow row){
        try
        {
            if (row["AdjustmentNo"] != null)
            {
                model.PopulateViaKey(Convert.ToInt32(row["AdjustmentNo"]));
                LoadAdjustmentDetails(Convert.ToInt32(row["AdjustmentNo"]));
                StateHasChanged();
            }
            isEditing = true;
            isViewing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleEdit: {ex.Message}");
        }
    }  
    
    public void HandleDelete(){
        try
        {
            if (!string.IsNullOrEmpty(model.dict["AdjustmentNo"]))
            {
                // ✅ Reverse stock adjustments before deleting
                ReverseStockAdjustments();
                
                // Delete details first
                string deleteDetailsQuery = $"DELETE FROM AdjustmentDetails WHERE AdjustmentNo = {model.dict["AdjustmentNo"]}";
                db.ExecuteQuery(deleteDetailsQuery);
                
                // Delete header
                model.Delete(Convert.ToInt32(model.dict["AdjustmentNo"]));
                
                // Clear form
                HandleClear();
                
                Msg?.Show("Adjustment deleted successfully!", "success", "");
            }
        }
        catch (Exception ex)
        {
            Msg?.Show($"Error deleting adjustment: {ex.Message}", "error", "");
        }
    }
    
    public void HandleRemove(int rowIndex){
        try
        {
            if (rowIndex >= 0 && rowIndex < detailsList.Count)
            {
                // Remove from both lists
                detailsList.RemoveAt(rowIndex);
                
                if (dt != null && rowIndex < dt.Rows.Count)
                {
                    dt.Rows.RemoveAt(rowIndex);
                }
                
                // Update serial numbers
                for (int i = 0; i < detailsList.Count; i++)
                {
                    detailsList[i].dict["SrNo"] = (i + 1).ToString();
                }
                
                // Update net amount
                model.dict["NetAmount"] = CalculateNetAmount().ToString("F2");
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleRemove: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public void HandleSave(){
        try
        {
            if (detailsList.Count == 0)
            {
                Msg?.Show("Please add at least one item to adjust.", "warning", "");
                return;
            }
            
            // Validate required fields
            if (string.IsNullOrEmpty(model.dict["Narration"]))
            {
                Msg?.Show("Please enter narration.", "warning", "");
                return;
            }
            
            // ✅ Validate adjustment types and quantities
            for (int i = 0; i < detailsList.Count; i++)
            {
                if (string.IsNullOrEmpty(detailsList[i].dict["AdjustmentType"]))
                {
                    Msg?.Show($"Please select adjustment type for item {i + 1}.", "warning", "");
                    return;
                }
                
                decimal adjQty = Convert.ToDecimal(detailsList[i].dict["Quantity"] ?? "0");
                if (adjQty == 0)
                {
                    Msg?.Show($"Please enter adjustment quantity for item {i + 1}.", "warning", "");
                    return;
                }
            }
            
            // Update net amount
            model.dict["NetAmount"] = CalculateNetAmount().ToString("F2");
            
            // Save header
            bool headerSaved = false;
            if (!isEditing)
            {
                headerSaved = model.Save();
            }
            else
            {
                headerSaved = model.Update();
            }
            
            if (headerSaved)
            {
                // Delete existing details if updating
                if (isEditing && !string.IsNullOrEmpty(model.dict["AdjustmentNo"]))
                {
                    // ✅ Reverse previous adjustments first
                    ReverseStockAdjustments();
                    
                    string deleteQuery = $"DELETE FROM AdjustmentDetails WHERE AdjustmentNo = {model.dict["AdjustmentNo"]}";
                    db.ExecuteQuery(deleteQuery);
                }
                
                // Save details
                bool allDetailsSaved = true;
                foreach (var detail in detailsList)
                {
                    detail.dict["AdjustmentNo"] = model.dict["AdjustmentNo"];
                    if (!detail.Save())
                    {
                        allDetailsSaved = false;
                        break;
                    }
                }
                
                if (allDetailsSaved)
                {
                    // ✅ Update physical stock after saving
                    UpdatePhysicalStock();
                    
                    Msg?.Show("Stock adjustment saved successfully!", "success", "");
                    HandleClear();
                }
                else
                {
                    Msg?.Show("Error saving adjustment details.", "error", "");
                }
            }
            else
            {
                Msg?.Show("Error saving adjustment header.", "error", "");
            }
        }
        catch (Exception ex)
        {
            Msg?.Show($"Error saving adjustment: {ex.Message}", "error", "");
        }
    }
    
    [JSInvokable]
    public void HandleClear(){
        isEditing = false;
        isAddClicked = false;
        isViewing = false;
        model.Clear();
        detailsList.Clear();
        dt?.Clear();
        model.dict["AdjustmentDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        model.dict["NetAmount"] = "0";
        model.dict["Cancelled"] = "0";
        StateHasChanged();
    }
    
    // ✅ Enhanced LoadAdjustmentDetails with simplified structure
    private void LoadAdjustmentDetails(int adjustmentNo)
    {
        try
        {
            detailsList.Clear();
            dt?.Clear();
            
            string query = $@"
                SELECT ad.*, pm.ProductName, ps.Quantity as CurrentQuantity, ps.PurchaseRate
                FROM AdjustmentDetails ad 
                INNER JOIN PhysicalStock ps ON ad.StockID = ps.StockId 
                INNER JOIN ProductMaster pm ON ps.ProductCode = pm.ProductCode
                WHERE ad.AdjustmentNo = {adjustmentNo}
                ORDER BY ad.SrNo";
            
            DataTable detailsTable = db.GetDataTable(query);
            
            foreach (DataRow row in detailsTable.Rows)
            {
                Model detail = new Model("AdjustmentDetails", "");
                detail.dict["AdjustmentNo"] = adjustmentNo.ToString();
                detail.dict["StockID"] = row["StockID"]?.ToString() ?? "";
                detail.dict["AdjustmentType"] = row["AdjustmentType"]?.ToString() ?? "";
                detail.dict["Quantity"] = row["Quantity"]?.ToString() ?? "0";
                detail.dict["Rate"] = row["Rate"]?.ToString() ?? "0";
                detail.dict["SrNo"] = row["SrNo"]?.ToString() ?? "";
                
                detailsList.Add(detail);
                
                // Add to display table with simplified data
                var newRow = dt!.NewRow();
                newRow["ProductName"] = row["ProductName"];
                newRow["CurrentQuantity"] = row["CurrentQuantity"];
                newRow["PurchaseRate"] = row["PurchaseRate"];
                
                dt.Rows.Add(newRow);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading adjustment details: {ex.Message}");
        }
    }
    
    // ✅ Update Physical Stock based on adjustments
    private void UpdatePhysicalStock()
    {
        try
        {
            for (int i = 0; i < detailsList.Count; i++)
            {
                string stockId = detailsList[i].dict["StockID"];
                string adjustmentType = detailsList[i].dict["AdjustmentType"];
                decimal adjustmentQty = Convert.ToDecimal(detailsList[i].dict["Quantity"] ?? "0");
                
                if (string.IsNullOrEmpty(stockId) || adjustmentQty == 0)
                    continue;
                
                // Get current quantity
                string currentQtyQuery = $"SELECT Quantity FROM PhysicalStock WHERE StockId = {stockId}";
                decimal currentQty = Convert.ToDecimal(db.GetScalar(currentQtyQuery));
                
                decimal newQty = currentQty;
                
                // ✅ Apply adjustment based on type
                switch (adjustmentType.ToLower())
                {
                    case "add":
                        newQty = currentQty + Math.Abs(adjustmentQty);
                        break;
                    case "less":
                    case "damage":
                    case "lost":
                    case "transfer":
                        newQty = currentQty - Math.Abs(adjustmentQty);
                        break;
                }
                
                // Ensure quantity doesn't go below zero
                if (newQty < 0)
                {
                    Msg.Show($"Warning: Stock quantity for StockId {stockId} would go negative. Setting to 0.", "danger", "");
                    newQty = 0;
                }
                
                // Update physical stock
                string updateQuery = $"UPDATE PhysicalStock SET Quantity = {newQty} WHERE StockId = {stockId}";
                db.ExecuteQuery(updateQuery);
                
                Console.WriteLine($"Updated StockId {stockId}: {currentQty} -> {newQty} (Adjustment: {adjustmentType} {adjustmentQty})");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating physical stock: {ex.Message}");
            throw; // Re-throw to handle in calling method
        }
    }
    
    // ✅ Reverse stock adjustments when deleting/updating
    private void ReverseStockAdjustments()
    {
        try
        {
            if (string.IsNullOrEmpty(model.dict["AdjustmentNo"]))
                return;
            
            string query = $"SELECT StockID, AdjustmentType, Quantity FROM AdjustmentDetails WHERE AdjustmentNo = {model.dict["AdjustmentNo"]}";
            DataTable existingDetails = db.GetDataTable(query);
            
            foreach (DataRow row in existingDetails.Rows)
            {
                string stockId = row["StockID"]?.ToString() ?? "";
                string adjustmentType = row["AdjustmentType"]?.ToString() ?? "";
                decimal adjustmentQty = Convert.ToDecimal(row["Quantity"] ?? "0");
                
                if (string.IsNullOrEmpty(stockId) || adjustmentQty == 0)
                    continue;
                
                // Get current quantity
                string currentQtyQuery = $"SELECT Quantity FROM PhysicalStock WHERE StockId = {stockId}";
                decimal currentQty = Convert.ToDecimal(db.GetScalar(currentQtyQuery));
                
                decimal newQty = currentQty;
                
                // ✅ Reverse the adjustment
                switch (adjustmentType.ToLower())
                {
                    case "add":
                        newQty = currentQty - Math.Abs(adjustmentQty);
                        break;
                    case "less":
                    case "damage":
                    case "lost":
                    case "transfer":
                        newQty = currentQty + Math.Abs(adjustmentQty);
                        break;
                }
                
                // Ensure quantity doesn't go below zero
                if (newQty < 0)
                {
                    Console.WriteLine($"Warning: Reversing adjustment for StockId {stockId} would result in negative quantity. Setting to 0.");
                    newQty = 0;
                }
                
                // Update physical stock
                string updateQuery = $"UPDATE PhysicalStock SET Quantity = {newQty} WHERE StockId = {stockId}";
                db.ExecuteQuery(updateQuery);
                
                Console.WriteLine($"Reversed StockId {stockId}: {currentQty} -> {newQty}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reversing stock adjustments: {ex.Message}");
        }
    }
    
    private decimal CalculateRowAmount(int rowIndex)
    {
        try
        {
            if (rowIndex >= 0 && rowIndex < detailsList.Count)
            {
                decimal quantity = Convert.ToDecimal(detailsList[rowIndex].dict["Quantity"] ?? "0");
                decimal rate = Convert.ToDecimal(detailsList[rowIndex].dict["Rate"] ?? "0");
                return Math.Abs(quantity * rate);
            }
        }
        catch
        {
            // Return 0 if conversion fails
        }
        return 0;
    }
    
    private void CalculateAmount(int rowIndex)
    {
        // Trigger UI update for amount calculation
        StateHasChanged();
    }
    
    private decimal CalculateNetAmount()
    {
        decimal total = 0;
        for (int i = 0; i < detailsList.Count; i++)
        {
            total += CalculateRowAmount(i);
        }
        return total;
    }

    public void OnQuantityChange(int index, ChangeEventArgs e){
        if (index >= 0 && index < detailsList.Count)
        {
            detailsList[index].dict["Quantity"] = e.Value?.ToString() ?? "0";
            CalculateAmount(index);
        }
    }

    public void OnRateChange(int index, ChangeEventArgs e){
        if (index >= 0 && index < detailsList.Count)
        {
            detailsList[index].dict["Rate"] = e.Value?.ToString() ?? "0";
            CalculateAmount(index);
        }
    }


    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}