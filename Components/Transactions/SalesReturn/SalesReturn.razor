@page "/SalesReturn"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.SalesReturn
@rendermode InteractiveServer 

<!-- Message Dialog -->
<T_Msg @ref="Msg" />

<!-- View Mode Form -->
@if (isViewing)
{
    <FrmView TableName="SalesReturnHead"
             OnClosed="HandleClose"
             EditClicked="HandleEdit"
             DeleteClicked="HandleDelete" />
}

<!-- Main Sales Return Form -->
<T_Frm FormName="Sales Return" OnFormTypeChange="HandleFormTypeChange">
    <ChildContent>
        <!-- Header Inputs -->
        <T_Row>
            <T_Input Title="Sales Return No *" ReadOnly="true"
                     @bind-Value="@model.dict["SalesReturnNo"]"
                     ColSize="col-md-3" />

            <T_Input Title="Customer Bill No"
                     @bind-Value="@model.dict["CustomerBillNo"]"
                     ColSize="col-md-3"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(1))
                     @ref="firstReference" />

            <T_Input Title="Sales Return Date" Type="date"
                     @bind-Value="@model.dict["SalesReturnDate"]"
                     ColSize="col-md-3"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(2)) />

            <T_Select @bind-Value="@model.dict["ModeOfPay"]" Label="Mode Of Pay"
                      Options="CASH:Cash,CARD:Card,UPI:UPI,CHEQUE:Cheque,CREDIT:Credit,NEFT:NEFT,RTGS:RTGS"
                      ColSize="col-md-3"
                      GetInputReference="getInputReferences"
                      NextReference=@(GetRef(3)) />
        </T_Row>

        <!-- Customer & Options -->
        <T_Row>
            <T_RInput Title="Customer *" Layout="1"
                      TableName="CustomerMaster"
                      PrimaryColumn="CustomerCode"
                      DisplayColumn="CustomerName"
                      Value="@model.dict["CustomerCode"]"
                      ValueChanged="OnCustomerChanged"
                      ColSize="col-md-6"
                      GetInputReference="getInputReferences"
                      NextReference=@(GetRef(4)) />

            <T_Checkbox Title="Cancelled"
                        @bind-Value="@model.dict["Cancelled"]"
                        ColSize="col-md-3"
                        GetInputReference="getInputReferences"
                        NextReference=@(GetRef(5)) />

            <T_Checkbox Title="Consider In Accounts"
                        @bind-Value="@model.dict["ConsiderInAccounts"]"
                        ColSize="col-md-3"
                        GetInputReference="getInputReferences"
                        NextReference=@(GetRef(6)) />
        </T_Row>

        <!-- Narration -->
        <T_Row>
            <T_Textarea Title="Narration"
                        @bind-Value="@model.dict["Narration"]"
                        ColSize="col-md-12"
                        GetInputReference="getInputReferences"
                        NextReference=@(GetRef(7)) />
        </T_Row>

        <!-- Sales Return Details Table -->
        <TableView TableName="Sales Return Details" HandleAdd="HandleAdd">
            <TableHeads>
                <th>Action</th>
                <th>Sr. No.</th>
                <th>Product</th>
                <th>Original Bill No</th>
                <th>Original Bill Date</th>
                <th>Rate</th>
                <th>Quantity</th>
                <th>Discount</th>
                <th>GST%</th>
                <th>Taxable Amount</th>
                @if(GstStateCode == 27)
                {
                    <th>CGST/SGST</th>
                }
                else
                {
                    <th>IGST</th>
                }
                <th>Total GST</th>
                <th>Net Amount</th>
            </TableHeads>

            <TableRows>
                @for (int i = 0; i < detailComponents.Count; i++)
                {
                    int index = i;
                    <SalesReturnDetail 
                        SerialNo="@(index+1)"
                        SalesReturnNo="@model.dict["SalesReturnNo"]"
                        OnRemove="@((idx) => HandleRemove(idx))"
                        OnCalculationChanged="CalculateTotals"
                        InitialDataRow="@(detailRows.Count > index ? detailRows[index] : null)"
                        GstStateCode=@GstStateCode
                        endReference=@(GetRef(7))
                        @ref="detailComponents[index]" />
                }
            </TableRows>

            <TableFooter>
                Total Count: @detailComponents.Count
            </TableFooter>
        </TableView>

        <!-- Summary Section -->
        <T_SummaryCard>
            <T_Input Title="Total Amount" Layout="2" ReadOnly
                     @bind-Value="@model.dict["TotalAmount"]" Placeholder="-" Type="Number"/>

            <T_Input Title="GST Amount" Layout="2" ReadOnly
                     @bind-Value="@model.dict["GSTAmount"]" Placeholder="-" Type="Number"/>

            <T_Input Title="Discount" Layout="2"
                     @bind-Value="@model.dict["Discount"]" ChangeFunction="CalculateTotals" Type="Number"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(8)) />

            <T_Input Title="Add/Less" Layout="2"
                     @bind-Value="@model.dict["AddLess"]" ChangeFunction="CalculateTotals" Type="Number"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(9)) />

            <T_Input Title="Rounding" Layout="2"
                     @bind-Value="@model.dict["Rounding"]" ChangeFunction="CalculateTotals" Type="Number"
                     GetInputReference="getInputReferences"
                     NextReference=@(GetRef(0)) />

            <T_Input Title="Net Amount" Layout="2" ReadOnly
                     @bind-Value="@model.dict["NetAmount"]" Placeholder="-" Type="Number"/>
        </T_SummaryCard>
    </ChildContent>

    <!-- Footer Buttons -->
    <CardFooterContent>
        <T_Button Text="Save" OnClick="HandleSave" />
        <T_Button Text="Clear" OnClick="HandleClear" />
        <T_Button Text="View" OnClick="HandleView" />
        <T_Button Text="Print" />
    </CardFooterContent>
</T_Frm>

@code {
    // ============================= VARIABLES & REFERENCES =============================
    
    // UI References
    private T_Msg Msg;
    private T_Input firstReference;
    public DotNetObjectReference<SalesReturn> dotNetRef;

    // Model and Data
    private Model model = new("SalesReturnHead", "SalesReturnNo", "A");
    private List<SalesReturnDetail> detailComponents = new();
    public List<DataRow> detailRows = new();
    private ClsDatabase db = new();

    // State Variables
    public int GstStateCode = 27;
    private bool isViewing = false;
    private bool isAddClicked = false;
    private bool isEditing = false;

    // Element References Management
    public List<ElementReference> references = new List<ElementReference>();

    // ============================= ELEMENT REFERENCE METHODS =============================
    
    public void getInputReferences(ElementReference eref)
    {
        references.Add(eref);
        Console.WriteLine($"Added reference #{references.Count - 1} for element");
    }

    private ElementReference GetRef(int idx) 
    {
        Console.WriteLine($"GetRef called with idx={idx}, references.Count={references.Count}");
        return (idx >= 0 && idx < references.Count) 
            ? references[idx] 
            : default;
    }

    // ============================= COMPONENT LIFECYCLE METHODS =============================
    
    protected override void OnInitialized()
    {
        // Set default values
        if (string.IsNullOrEmpty(model.dict["SalesReturnDate"]))
            model.dict["SalesReturnDate"] = DateTime.Now.ToString("yyyy-MM-dd");

        model.dict["ModeOfPay"] ??= "CASH";
        model.dict["ConsiderInAccounts"] ??= "true";
        model.dict["Cancelled"] ??= "false";

        GstStateCode = 27;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {   
            await firstReference.Focus();
            Console.WriteLine("First Render");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    // ============================= CUSTOMER DATA METHODS =============================
    
    private void OnCustomerChanged(string customerCode)
    {
        model.dict["CustomerCode"] = customerCode;
        UpdateCustomerDetails();
        StateHasChanged();
    }

    private void UpdateCustomerDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["CustomerCode"]))
        {
            try
            {
                string query = $"SELECT CustomerStateCode FROM CustomerMaster WHERE CustomerCode = '{model.dict["CustomerCode"]}'";
                var result = db.GetScalar(query);
                if (result != null)
                {
                    GstStateCode = Convert.ToInt32(result);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting customer details: {ex.Message}");
                GstStateCode = 27; // Default value
            }
        }
        StateHasChanged();
    }

    // ============================= FORM ACTION METHODS =============================
    
    [JSInvokable]
    public void HandleView()
    {
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd()
    {
        detailComponents.Add(null);
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleClear()
    {
        model.Clear();
        detailComponents.Clear();
        detailRows.Clear();
        isEditing = false;
        isAddClicked = false;
        isViewing = false;
        StateHasChanged();
    }

    public void HandleClose()
    {
        isAddClicked = false;
        isViewing = false;
    }

    public void HandleFormTypeChange(string s)
    {
        model.SetPrimaryKey(s);
    }

    // ============================= CRUD OPERATIONS =============================
    
    public async Task HandleEdit(DataRow row)
    {
        HandleClear();
        await Task.Delay(50);
        isEditing = true;
        model.Populate(row);
        UpdateCustomerDetails();

        var dataTable = db.GetDataTable($"SELECT * FROM SalesReturnDetails WHERE SalesReturnNo = '{model.dict["SalesReturnNo"]}'");
        foreach (DataRow detailRow in dataTable.Rows)
        {
            detailRows.Add(detailRow);
            detailComponents.Add(null);
        }

        isViewing = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleSave()
    {
        try
        {
            // Validation
            if (string.IsNullOrEmpty(model.dict["CustomerCode"]) || model.dict["CustomerCode"] == "0")
            {
                await Msg.Error("Please select a customer.");
                return;
            }

            if (detailComponents.Count == 0)
            {
                await Msg.Error("Please add at least one return item.");
                return;
            }

            // Save Details
            bool allDetailsSaved = true;

            if (isEditing)
                db.ExecuteQuery($"DELETE FROM SalesReturnDetails WHERE SalesReturnNo = '{model.dict["SalesReturnNo"]}'");

            foreach (var detail in detailComponents)
            {
                if (detail != null && !detail.SaveDetail())
                    allDetailsSaved = false;
            }

            if (!allDetailsSaved)
                throw new Exception("Failed to save some details");

            // Save Header
            bool result = isEditing ? model.Update() : model.Save();
            if (!result)
                throw new Exception("Failed to save header");

            await Msg.Success();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Save error: {e.Message}");
            await Msg.SaveError();
        }
    }

    public void HandleDelete(DataRow row)
    {
        string pk = row["SalesReturnNo"].ToString();
        db.ExecuteQuery($"DELETE FROM SalesReturnHead WHERE SalesReturnNo = '{pk}'");
        db.ExecuteQuery($"DELETE FROM SalesReturnDetails WHERE SalesReturnNo = '{pk}'");
    }

    // ============================= DETAIL MANAGEMENT METHODS =============================
    
    public void HandleRemove(int serialNo)
    {
        int index = serialNo - 1;

        if (index >= 0 && index < detailComponents.Count)
        {
            detailComponents.RemoveAt(index);
            if (detailRows.Count > index)
                detailRows.RemoveAt(index);

            CalculateTotals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Invalid index {index} for removal.");
        }
    }

    // ============================= CALCULATION METHODS =============================
    
    private void CalculateTotals()
    {
        float totalAmount = 0, gstAmount = 0, totalQty = 0;

        // Calculate totals from all detail components
        foreach (var detail in detailComponents)
        {
            if (detail != null)
            {
                totalAmount += detail.GetTotalAmount();
                gstAmount += detail.GetGstAmount();
                totalQty += float.TryParse(detail.model.dict["Quantity"], out float qty) ? qty : 0;
            }
        }

        // Update model with calculated values
        model.dict["TotalAmount"] = totalAmount.ToString("F2");
        model.dict["GSTAmount"] = gstAmount.ToString("F2");


        // Parse adjustment values
        float discount = float.TryParse(model.dict["Discount"], out var d) ? d : 0;
        float addLess = float.TryParse(model.dict["AddLess"], out var al) ? al : 0;
        float rounding = float.TryParse(model.dict["Rounding"], out var r) ? r : 0;

        // Calculate final net amount
        float netAmount = totalAmount + gstAmount - discount + addLess + rounding;
        model.dict["NetAmount"] = netAmount.ToString("F2");

        StateHasChanged();
    }
}