@using System.Data
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

<div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="OpenFrmViewHelper" @onclick:stopPropagation="true">
            <i class="bi bi-plus"></i> Add Product for Adjustment
        </button>
    </div>

    <div>
        @if (SelectedRows.Count == 0)
        {
            <div class="alert alert-info">No products added for adjustment yet.</div>
        }
        else
        {
            <div class="border overflow-auto" style="overflow: auto; max-height: 400px; max-width: 90vw; overflow-x: auto; overflow-y: auto;">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light sticky-top">
                            <tr>
                                <th style="min-width: 80px;">Sr No</th>
                                <th style="min-width: 150px;">Product Name</th>
                                <th style="min-width: 100px;">Current Qty</th>
                                <th style="min-width: 120px;">Adjustment Type</th>
                                <th style="min-width: 100px;">Adj. Quantity</th>
                                <th style="min-width: 100px;">Rate</th>
                                <th style="min-width: 100px;">Amount</th>
                                <th style="min-width: 120px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < SelectedRows.Count; i++)
                            {
                                var index = i;
                                var row = SelectedRows[index];
                                <tr>
                                    <td class="text-center">@(index + 1)</td>
                                    <td>
                                        <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" 
                                            title="@GetProductName(row)">
                                            @GetProductName(row)
                                        </div>
                                    </td>
                                    <td class="text-center">@GetCurrentQuantity(row)</td>
                                    <td>
                                        <select class="form-select form-select-sm" 
                                                value="@GetAdjustmentType(row)"
                                                @onchange='(e) => UpdateAdjustmentType(index, e.Value?.ToString() ?? "Damage")'
                                                @onclick:stopPropagation="true">
                                            <option value="Add">Add</option>
                                            <option value="Less">Less</option>
                                            
                                        </select>
                                    </td>
                                    <td>
                                        <div class="input-group input-group-sm" style="width: 100px;">
                                            <input type="number" class="form-control form-control-sm text-center" 
                                                value="@GetAdjustmentQuantity(row)" 
                                                min="0" max="9999" step="0.01"
                                                @onchange='(e) => UpdateAdjustmentQuantity(index, e.Value?.ToString() ?? "0")'
                                                @onclick:stopPropagation="true" />
                                        </div>
                                    </td>
                                    <td>
                                        <div class="input-group input-group-sm" style="width: 100px;">
                                            <input type="number" class="form-control form-control-sm text-center" 
                                                value="@GetRate(row)" 
                                                min="0" step="0.01"
                                                @onchange='(e) => UpdateRate(index, e.Value?.ToString() ?? "0")'
                                                @onclick:stopPropagation="true" />
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-info fs-6">@GetAmount(row).ToString("F2")</span>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => RemoveRow(index)" 
                                                @onclick:stopPropagation="true">
                                            <i class="bi bi-trash">Remove</i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <td colspan="6" class="text-end"><strong>Total Amount:</strong></td>
                                <td class="text-end">
                                    <span class="badge bg-success fs-6">@GetTotalAmount().ToString("F2")</span>
                                </td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        }
    </div>

    <FrmViewHelper TableData="@TableData" 
                   OnSelectClicked="HandleRowSelected" 
                   OnClosed="HandleModalClosed"
                   Display="@isFrmViewHelperVisible" />
</div>

@code {
    private DataTable? TableData;
    public List<DataRow> SelectedRows = new();
    private bool isFrmViewHelperVisible = false;
    private bool isProcessing = false;

    [Parameter] public EventCallback<List<DataRow>> SelectedRowsChanged { get; set; }
    [Parameter] public EventCallback<List<DataRow>> OnRowsUpdated { get; set; }
    [Parameter] public EventCallback<decimal> OnTotalAmountChanged { get; set; }

    ClsDatabase db = new ClsDatabase();

    protected override async Task OnInitializedAsync()
    {
        await LoadPhysicalStockData();
    }

    protected override async Task OnParametersSetAsync()
    {
        StateHasChanged();
    }

    private async Task LoadPhysicalStockData()
    {
        try
        {
            // Join PhysicalStock with ProductMaster to get complete product information
            string query = @"
                SELECT 
                    ps.StockID,
                    ps.ProductCode,
                    pm.ProductName,
                    ps.Quantity as CurrentQuantity,
                    ps.SaleRate as Rate,
                    ps.PurchaseRate,
                    ps.NetPurchaseRate
                FROM PhysicalStock ps 
                INNER JOIN ProductMaster pm ON ps.ProductCode = pm.ProductCode 
                WHERE ps.Quantity > 0
                ORDER BY pm.ProductName";
            
            TableData = db.GetDataTable(query);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading physical stock data: {ex.Message}");
        }
    }

    private void OpenFrmViewHelper()
    {
        if(isFrmViewHelperVisible) return;

        Console.WriteLine("Opening Physical Stock selection modal");
        isFrmViewHelperVisible = true;
        StateHasChanged();
    
    }

    private void HandleModalClosed()
    {
        Console.WriteLine("Modal closed - resetting state");
        isFrmViewHelperVisible = false;
        StateHasChanged();
    }

    private async Task HandleRowSelected(DataRow selectedRow)
    {
        Console.WriteLine("Physical Stock row selected - processing...");
        
        // Check if this StockID is already selected
        var stockID = selectedRow["StockID"]?.ToString();
        if (SelectedRows.Any(r => r["StockID"]?.ToString() == stockID))
        {
            Console.WriteLine("Product already selected");
            isFrmViewHelperVisible = false;
            isProcessing = false;
            StateHasChanged();
            return;
        }

        // Create a new DataTable structure for adjustment details if needed
        if (SelectedRows.Count == 0)
        {
            CreateAdjustmentDetailStructure();
        }

        // Create adjustment detail row
        var newRow = CreateAdjustmentDetailRow(selectedRow);
        SelectedRows.Add(newRow);
        
        // Close modal
        isFrmViewHelperVisible = false;
        isProcessing = false;
        
        Console.WriteLine($"Added adjustment row. Total rows: {SelectedRows.Count}");
        
        await NotifyParentOfChanges();
    }

    private void CreateAdjustmentDetailStructure()
    {
        var table = new DataTable();
        table.Columns.Add("StockID", typeof(long));
        table.Columns.Add("ProductCode", typeof(int));
        table.Columns.Add("ProductName", typeof(string));
        table.Columns.Add("CurrentQuantity", typeof(float));
        table.Columns.Add("AdjustmentType", typeof(string));
        table.Columns.Add("AdjustmentQuantity", typeof(float));
        table.Columns.Add("Rate", typeof(float));
    }

    private DataRow CreateAdjustmentDetailRow(DataRow stockRow)
    {
        DataTable table;
        if (SelectedRows.Count > 0)
        {
            table = SelectedRows[0].Table;
        }
        else
        {
            table = new DataTable();
            table.Columns.Add("StockID", typeof(long));
            table.Columns.Add("ProductCode", typeof(int));
            table.Columns.Add("ProductName", typeof(string));
            table.Columns.Add("CurrentQuantity", typeof(float));
            table.Columns.Add("AdjustmentType", typeof(string));
            table.Columns.Add("AdjustmentQuantity", typeof(float));
            table.Columns.Add("Rate", typeof(float));
        }

        var newRow = table.NewRow();
        newRow["StockID"] = stockRow["StockID"];
        newRow["ProductCode"] = stockRow["ProductCode"];
        newRow["ProductName"] = stockRow["ProductName"];
        newRow["CurrentQuantity"] = stockRow["CurrentQuantity"];
        newRow["AdjustmentType"] = "ADD"; // Default
        newRow["AdjustmentQuantity"] = 1.0f; // Default
        newRow["Rate"] = stockRow["Rate"];

        return newRow;
    }

    private async Task RemoveRow(int index)
    {
        if (index >= 0 && index < SelectedRows.Count)
        {
            Console.WriteLine($"Removing adjustment row at index {index}");
            SelectedRows.RemoveAt(index);
            await NotifyParentOfChanges();
        }
    }

    // Getter methods for table data
    private string GetProductName(DataRow row)
    {
        return row["ProductName"]?.ToString() ?? "";
    }

    private float GetCurrentQuantity(DataRow row)
    {
        if (row.Table.Columns.Contains("CurrentQuantity") && row["CurrentQuantity"] != DBNull.Value)
        {
            return Convert.ToSingle(row["CurrentQuantity"]);
        }
        return 0f;
    }

    private string GetAdjustmentType(DataRow row)
    {
            return row["AdjustmentType"].ToString() ?? "NULL REFERENCE";
    }

    private float GetAdjustmentQuantity(DataRow row)
    {
        if (row.Table.Columns.Contains("AdjustmentQuantity") && row["AdjustmentQuantity"] != DBNull.Value)
        {
            return Convert.ToSingle(row["AdjustmentQuantity"]);
        }
        return 1f;
    }

    private float GetRate(DataRow row)
    {
        if (row.Table.Columns.Contains("Rate") && row["Rate"] != DBNull.Value)
        {
            return Convert.ToSingle(row["Rate"]);
        }
        return 0f;
    }

    private decimal GetAmount(DataRow row)
    {
        try
        {
            var quantity = GetAdjustmentQuantity(row);
            var rate = GetRate(row);
            return (decimal)(quantity * rate);
        }
        catch (Exception)
        {
            return 0m;
        }
    }

    private decimal GetTotalAmount()
    {
        return SelectedRows.Sum(row => GetAmount(row));
    }

    // Update methods
    private async Task UpdateAdjustmentType(int index, string adjustmentType)
    {
        SelectedRows[index]["AdjustmentType"] = adjustmentType;
        await NotifyParentOfChanges();
    }

    private async Task UpdateAdjustmentQuantity(int index, string quantityStr)
    {
        SelectedRows[index]["AdjustmentQuantity"] = quantityStr;
        await NotifyParentOfChanges();
    }

    private async Task UpdateRate(int index, string rateStr)
    {
        SelectedRows[index]["Rate"] = rateStr;
        await NotifyParentOfChanges();
    }

    private async Task NotifyParentOfChanges()
    {
        await SelectedRowsChanged.InvokeAsync(SelectedRows);
        await OnRowsUpdated.InvokeAsync(SelectedRows);
        await OnTotalAmountChanged.InvokeAsync(GetTotalAmount());
        StateHasChanged();
    }

    // Public methods for parent component
    public void ClearAll()
    {
        SelectedRows.Clear();
        StateHasChanged();
    }

    public List<DataRow> GetAdjustmentDetails()
    {
        return SelectedRows.ToList();
    }
}