@page "/Adjustment2"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.SA2
@rendermode InteractiveServer 

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="AdjustmentHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Stock Adjustment">
<ChildContent>
    <T_Row>
        <T_Input Title="Adjustment No *" ReadOnly=true @bind-Value="@model.dict["AdjustmentNo"]" ColSize="col-md-3"/>
        <T_Input Title="Adjustment Date" Type="date" @bind-Value="@model.dict["AdjustmentDate"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Cancelled" @bind-Value="@model.dict["Cancelled"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Textarea Title="Narration" @bind-Value="@model.dict["Narration"]" ColSize="col-md-9"/>
    </T_Row>
    <TableView TableName="Adjustment Details" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Sr. No.</th>
            <th>Stock Item</th>
            <th>Adjustment Type</th>
            <th>Current Qty</th>
            <th>Rate</th>
            <th>Quantity</th>
            <th>Amount</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i < detailComponents.Count; i++){
                int index = i; // Capture index for closure
                <StockAdjustmentDetail2 
                        SerialNo=@(index+1)
                        AdjustmentNo=@Convert.ToInt32(model.dict["AdjustmentNo"]) 
                        OnRemove="@((idx) => HandleRemove(idx))" 
                        OnCalculationChanged="CalculateTotals"
                        InitialDataRow="detailRows.Count > index ? detailRows[index] : null"
                        @ref="detailComponents[index]" />
  
                    //if(isEditing)detailComponents[index].Populate(AdjustmentNo, i); 
            }
        </TableRows>
        <TableFooter>
            Total Count : @detailComponents.Count
        </TableFooter>
    </TableView>
    <T_SummaryCard >
        <T_Input Title="Net Amount" Layout=2 ReadOnly @bind-Value="@model.dict["NetAmount"]" Placeholder="-"/>
    </T_SummaryCard>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style="" OnClick="HandleClear"/>
    <T_Button Text="View" Style="" OnClick="HandleView"/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>

</T_Frm>

@code{
    //ELEMENT REFERENCES
    private T_Msg Msg;
    public DotNetObjectReference<StockAdjustment2> dotNetRef;
    
    // Component references - let each child manage its own model
    private List<StockAdjustmentDetail2> detailComponents = new List<StockAdjustmentDetail2>();
    public List<DataRow> detailRows = new List<DataRow>();
   
    //Models and Class Objects
    Model model = new Model("AdjustmentHead", "AdjustmentNo");
    ClsDatabase db = new ClsDatabase();
   
    //BooleanValues and Integers
    private bool isViewing = false;
    private bool isAddClicked = false;
    private bool isEditing = false;
    public int AdjustmentNo;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            Console.WriteLine("First Render");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        // Add a null placeholder for component reference
        detailComponents.Add(null);
        StateHasChanged();
    }

    public void HandleEdit(DataRow row)
    {
        HandleClear(); // This will clear detailComponents and detailDataRows
        isEditing = true;
        model.Populate(row);
        AdjustmentNo = Convert.ToInt32(model.dict["AdjustmentNo"]);
        
        DataTable dataTable = db.GetDataTable($"Select * from AdjustmentDetails where AdjustmentNo={model.dict["AdjustmentNo"]}");
        
        // Populate the data list and add component placeholders
        foreach (DataRow detailRow in dataTable.Rows)
        {
            detailRows.Add(detailRow);
            detailComponents.Add(new()); // Add a placeholder. The @ref will populate it.
        }
        
        isViewing = false; // Close the view form
        StateHasChanged(); // Trigger render
    }

    [JSInvokable]
    public void HandleSave(){
        Console.WriteLine("Saving");
        
        try{
            // First save all detail components
            bool allDetailsSaved = true;
            if(isEditing)db.ExecuteQuery($"Delete From AdjustmentDetails where AdjustmentNo={AdjustmentNo}");
            foreach(var detail in detailComponents){
                if(detail != null){
                    bool saved = detail.SaveDetail();
                    if(!saved) allDetailsSaved = false;
                }
            }
            
            if(!allDetailsSaved){
                throw new Exception("Failed to save some details");
            }
            
            // Then save the parent
            bool er;
            if(isEditing)er = model.Update();
            else er = model.Save();
            
            if(!er) throw new Exception("Failed to save header");
            
            Msg.Success();
        }
        catch(Exception e){
            Console.WriteLine($"Save error: {e.Message}");
            Msg.SaveError();
        }
    }

    [JSInvokable]
    public void HandleClear(){
        Console.WriteLine("Clear Form");
        model.Clear();
        detailComponents.Clear();
        detailRows.Clear();
        isEditing = false;
        isAddClicked = false;
        isViewing = false;  
        StateHasChanged();
    }

    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
    }

    public void HandleDelete(DataRow row){
        int pk = Convert.ToInt32(row["AdjustmentNo"]);
        db.ExecuteQuery($"Delete From AdjustmentHead where AdjustmentNo={pk}");
        db.ExecuteQuery($"Delete From AdjustmentDetails where AdjustmentNo={pk}");
    }

    public void HandleRemove(int serialNo){
        Console.WriteLine($"Removing Row with SerialNo {serialNo}");
        int index = serialNo - 1; // Convert serial number to index
        
        if (index >= 0 && index < detailComponents.Count)
        {
            detailComponents.RemoveAt(index);
            detailRows.RemoveAt(index);
            Console.WriteLine($"Removed item at index {index}. New count: {detailComponents.Count}");
            CalculateTotals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Invalid index {index} for removal. Count: {detailComponents.Count}");
        }
    }

    // Calculate totals method
    private void CalculateTotals()
    {
        float netAmount = 0;

        foreach(var detail in detailComponents){
            if(detail != null){
                netAmount += detail.GetAmount();
            }
        }

        model.dict["NetAmount"] = netAmount.ToString("F2");
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // Initialize default values
        if (string.IsNullOrEmpty(model.dict["AdjustmentDate"])) 
            model.dict["AdjustmentDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        AdjustmentNo = Convert.ToInt32(model.dict["AdjustmentNo"]);
    }
}