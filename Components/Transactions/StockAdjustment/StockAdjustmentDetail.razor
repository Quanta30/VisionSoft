@using System.Data
@namespace VisionSoft.Components.Transactions.StockAdjustment
@rendermode InteractiveServer

<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style="" />
    </td>
    <td>@SerialNo</td>

    <td>
        <T_RInput Title="" Layout="3"
                  TableName="PhysicalStockView"
                  PrimaryColumn="ProductName"
                  DisplayColumn="ProductName"
                  Value="@StockName"
                  ValueChanged="OnStockChanged"
                  GetInputReference="@((eref) => getInputReferences(0, eref))"
                  NextReference="@(GetRef(1))"
                  @ref="firstReference" />
    </td>

    <td>
        <div style="width:100px">
            <T_Select @bind-Value="@model.dict["AdjustmentType"]"
                      Layout="2"
                      Options="LESS:LESS,ADD:ADD"
                      OnChange="OnAdjustmentTypeChange"
                      GetInputReference="@((eref) => getInputReferences(1, eref))"
                      NextReference="@(GetRef(2))" />
        </div>
    </td>

    <td>
        <div style="width:80px">
            <T_Input Title="" Layout="3"
                     Value="@currentQuantity.ToString("F2")"
                     ReadOnly="true"
                     Placeholder="" />
        </div>
    </td>

    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3"
                     @bind-Value="@model.dict["Rate"]"
                     Placeholder=""
                     ChangeFunction="OnChange"
                     Type="Number"
                     GetInputReference="@((eref) => getInputReferences(2, eref))"
                     NextReference="@(GetRef(3))" />
        </div>
    </td>

    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3"
                     @bind-Value="@model.dict["Quantity"]"
                     Placeholder=""
                     ChangeFunction="OnChange"
                     Type="Number"
                     GetInputReference="@((eref) => getInputReferences(3, eref))"
                     OnEnterPressed="OnEnterPressed" />
        </div>
    </td>
    <td class="text-end">@amount.ToString("F2")</td>
</tr>

@code {
    // =================================================================================
    // PARAMETERS
    // =================================================================================

    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public int AdjustmentNo { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }
    [Parameter] public ElementReference endReference{get; set;} = default;

    // =================================================================================
    // REFERENCES & STATE
    // =================================================================================

    public Model model = new Model("AdjustmentDetails", "");
    private string StockName = "";
    private decimal currentQuantity = 0;
    private decimal amount = 0;

    private readonly ClsDatabase db = new();
    private readonly Utilities utilities = new();

    // Focus Management
    public T_RInput firstReference;
    private Dictionary<int, ElementReference> references = new Dictionary<int, ElementReference>();

    // =================================================================================
    // LIFECYCLE METHODS
    // =================================================================================

    protected override void OnInitialized()
    {
        model.dict["Rate"] ??= "0";
        model.dict["Quantity"] ??= "1";
        model.dict["AdjustmentType"] ??= "LESS";
        Calculate();
    }

    protected override void OnParametersSet()
    {
        model.dict["AdjustmentNo"] = AdjustmentNo.ToString();
        model.dict["SrNo"] = SerialNo.ToString();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialDataRow != null)
            {
                model.Populate(InitialDataRow);
                StockName = utilities.StockIdToName(model.dict["StockID"]);
                UpdateStockDetails(); // This will also calculate
                InitialDataRow = null;
                StateHasChanged();
            }
            // Set initial focus on the first input of the new row.
            if (firstReference?.reference.Id != null)
            {
                await firstReference.Focus();
            }
        }
    }

    // =================================================================================
    // FOCUS MANAGEMENT
    // =================================================================================
    
    public void getInputReferences(int position, ElementReference eref)
    {
        references[position] = eref;
    }

    private ElementReference GetRef(int idx)
    {
        return references.ContainsKey(idx) ? references[idx] : default;
    }

    // =================================================================================
    // EVENT HANDLERS
    // =================================================================================

    private void OnStockChanged(string name)
    {
        try
        {
            StockName = name;
            model.dict["StockID"] = utilities.StockNameToId(name);
            UpdateStockDetails();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnStockChanged: {ex.Message}");
        }
    }

    private async Task OnAdjustmentTypeChange()
    {
        Calculate();
        await OnCalculationChanged.InvokeAsync();
    }

    private async Task OnChange(string _)
    {
        Calculate();
        await OnCalculationChanged.InvokeAsync();
    }

    private async Task HandleRemove()
    {
        await OnRemove.InvokeAsync(SerialNo);
    }

    private async void OnEnterPressed(){
        if(string.IsNullOrEmpty(StockName)){
            if(!endReference.Equals(default(ElementReference))){
                await endReference.FocusAsync();
                await HandleRemove();
            }
        }
        else{
            await OnAdd.InvokeAsync();
        }
    }

    // =================================================================================
    // DATA & CALCULATION
    // =================================================================================

    private void Calculate()
    {
        decimal.TryParse(model.dict["Rate"], out decimal rate);
        decimal.TryParse(model.dict["Quantity"], out decimal quantity);
        amount = rate * quantity;
    }

    private void UpdateStockDetails()
    {
        if (string.IsNullOrWhiteSpace(model.dict["StockID"])) return;

        try
        {
            string query = $"SELECT PurchaseRate, Quantity FROM PhysicalStock WHERE StockID = '{model.dict["StockID"]}'";
            DataTable result = db.GetDataTable(query);

            if (result.Rows.Count > 0)
            {
                var row = result.Rows[0];
                model.dict["Rate"] = row["PurchaseRate"]?.ToString() ?? "0";
                currentQuantity = row["Quantity"] != DBNull.Value ? Convert.ToDecimal(row["Quantity"]) : 0;
            }
            else
            {
                model.dict["Rate"] = "0";
                currentQuantity = 0;
            }
            Calculate();
            OnCalculationChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting stock details: {ex.Message}");
        }
    }

    private void UpdatePhysicalStock(Transaction transaction)
    {
        utilities.AdjustStock(model.dict["StockID"], model.dict["AdjustmentType"], model.dict["Quantity"], transaction);
    }

    // =================================================================================
    // PUBLIC API
    // =================================================================================

    public void SaveDetail(Transaction transaction)
    {
        if (string.IsNullOrEmpty(model.dict["StockID"]) || model.dict["StockID"] == "0")
        {
            return; // Don't save empty rows
        }
        UpdatePhysicalStock(transaction);
        model.Save(transaction);
    }

    public decimal GetAmount() => amount;
}
