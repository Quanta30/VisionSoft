@using System.Data
@namespace VisionSoft.Components.Transactions.StockAdjustment
@rendermode InteractiveServer

<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style="" />
    </td>
    <td>@SerialNo</td>

    <td>
        <T_RInput Title="" Layout="3"
                  TableName="PhysicalStockView"
                  PrimaryColumn="ProductName"
                  DisplayColumn="ProductName"
                  Value="@StockName"
                  ValueChanged="OnStockChanged" />
    </td>

    <td>
        <div style="width:100px">
            <select class="form-control form-control-sm"
                    value="@model.dict["AdjustmentType"]"
                    @onchange="OnAdjustmentTypeChange">
                <option value="LESS">LESS</option>
                <option value="ADD">ADD</option>
            </select>
        </div>
    </td>

    <td>
        <div style="width:80px">
            <T_Input Title="" Layout="3"
                     Value="@currentQuantity.ToString("F2")"
                     ReadOnly="true"
                     Placeholder="" />
        </div>
    </td>

    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3"
                     @bind-Value="@model.dict["Rate"]"
                     Placeholder=""
                     ChangeFunction="OnChange" />
        </div>
    </td>

    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3"
                     @bind-Value="@model.dict["Quantity"]"
                     Placeholder=""
                     ChangeFunction="OnChange" />
        </div>
    </td>

    <td>@amount.ToString("F2")</td>
</tr>

@code {
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }

    [Parameter] public int SerialNo { get; set; }
    [Parameter] public int AdjustmentNo { get; set; }

    [Parameter] public DataRow InitialDataRow { get; set; }
  

    private Model model = new Model("AdjustmentDetails", "");
    private string StockName = "";
    private float currentQuantity = 0;
    private float amount = 0;

    private readonly ClsDatabase db = new();
    private readonly Utilities utilities = new();

    protected override void OnInitialized()
    {
        model.dict["Rate"] ??= "0";
        model.dict["Quantity"] ??= "1";
        model.dict["AdjustmentType"] ??= "LESS";

        Calculate();
    }

    protected override void OnParametersSet()
    {
        model.dict["AdjustmentNo"] = AdjustmentNo.ToString();
        model.dict["SrNo"] = SerialNo.ToString();
        Calculate();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && InitialDataRow != null)
        {
            model.Populate(InitialDataRow);
            StockName = utilities.StockIdToName(model.dict["StockID"]);
            InitialDataRow = null;
            Console.WriteLine("Rendering Again");
            StateHasChanged();
        }
    }

    private void OnStockChanged(string name)
    {
        try
        {
            StockName = name;
            model.dict["StockID"] = utilities.StockNameToId(name);
            UpdateStockDetails();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnStockChanged: {ex.Message}");
        }
    }

    private void OnAdjustmentTypeChange(ChangeEventArgs e)
    {
        model.dict["AdjustmentType"] = e.Value?.ToString() ?? "LESS";
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    private void OnChange(string _)
    {
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    private void Calculate()
    {
        float.TryParse(model.dict["Rate"], out float rate);
        float.TryParse(model.dict["Quantity"], out float quantity);
        amount = rate * quantity;
    }

    private void UpdateStockDetails()
    {
        if (string.IsNullOrWhiteSpace(model.dict["StockID"]))
            return;

        try
        {
            string query = $"SELECT PurchaseRate, Quantity FROM PhysicalStock WHERE StockID = '{model.dict["StockID"]}'";
            DataTable result = db.GetDataTable(query);

            if (result.Rows.Count > 0)
            {
                var row = result.Rows[0];

                model.dict["Rate"] = row["PurchaseRate"]?.ToString() ?? "0";
                currentQuantity = row["Quantity"] != DBNull.Value ? Convert.ToSingle(row["Quantity"]) : 0;
            }
            else
            {
                Console.WriteLine("No stock found for the selected item");
                model.dict["Rate"] = "0";
                currentQuantity = 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting stock details: {ex.Message}");
            model.dict["Rate"] = "0";
            currentQuantity = 0;
        }
    }

    private void UpdatePhysicalStock()
    {
        utilities.AdjustStock(model.dict["StockID"], model.dict["AdjustmentType"], model.dict["Quantity"]);
    }

    public async Task HandleRemove()
    {
        Console.WriteLine($"Removing row with SerialNo: {SerialNo}");
        await OnRemove.InvokeAsync(SerialNo);
    }

    public bool SaveDetail()
    {
        try
        {
            if (string.IsNullOrEmpty(model.dict["StockID"]) || model.dict["StockID"] == "0")
            {
                Console.WriteLine("Cannot save - no stock selected");
                return false;
            }

            model.dict["AdjustmentNo"] = AdjustmentNo.ToString();
            model.dict["SrNo"] = SerialNo.ToString();

            UpdatePhysicalStock();

            bool saved = model.Save();

            Console.WriteLine(saved
                ? $"Detail {SerialNo} saved successfully"
                : $"Failed to save detail {SerialNo}");

            return saved;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving detail {SerialNo}: {ex.Message}");
            return false;
        }
    }

    public float GetAmount() => amount;
}
