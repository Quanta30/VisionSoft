@page "/PurchaseBill"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.PurchaseBill
@rendermode InteractiveServer 

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="PurchaseBillHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Purchase Bill">
<ChildContent>
    <T_Row>
        <T_Input Title="Purchase Bill No *" ReadOnly=true @bind-Value="@model.dict["PurchaseBillNo"]" ColSize="col-md-3"/>
        <T_Input Title="Supplier Bill No" @bind-Value="@model.dict["SupplierBillNo"]" ColSize="col-md-3"/>
        <T_Input Title="Purchase Date" Type="date" @bind-Value="@model.dict["PurchaseBillDate"]" ColSize="col-md-3"/>
        <T_Input Title="Due Date" Type="date" @bind-Value="@model.dict["DueDate"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_RInput Title="Supplier *" Layout="1" TableName="SupplierMaster" PrimaryColumn="SupplierCode" DisplayColumn="SupplierName" Value="@model.dict["SupplierCode"]" ValueChanged="OnSupplierChanged" ColSize="col-md-6"/>
        <div class="col-md-3">
            <label class="form-label">Mode of Pay</label>
            <select class="form-control" @bind="@model.dict["ModeOfPay"]">
                <option value="CASH">Cash</option>
                <option value="CARD">Card</option>
                <option value="UPI">UPI</option>
                <option value="CHEQUE">Cheque</option>
                <option value="CREDIT">Credit</option>
                <option value="NEFT">NEFT</option>
                <option value="RTGS">RTGS</option>
            </select>
        </div>
        <T_Checkbox Title="Cancelled" @bind-Value="@model.dict["Cancelled"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Checkbox Title="Consider In Accounts" @bind-Value="@model.dict["ConsiderInAccounts"]" ColSize="col-md-6"/>
        <T_Textarea Title="Narration" @bind-Value="@model.dict["Narration"]" ColSize="col-md-6"/>
    </T_Row>
    <TableView TableName="Purchase Bill Details" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Sr. No.</th>
            <th>Product</th>
            <th>Rate</th>
            <th>Quantity</th>
            <th>Discount</th>
            <th>GST%</th>
            <th>Taxable Amount</th>
            @if(GstStateCode == 27){
                <th>CGST/SGST</th>
            }
            else{
                <th>IGST</th>
            }
            <th>Total GST</th>
            <th>Net Amount</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i < detailComponents.Count; i++){
                int index = i;
                <PurchaseBillDetail SerialNo="@(index+1)" 
                                    PurchaseBillNo="@model.dict["PurchaseBillNo"]" 
                                    OnRemove="HandleRemove" 
                                    OnCalculationChanged="CalculateTotals"
                                    InitialDataRow="detailRows.Count > index ? detailRows[index] : null"
                                    GstStateCode=@GstStateCode
                                    @ref="detailComponents[index]" />
            }
        </TableRows>
        <TableFooter>
            Total Count : @detailComponents.Count
        </TableFooter>
    </TableView>
    <T_SummaryCard >
        <T_Input Title="Total Amount" Layout=2 ReadOnly @bind-Value="@model.dict["TotalAmount"]" Placeholder="-"/>
        <T_Input Title="GST Amount" Layout=2 ReadOnly @bind-Value="@model.dict["GSTAmount"]" Placeholder="-"/>
        <T_Input Title="Discount" Layout=2 @bind-Value="@model.dict["Discount"]" ChangeFunction="CalculateTotals"/>
        <T_Input Title="Add/Less" Layout=2 @bind-Value="@model.dict["AddLess"]" ChangeFunction="CalculateTotals"/>
        <T_Input Title="Rounding" Layout=2 @bind-Value="@model.dict["Rounding"]" ChangeFunction="CalculateTotals"/>
        <T_Input Title="Net Amount" Layout=2 ReadOnly @bind-Value="@model.dict["NetAmount"]" Placeholder="-"/>
    </T_SummaryCard>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style="" OnClick="HandleClear"/>
    <T_Button Text="View" Style="" OnClick="HandleView"/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>

</T_Frm>

@code{
    private T_Msg Msg;
    public DotNetObjectReference<PurchaseBill> dotNetRef;

    // Component references and data rows
    private List<PurchaseBillDetail> detailComponents = new();
    public List<DataRow> detailRows = new();

    Model model = new Model("PurchaseBillHead", "PurchaseBillNo", "A");
    ClsDatabase db = new ClsDatabase();
    public int GstStateCode;

    private bool isViewing = false;
    private bool isEditing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    private void OnSupplierChanged(string supplierCode)
    {
        model.dict["SupplierCode"] = supplierCode;
        UpdateGstStateCode();
        StateHasChanged();
    }

    private void UpdateGstStateCode(){
        GstStateCode = Convert.ToInt32(db.GetScalar($"Select SupplierStateCode from SupplierMaster where SupplierCode = {model.dict["SupplierCode"]}"));
    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        detailComponents.Add(null); // Placeholder for @ref
        detailRows.Add(null); // Placeholder for new row
        StateHasChanged();
    }

    public void HandleEdit(DataRow row){
        HandleClear();
        isEditing = true;
        model.Populate(row);
        UpdateGstStateCode();

        DataTable dataTable = db.GetDataTable($"Select * from PurchaseBillDetails where PurchaseBillNo='{model.dict["PurchaseBillNo"]}'");
        foreach(DataRow detailRow in dataTable.Rows){
            detailRows.Add(detailRow);
            detailComponents.Add(null); // @ref will be set after render
        }
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleSave(){
        try{
            // Save all detail components
            bool allDetailsSaved = true;
            if(isEditing)
                db.ExecuteQuery($"Delete From PurchaseBillDetails where PurchaseBillNo='{model.dict["PurchaseBillNo"]}'");
            for(int i=0; i<detailComponents.Count; i++){
                var detail = detailComponents[i];
                if(detail != null){
                    bool saved = detail.SaveDetail();
                    if(!saved) allDetailsSaved = false;
                }
            }
            if(!allDetailsSaved){
                throw new Exception("Failed to save some details");
            }

            // Save the parent
            bool er;
            if(isEditing) er = model.Update();
            else er = model.Save();

            if(!er) throw new Exception("Failed to save header");

            await Msg.Success();
        }
        catch(Exception e){
            await Msg.SaveError();
        }
    }

    [JSInvokable]
    public void HandleClear(){
        model.Clear();
        detailComponents.Clear();
        detailRows.Clear();
        isEditing = false;
        isViewing = false;
        StateHasChanged();
    }

    public void HandleClose(){
        isViewing = false;
    }

    public void HandleDelete(DataRow row){
        string pk = row["PurchaseBillNo"].ToString();
        db.ExecuteQuery($"Delete From PurchaseBillHead where PurchaseBillNo='{pk}'");
        db.ExecuteQuery($"Delete From PurchaseBillDetails where PurchaseBillNo='{pk}'");
    }

    public void HandleRemove(int serialNo){
        int index = serialNo - 1;
        if (index >= 0 && index < detailComponents.Count)
        {
            detailComponents.RemoveAt(index);
            if(detailRows.Count > index)detailRows.RemoveAt(index);
            CalculateTotals();
            StateHasChanged();
        }
    }

    private void CalculateTotals()
    {
        float totalAmount = 0;
        float gstAmount = 0;

        foreach(var detail in detailComponents){
            if(detail != null){
                totalAmount += detail.GetTotalAmount();
                gstAmount += detail.GetGstAmount();
            }
        }

        model.dict["TotalAmount"] = totalAmount.ToString("F2");
        model.dict["GSTAmount"] = gstAmount.ToString("F2");
        
        // Calculate net amount
        float discount = float.TryParse(model.dict["Discount"], out float d) ? d : 0;
        float addLess = float.TryParse(model.dict["AddLess"], out float al) ? al : 0;
        float rounding = float.TryParse(model.dict["Rounding"], out float r) ? r : 0;
        
        float netAmount = totalAmount + gstAmount - discount + addLess + rounding;
        model.dict["NetAmount"] = netAmount.ToString("F2");

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["ModeOfPay"])) model.dict["ModeOfPay"] = "CASH";
        if (string.IsNullOrEmpty(model.dict["ConsiderInAccounts"])) model.dict["ConsiderInAccounts"] = "1";
    }
}