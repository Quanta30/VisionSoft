@using System.Data
@namespace VisionSoft.Components.Transactions.PurchaseBill
@rendermode InteractiveServer

<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    <td>
        @SerialNo
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="PhysicalStockView" PrimaryColumn="ProductName" DisplayColumn="ProductName" Value=@StockName ValueChanged="OnStockChanged"/>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Discount"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <select class="form-control form-control-sm" value="GstCategoryCode" @onchange="OnGstCategoryChanged">
                <option value="1">0% GST</option>
                <option value="2">5% GST</option>
                <option value="3">12% GST</option>
                <option value="4">18% GST</option>
                <option value="5">28% GST</option>
            </select>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" Value="@taxableAmount.ToString("F2")" ReadOnly="true" Placeholder=""/>
        </div>
    </td>
    <td>@if(GstStateCode == 27){
            @(gst > 0 ? (gst/2).ToString("F2") : "0.00")
        }
        else{
            @(gst > 0 ? (gst).ToString("F2"): "0.00")
        }
    </td>
    <td>
        @gst.ToString("F2")
    </td>
    <td>
        @netAmount.ToString("F2")
    </td>
</tr>

@code {
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public string PurchaseBillNo { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }
    [Parameter] public int GstStateCode {get; set;}

    private Model model = new Model("PurchaseBillDetails", "");
    private Utilities utilities = new Utilities();
    private ClsDatabase db = new ClsDatabase();
    private float taxableAmount = 0;
    private float gst = 0;
    private float netAmount = 0;
    private int GstCategoryCode = 2;
    private float PurchaseRate = 0;
    public string StockName = "";
    protected override void OnParametersSet()
    {
            model.dict["PurchaseBillNo"] = PurchaseBillNo;
            model.dict["SrNo"] = SerialNo.ToString();
        
            Calculate();
        
    }

    protected override void OnAfterRender(bool firstRender){
        if (firstRender && InitialDataRow != null)
        {
            Console.WriteLine("Initializing Value");
            model.Populate(InitialDataRow);
            // Determine GstCategoryCode from non-zero GST fields
            if (float.TryParse(model.dict["GST5APPAMOUNT"], out float gst5) && gst5 > 0) GstCategoryCode = 2;
            else if (float.TryParse(model.dict["GST12APPAMOUNT"], out float gst12) && gst12 > 0) GstCategoryCode = 3;
            else if (float.TryParse(model.dict["GST18APPAMOUNT"], out float gst18) && gst18 > 0) GstCategoryCode = 4;
            else if (float.TryParse(model.dict["GST28APPAMOUNT"], out float gst28) && gst28 > 0) GstCategoryCode = 5;
            else GstCategoryCode = 1;
            Calculate();
            StockName = utilities.StockIdToName(model.dict["StockID"]);
            StateHasChanged();
        }
    }


    private void OnStockChanged(string sname)
    {
        model.dict["StockID"] = utilities.StockNameToId(sname);
        StockName = sname;
        UpdateStockDetails();
        Calculate();
        StateHasChanged();
    }

    private void UpdateStockDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["StockID"]) && model.dict["StockID"] != "0")
        {
            try
            {
                string query = $"SELECT PurchaseRate, GstCategoryCode FROM PhysicalStock WHERE StockID = '{model.dict["StockID"]}'";
                DataTable result = db.GetDataTable(query);

                if (result.Rows.Count > 0)
                {
                    DataRow row = result.Rows[0];
                    float.TryParse((row["PurchaseRate"]).ToString(), out float pr);
                    PurchaseRate = pr;
                    GstCategoryCode = row["GstCategoryCode"] != DBNull.Value ? Convert.ToInt32(row["GstCategoryCode"]) : 2;
                }
                else
                {
                    Console.WriteLine("No stock found for the selected item");
                    PurchaseRate = 0;
                    GstCategoryCode = 2;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting stock details: {ex.Message}");
                PurchaseRate = 0;
                GstCategoryCode = 2;
            }
        }
    }

    private void OnGstCategoryChanged(ChangeEventArgs e)
    {
        GstCategoryCode = Convert.ToInt32(e.Value);
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    public async Task HandleRemove()
    {
        Console.WriteLine($"Removing row with SerialNo: {SerialNo}");
        await OnRemove.InvokeAsync(SerialNo);
    }

    public bool SaveDetail()
    {
        try
        {
            Console.WriteLine($"Saving detail {SerialNo}");
            model.dict["PurchaseBillNo"] = PurchaseBillNo;
            model.dict["SrNo"] = SerialNo.ToString();

            if (string.IsNullOrEmpty(model.dict["StockID"]) || model.dict["StockID"] == "0")
            {
                Console.WriteLine("Cannot save - no stock selected");
                return false;
            }

            if (!float.TryParse(model.dict["Quantity"], out float quantity) || quantity <= 0)
            {
                Console.WriteLine("Cannot save - invalid quantity");
                return false;
            }

            Calculate();

            // Clear all GST fields
            string[] gstPercentages = { "0", "5", "12", "18", "28" };
            foreach (string pr in gstPercentages)
            {
                model.dict[$"GST{pr}APPAMOUNT"] = "0";
                model.dict[$"CGST{pr}AMOUNT"] = "0";
                model.dict[$"SGST{pr}AMOUNT"] = "0";
                model.dict[$"IGST{pr}APPAMOUNT"] = "0";
                model.dict[$"IGST{pr}AMOUNT"] = "0";
                model.dict[$"UTGST{pr}APPAMOUNT"] = "0";
                model.dict[$"UTGST{pr}AMOUNT"] = "0";
            }

            // Set the relevant GST fields based on GstCategoryCode
            string percent = GetGstPercent().ToString("F0");
            if(GstStateCode == 27){
                model.dict[$"GST{percent}APPAMOUNT"] = taxableAmount.ToString("F2");
                model.dict[$"CGST{percent}AMOUNT"] = (gst / 2).ToString("F2");
                model.dict[$"SGST{percent}AMOUNT"] = (gst / 2).ToString("F2");
            }
            else{
                model.dict[$"IGST{percent}APPAMOUNT"] = taxableAmount.ToString("F2");
                model.dict[$"IGST{percent}AMOUNT"] = (gst).ToString("F2");
            }


            UpdatePhysicalStock();
            bool saved = model.Save();

            if (saved)
            {
                Console.WriteLine($"Detail {SerialNo} saved successfully");
            }
            else
            {
                Console.WriteLine($"Failed to save detail {SerialNo}");
            }

            return saved;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving detail {SerialNo}: {ex.Message}");
            return false;
        }
    }

    private void UpdatePhysicalStock()
    {
        utilities.AdjustStock(model.dict["StockId"], "ADD", model.dict["Quantity"]);
    }

    private float GetGstPercent()
    {
        return GstCategoryCode switch
        {
            1 => 0f,
            2 => 5f,
            3 => 12f,
            4 => 18f,
            5 => 28f,
            _ => 0f
        };
    }

    private void Calculate()
    {
        float gstPercent = GetGstPercent();
        if (
            float.TryParse(model.dict["Quantity"], out float quantity) &&
            float.TryParse(model.dict["Discount"], out float discount))
        {
            float gross = PurchaseRate * quantity;
            taxableAmount = gross - discount;
            gst = taxableAmount * gstPercent / 100f;
            netAmount = taxableAmount + gst;
        }
        else
        {
            taxableAmount = 0;
            gst = 0;
            netAmount = 0;
        }
    }

    public void OnChange(string value)
    {
        Console.WriteLine(model.dict["Quantity"]);
        Console.WriteLine("Change In Details");
        float.TryParse(model.dict["Rate"], out float pr);
        PurchaseRate = pr;
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    public float GetTotalAmount() => netAmount;
    public float GetGstAmount() => gst;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["SaleRate"])) model.dict["SaleRate"] = "0";
        if (string.IsNullOrEmpty(model.dict["Quantity"])) model.dict["Quantity"] = "1";
        if (string.IsNullOrEmpty(model.dict["Discount"])) model.dict["Discount"] = "0";
        Calculate();
    }
}