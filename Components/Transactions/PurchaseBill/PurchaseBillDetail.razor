@using System.Data
@namespace VisionSoft.Components.Transactions.PurchaseBill
@rendermode InteractiveServer
<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    <td>
        @SerialNo
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="PhysicalStockView" PrimaryColumn="ProductName" DisplayColumn="ProductName" Value=@StockName ValueChanged="OnStockChanged"/>
    </td>
    <td>
      <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" Placeholder="" ChangeFunction="OnChange"/>
      </div>     
    </td>
    <td>
      <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["SaleRate"]" Placeholder="" ChangeFunction="OnChange"/>
      </div>     
    </td>
    <td>
      <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" Placeholder="" ChangeFunction="OnChange"/>
      </div>  
    </td>
    <td>
      <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Discount"]" Placeholder="" ChangeFunction="OnChange"/>
      </div>  
    </td>
    <td>
        <div style="width:70px">
            <select class="form-control form-control-sm" value="@GstCategoryCode" @onchange="OnGstChange">
                <option value="1">0% GST</option>
                <option value="2">5% GST</option>
                <option value="3">12% GST</option>
                <option value="4">18% GST</option>
                <option value="5">28% GST</option>
            </select>
      </div>
    </td>
    <td>
      <div style="width:70px">
            <T_Input Title="" Layout="3" Placeholder="" Type="number" Value="@taxableAmount.ToString("F2")" ReadOnly="true"/>
      </div>  
    </td>
    <td>
        @((gst/2).ToString("F2"))
    </td>
    <td>
        @gst.ToString("F2")
    </td>
    <td>
        @netAmount.ToString("F2")
    </td>
</tr>

@code {
    [Parameter] public EventCallback<int> OnRemove{get; set;}
    [Parameter] public int SerialNo {get; set;}
    [Parameter] public string PurchaseBillNo {get; set;}
    [Parameter] public EventCallback<int> OnCalculationChanged{get; set;}
    [Parameter] public Model model{get; set;}
    
    public float gst = 0;
    public float taxableAmount = 0;
    public float netAmount = 0;
    public int GstCategoryCode = 2;
    public float gstPercent = 0;
    public string StockName="";
    private ClsDatabase db = new ClsDatabase();
    [Parameter] public bool ToSave{get; set;} = false;
    private bool isSaved = false;

    protected override void OnParametersSet(){
        model.dict["PurchaseBillNo"] = PurchaseBillNo;
        model.dict["SrNo"] = SerialNo.ToString();
        
        // Fix the condition - use AND instead of OR
        if(!string.IsNullOrEmpty(model.dict["StockID"]) && model.dict["StockID"] != "0"){
            try{
                StockName = db.GetScalar($@"select ProductName from 
                                                PhysicalStock ps join ProductMaster pm 
                                                on ps.ProductCode = pm.ProductCode
                                                where StockId = {model.dict["StockID"]}");
            }
            catch(Exception ex){
                Console.WriteLine($"Error getting stock name: {ex.Message}");
                StockName = "";
            }
        }
        
        Calculate();
        Console.WriteLine($"On Parameter set {isSaved} {ToSave}");
        if(!isSaved && ToSave){
            HandleSave();
            isSaved = true;
        }
    }
    private void OnStockChanged(string sname)
    {          
        StockName = sname;
        model.dict["StockId"] = db.GetScalar($@"select StockID from 
                                            PhysicalStock ps join ProductMaster pm 
                                            on ps.ProductCode = pm.ProductCode
                                            where ProductName = '{sname}'");
        UpdateStockDetails();
        Calculate();

    }
    private void OnGstChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int gstCode))
        {
            GstCategoryCode = gstCode;
            Calculate();
            OnCalculationChanged.InvokeAsync();
            StateHasChanged();
        }
    }

    private void UpdateStockDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["StockID"]))
        {
            try
            {
                string query = $"SELECT PurchaseRate, SaleRate, GstCategoryCode FROM PhysicalStock WHERE StockID = '{model.dict["StockID"]}'";
                DataTable result = db.GetDataTable(query);
                
                if (result.Rows.Count > 0)
                {
                    DataRow row = result.Rows[0];
                    
                    if (row["PurchaseRate"] != DBNull.Value)
                    {
                        model.dict["Rate"] = row["PurchaseRate"].ToString();
                    }
                    
                    if (row["SaleRate"] != DBNull.Value)
                    {
                        model.dict["SaleRate"] = row["SaleRate"].ToString();
                    }
                    
                    if (row["GstCategoryCode"] != DBNull.Value && int.TryParse(row["GstCategoryCode"].ToString(), out int gstCode))
                    {
                        GstCategoryCode = gstCode;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting stock details: {ex.Message}");
                model.dict["Rate"] = "0";
                model.dict["SaleRate"] = "0";
            }
        }
    }

    public async Task HandleRemove(){
        Console.WriteLine("Removing the row");
        Console.WriteLine(SerialNo);
        await OnRemove.InvokeAsync(SerialNo-1);
    }

    public void HandleSave(){
        Console.WriteLine("Saving the Detail");
        model.dict["PurchaseBillNo"] = PurchaseBillNo;
        model.dict["SrNo"] = SerialNo.ToString();
        
        // Save GST details based on percentage
        string percent = gstPercent.ToString("F0");
        model.dict[$"GST{percent}APPAMOUNT"] = taxableAmount.ToString();
        model.dict[$"CGST{percent}AMOUNT"] = (gst/2).ToString();
        model.dict[$"SGST{percent}AMOUNT"] = (gst/2).ToString();
        
        // Update stock quantity and rates (add to physical stock)
        UpdatePhysicalStock();
        
        model.Save();
        model.Clear();
        isSaved = false;
    }

    private void UpdatePhysicalStock()
    {
        if (!string.IsNullOrEmpty(model.dict["StockID"]) && 
            !string.IsNullOrEmpty(model.dict["Quantity"]))
        {
            try
            {
                float quantity = float.Parse(model.dict["Quantity"]);
                float purchaseRate = float.TryParse(model.dict["Rate"], out float pr) ? pr : 0;
                float salesRate = float.TryParse(model.dict["SaleRate"], out float sr) ? sr : 0;
                
                // Update stock quantity (add to existing stock) and rates
                string updateQuery = $@"
                    UPDATE PhysicalStock 
                    SET Quantity = Quantity + {quantity},
                        PurchaseRate = {purchaseRate},
                        SaleRate = {salesRate}
                    WHERE StockID = {model.dict["StockID"]}";
                
                db.ExecuteQuery(updateQuery);
                Console.WriteLine($"Updated PhysicalStock for StockID: {model.dict["StockID"]}, Added Quantity: {quantity}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating physical stock: {ex.Message}");
            }
        }
    }

    private void Calculate(){
        // Get GST percentage
        gstPercent = GstCategoryCode switch
        {
            1 => 0f,   // 0% GST
            2 => 5f,   // 5% GST  
            3 => 12f,  // 12% GST
            4 => 18f,  // 18% GST
            5 => 28f,  // 28% GST
            _ => 0f
        };

        if (float.TryParse(model.dict["Rate"], out float rate) &&
            float.TryParse(model.dict["Quantity"], out float quantity))
        {
            float discount = float.TryParse(model.dict["Discount"], out float d) ? d : 0f;
            
            // Calculate taxable amount: (Rate Ã— Quantity) - Discount
            taxableAmount = (rate * quantity) - discount;
            
            // Calculate GST
            gst = (taxableAmount * gstPercent) / 100f;
            
            // Calculate net amount
            netAmount = taxableAmount + gst;
            
            // Store for parent calculations
            model.dict2["TotalAmount"] = (rate * quantity).ToString();
            model.dict2["Gst"] = gst.ToString();
            model.dict2["Discount"] = discount.ToString();
        }
        else
        {
            taxableAmount = 0f;
            gst = 0f;
            netAmount = 0f;
        }
    }

    public void OnChange(string value){
        Console.WriteLine("Change In Details");
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        // Initialize default values if empty
        if (string.IsNullOrEmpty(model.dict["Rate"])) model.dict["Rate"] = "0";
        if (string.IsNullOrEmpty(model.dict["SaleRate"])) model.dict["SaleRate"] = "0";
        if (string.IsNullOrEmpty(model.dict["Quantity"])) model.dict["Quantity"] = "1";
        if (string.IsNullOrEmpty(model.dict["Discount"])) model.dict["Discount"] = "0";
        
        UpdateStockDetails();
        Calculate();
    }
}