@using System.Data
@namespace VisionSoft.Components.Transactions.RepairyInward
@rendermode InteractiveServer
<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="RepairyOutwardHead" PrimaryColumn="RepairyOutwardNo" DisplayColumn="RepairyOutwardNo" Value="@model.dict["RepairyOutwardNo"]" ValueChanged="OnRepairyOutwardChanged"/>
    </td>
    <td>
        <div style="width:200px">
            @itemDetails
        </div>
    </td>
    <td>
      <div style="width:80px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" Placeholder="" ChangeFunction="OnChange"/>
      </div>     
    </td>
    <td>
      <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" Placeholder="" ChangeFunction="OnChange"/>
      </div>  
    </td>
    <td>
        @amount.ToString("F2")
    </td>
</tr>

@code {
    [Parameter] public EventCallback<int> OnRemove{get; set;}
    [Parameter] public int SerialNo {get; set;}
    [Parameter] public string EntryNo {get; set;}
    [Parameter] public EventCallback<int> OnCalculationChanged{get; set;}
    [Parameter] public Model model{get; set;}
    
    public float amount = 0;
    public string itemDetails = "";
    private ClsDatabase db = new ClsDatabase();

    protected override void OnParametersSet(){
        model.dict["EntryNo"] = EntryNo;
        Calculate();
    }

    private void OnRepairyOutwardChanged(string repairyOutwardNo)
    {   
        model.dict["RepairyOutwardNo"] = repairyOutwardNo;
        UpdateRepairyOutwardDetails();
        Calculate();
        StateHasChanged();
    }

    private void UpdateRepairyOutwardDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["RepairyOutwardNo"]) && model.dict["RepairyOutwardNo"] != "0")
        {
            try
            {
                // Get details from RepairyOutward to show what was sent for repair
                string query = $@"
                    SELECT ROH.CustomerCode, ROH.EntryDate, ROD.ProductCode, ROD.Quantity as OutwardQuantity,
                           PM.ProductName, CM.CustomerName
                    FROM RepairyOutwardHead ROH
                    LEFT JOIN RepairyOutwardDetails ROD ON ROH.RepairyOutwardNo = ROD.RepairyOutwardNo
                    LEFT JOIN ProductMaster PM ON ROD.ProductCode = PM.ProductCode
                    LEFT JOIN CustomerMaster CM ON ROH.CustomerCode = CM.CustomerCode
                    WHERE ROH.RepairyOutwardNo = '{model.dict["RepairyOutwardNo"]}'";
                
                DataTable result = db.GetDataTable(query);
                
                if (result.Rows.Count > 0)
                {
                    DataRow row = result.Rows[0];
                    
                    // Build item details string
                    string productName = row["ProductName"]?.ToString() ?? "N/A";
                    string customerName = row["CustomerName"]?.ToString() ?? "N/A";
                    string outwardDate = row["EntryDate"] != DBNull.Value ? 
                        Convert.ToDateTime(row["EntryDate"]).ToString("dd/MM/yyyy") : "N/A";
                    string outwardQty = row["OutwardQuantity"]?.ToString() ?? "0";
                    
                    itemDetails = $"{productName}\nCustomer: {customerName}\nSent: {outwardDate}\nQty: {outwardQty}";
                    
                    // Auto-populate quantity with outward quantity
                    model.dict["Quantity"] = outwardQty;
                }
                else
                {
                    itemDetails = "Repairy Outward not found";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting repairy outward details: {ex.Message}");
                itemDetails = "Error loading details";
            }
        }
        else
        {
            itemDetails = "";
        }
    }

    public async Task HandleRemove(){
        Console.WriteLine("Removing the row");
        await OnRemove.InvokeAsync(SerialNo-1);
    }

    public void HandleSave(){
        Console.WriteLine("Saving the Detail");
        model.dict["EntryNo"] = EntryNo;
        
        Calculate();
        
        // Update repair status and stock
        UpdateRepairStatus();
        
        model.Save();
        model.Clear();
    }

    private void UpdateRepairStatus()
    {
        if (!string.IsNullOrEmpty(model.dict["RepairyOutwardNo"]) && 
            !string.IsNullOrEmpty(model.dict["Quantity"]))
        {
            try
            {
                float quantity = float.Parse(model.dict["Quantity"]);
                
                // Mark repairy outward as completed/returned
                string updateQuery = $@"
                    UPDATE RepairyOutwardHead 
                    SET RepairCompleted = 1, ReturnDate = GETDATE()
                    WHERE RepairyOutwardNo = {model.dict["RepairyOutwardNo"]}";
                
                db.ExecuteQuery(updateQuery);
                
                // Add repaired items back to stock if needed
                // This depends on your business logic - whether repaired items go back to regular stock
                // or are returned to customer directly
                
                Console.WriteLine($"Updated Repair Status for RepairyOutwardNo: {model.dict["RepairyOutwardNo"]}, Quantity: {quantity}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating repair status: {ex.Message}");
            }
        }
    }

    private void Calculate(){
        if (float.TryParse(model.dict["Rate"], out float rate) &&
            float.TryParse(model.dict["Quantity"], out float quantity))
        {
            amount = rate * quantity;
            model.dict2["Amount"] = amount.ToString("F2");
        }
        else
        {
            amount = 0f;
            model.dict2["Amount"] = "0";
        }
    }

    public void OnChange(string value){
        Console.WriteLine("Change In Details");
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        // Initialize default values if empty
        if (string.IsNullOrEmpty(model.dict["Rate"])) model.dict["Rate"] = "0";
        if (string.IsNullOrEmpty(model.dict["Quantity"])) model.dict["Quantity"] = "1";
        
        UpdateRepairyOutwardDetails();
        Calculate();
    }
}