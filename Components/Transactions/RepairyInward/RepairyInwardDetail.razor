@using System.Data
@namespace VisionSoft.Components.Transactions.RepairyInward
@rendermode InteractiveServer
<tr>
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    <td>
        @SerialNo
    </td>
    <td>
        <T_RInput Title="" Layout="3" TableName="RepairyOutwardHead" PrimaryColumn="RepairyOutwardNo" DisplayColumn="RepairyOutwardNo" Value="@model.dict["RepairyOutwardNo"]" ValueChanged="OnRepairyOutwardChanged"/>
    </td>
    <td>
        <div style="width:200px">
            @itemDetails
        </div>
    </td>
    <td>
        <div style="width:80px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>
    <td>
        @amount.ToString("F2")
    </td>
</tr>

@code {
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public string EntryNo { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }

    private Model model = new Model("RepairyInwardDetails", "");
    private ClsDatabase db = new ClsDatabase();
    public string itemDetails = "";
    public float amount = 0;

    protected override void OnParametersSet(){
        if (InitialDataRow != null)
        {
            model.Populate(InitialDataRow);
            UpdateRepairyOutwardDetails();
        }
        else
        {
            model.Clear();
            model.dict["EntryNo"] = EntryNo;
            model.dict["SrNo"] = SerialNo.ToString();
        }
        Calculate();
    }

    private void OnRepairyOutwardChanged(string repairyOutwardNo)
    {
        try
        {
            model.dict["RepairyOutwardNo"] = repairyOutwardNo;
            Console.WriteLine($"RepairyOutward changed - RepairyOutwardNo: {repairyOutwardNo}");
            UpdateRepairyOutwardDetails();
            Calculate();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error in OnRepairyOutwardChanged: {ex.Message}");
        }
    }

    private void UpdateRepairyOutwardDetails()
    {
        if (!string.IsNullOrEmpty(model.dict["RepairyOutwardNo"]) && model.dict["RepairyOutwardNo"] != "0")
        {
            try
            {
                string query = $@"
                    SELECT ROH.CustomerCode, ROH.EntryDate, ROD.ProductCode, ROD.Quantity as OutwardQuantity,
                           PM.ProductName, CM.CustomerName
                    FROM RepairyOutwardHead ROH
                    LEFT JOIN RepairyOutwardDetails ROD ON ROH.RepairyOutwardNo = ROD.RepairyOutwardNo
                    LEFT JOIN ProductMaster PM ON ROD.ProductCode = PM.ProductCode
                    LEFT JOIN CustomerMaster CM ON ROH.CustomerCode = CM.CustomerCode
                    WHERE ROH.RepairyOutwardNo = '{model.dict["RepairyOutwardNo"]}'";
                
                DataTable result = db.GetDataTable(query);
                
                if (result.Rows.Count > 0)
                {
                    DataRow row = result.Rows[0];
                    string productName = row["ProductName"]?.ToString() ?? "N/A";
                    string customerName = row["CustomerName"]?.ToString() ?? "N/A";
                    string outwardDate = row["EntryDate"] != DBNull.Value ? 
                        Convert.ToDateTime(row["EntryDate"]).ToString("dd/MM/yyyy") : "N/A";
                    string outwardQty = row["OutwardQuantity"]?.ToString() ?? "0";
                    model.dict["ProductCode"] = row["ProductCode"]?.ToString() ?? "";
                    
                    itemDetails = $"{productName}\nCustomer: {customerName}\nSent: {outwardDate}\nQty: {outwardQty}";
                    model.dict["Quantity"] = outwardQty;
                }
                else
                {
                    itemDetails = "Repairy Outward not found";
                    model.dict["Quantity"] = "1";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting repairy outward details: {ex.Message}");
                itemDetails = "Error loading details";
                model.dict["Quantity"] = "1";
            }
        }
        else
        {
            itemDetails = "";
            model.dict["Quantity"] = "1";
        }
    }

    public async Task HandleRemove()
    {
        Console.WriteLine($"Removing row with SerialNo: {SerialNo}");
        await OnRemove.InvokeAsync(SerialNo);
    }

    public bool SaveDetail()
    {
        try
        {
            Console.WriteLine($"Saving detail {SerialNo}");
            model.dict["EntryNo"] = EntryNo;
            model.dict["SrNo"] = SerialNo.ToString();
            if (string.IsNullOrEmpty(model.dict["RepairyOutwardNo"]) || model.dict["RepairyOutwardNo"] == "0")
            {
                Console.WriteLine("Cannot save - no repairy outward selected");
                return false;
            }
            Calculate();
            model.dict["Amount"] = amount.ToString("F2");
            UpdateRepairStatusAndStock();
            bool saved = model.Save();
            if (saved)
            {
                Console.WriteLine($"Detail {SerialNo} saved successfully");
            }
            else
            {
                Console.WriteLine($"Failed to save detail {SerialNo}");
            }
            return saved;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving detail {SerialNo}: {ex.Message}");
            return false;
        }
    }

    private void UpdateRepairStatusAndStock()
    {
        if (!string.IsNullOrEmpty(model.dict["RepairyOutwardNo"]) && 
            !string.IsNullOrEmpty(model.dict["Quantity"]))
        {
            try
            {
                float quantity = float.Parse(model.dict["Quantity"]);
                string updateQuery = $@"
                    UPDATE RepairyOutwardHead 
                    SET RepairCompleted = 1, ReturnDate = GETDATE()
                    WHERE RepairyOutwardNo = '{model.dict["RepairyOutwardNo"]}'";
                db.ExecuteQuery(updateQuery);
                if (!string.IsNullOrEmpty(model.dict["ProductCode"]))
                {
                    string stockUpdateQuery = $@"
                        UPDATE PhysicalStock 
                        SET Quantity = Quantity + {quantity}
                        WHERE ProductCode = '{model.dict["ProductCode"]}'";
                    db.ExecuteQuery(stockUpdateQuery);
                    Console.WriteLine($"Updated PhysicalStock for ProductCode: {model.dict["ProductCode"]}, Quantity: +{quantity}");
                }
                Console.WriteLine($"Updated Repair Status for RepairyOutwardNo: {model.dict["RepairyOutwardNo"]}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating repair status or stock: {ex.Message}");
            }
        }
    }

    private void Calculate()
    {
        if (float.TryParse(model.dict["Rate"], out float rate) &&
            float.TryParse(model.dict["Quantity"], out float quantity))
        {
            amount = rate * quantity;
        }
        else
        {
            amount = 0f;
        }
    }

    public void OnChange(string value)
    {
        Console.WriteLine("Change In Details");
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    public float GetAmount() => amount;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["Rate"])) model.dict["Rate"] = "0";
        if (string.IsNullOrEmpty(model.dict["Quantity"])) model.dict["Quantity"] = "1";
        Calculate();
    }
}