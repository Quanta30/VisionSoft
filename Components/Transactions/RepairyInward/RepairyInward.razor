@page "/RepairyInward"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.RepairyInward
@rendermode InteractiveServer 

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="RepairyInwardHead" OnClosed="HandleClose" EditClicked="HandleEdit" DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Repairy Inward">
<ChildContent>
    <T_Row>
        <T_Input Title="Entry No *" ReadOnly=true @bind-Value="@model.dict["EntryNo"]" ColSize="col-md-3"/>
        <T_Input Title="Entry Date" Type="date" @bind-Value="@model.dict["EntryDate"]" ColSize="col-md-3"/>
        <T_RInput Title="Supplier/Repair Center" Layout="1" TableName="SupplierMaster" PrimaryColumn="SupplierCode" DisplayColumn="SupplierName" Value="@model.dict["SupplierCode"]" ValueChanged="OnSupplierChanged" ColSize="col-md-6"/>
    </T_Row>
    <T_Row>
        <div class="col-md-3">
            <label class="form-label">Mode of Pay</label>
            <select class="form-control" @bind="@model.dict["ModeOfPay"]">
                <option value="CASH">Cash</option>
                <option value="CARD">Card</option>
                <option value="UPI">UPI</option>
                <option value="CHEQUE">Cheque</option>
                <option value="CREDIT">Credit</option>
                <option value="NEFT">NEFT</option>
                <option value="RTGS">RTGS</option>
            </select>
        </div>
        <T_Input Title="Total Amount" ReadOnly Layout=2 @bind-Value="@model.dict["Amount"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Cancelled" @bind-Value="@model.dict["Cancelled"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Consider In Accounts" @bind-Value="@model.dict["ConsiderInAccounts"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Textarea Title="Narration" @bind-Value="@model.dict["Narration"]" ColSize="col-md-12"/>
    </T_Row>
    <TableView TableName="Repairy Inward Details" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Sr. No.</th>
            <th>Repairy Outward No</th>
            <th>Item Details</th>
            <th>Repair Rate</th>
            <th>Quantity</th>
            <th>Amount</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i < detailComponents.Count; i++){
                int index = i;
                <RepairyInwardDetail 
                    SerialNo="@(index+1)" 
                    EntryNo="@model.dict["EntryNo"]" 
                    OnRemove="@((idx) => HandleRemove(idx))"
                    OnCalculationChanged="CalculateTotals"
                    InitialDataRow="detailRows.Count > index ? detailRows[index] : null"
                    @ref="detailComponents[index]" />
            }
        </TableRows>
        <TableFooter>
            Total Items: @detailComponents.Count | Total Amount: @model.dict["Amount"]
        </TableFooter>
    </TableView>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style="" OnClick="HandleClear"/>
    <T_Button Text="View" Style="" OnClick="HandleView"/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>
</T_Frm>

@code {
    private T_Msg Msg;
    public DotNetObjectReference<RepairyInward> dotNetRef;

    Model model = new Model("RepairyInwardHead", "EntryNo");
    private List<RepairyInwardDetail> detailComponents = new();
    public List<DataRow> detailRows = new();
    ClsDatabase db = new ClsDatabase();

    private bool isViewing = false;
    private bool isAddClicked = false;
    private bool isEditing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            Console.WriteLine("First Render");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    private void OnSupplierChanged(string supplierCode)
    {
        model.dict["SupplierCode"] = supplierCode;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        detailComponents.Add(null);
        StateHasChanged();
    }

    public void HandleEdit(DataRow row)
    {
        HandleClear();
        isEditing = true;
        model.Populate(row);
        DataTable dataTable = db.GetDataTable($"Select * from RepairyInwardDetails where EntryNo='{model.dict["EntryNo"]}'");
        foreach(DataRow detailRow in dataTable.Rows)
        {
            detailRows.Add(detailRow);
            detailComponents.Add(null);
        }
        isViewing = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleSave(){
        Console.WriteLine("Saving");
        try{
            if (string.IsNullOrEmpty(model.dict["SupplierCode"]) || model.dict["SupplierCode"] == "0")
            {
                await Msg.Error("Please select a supplier/repair center.");
                return;
            }
            if (detailComponents.Count == 0)
            {
                await Msg.Error("Please add at least one repair item.");
                return;
            }
            bool allDetailsSaved = true;
            if(isEditing){
                db.ExecuteQuery($"Delete From RepairyInwardDetails where EntryNo='{model.dict["EntryNo"]}'");
            }
            foreach(var detail in detailComponents){
                if(detail != null){
                    bool saved = detail.SaveDetail();
                    if(!saved) allDetailsSaved = false;
                }
            }
            if(!allDetailsSaved){
                throw new Exception("Failed to save some details");
            }
            bool er;
            if(isEditing) er = model.Update();
            else er = model.Save();
            if(!er) throw new Exception("Failed to save header");
            await Msg.Success();
        }
        catch(Exception e){
            Console.WriteLine($"Save error: {e.Message}");
            await Msg.SaveError();
        }
    }

    [JSInvokable]
    public void HandleClear(){
        Console.WriteLine("Clear Form");
        model.Clear();
        detailComponents.Clear();
        detailRows.Clear();
        isEditing = false;
        isAddClicked = false;
        isViewing = false;
        StateHasChanged();
    }

    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
    }

    public void HandleDelete(DataRow row){
        string pk = row["EntryNo"].ToString();
        db.ExecuteQuery($"Delete From RepairyInwardHead where EntryNo='{pk}'");
        db.ExecuteQuery($"Delete From RepairyInwardDetails where EntryNo='{pk}'");
    }

    public void HandleRemove(int serialNo){
        Console.WriteLine($"Removing Row with SerialNo {serialNo}");
        int index = serialNo - 1;
        if (index >= 0 && index < detailComponents.Count)
        {
            detailComponents.RemoveAt(index);
            if(detailRows.Count > index)detailRows.RemoveAt(index);
            Console.WriteLine($"Removed item at index {index}. New count: {detailComponents.Count}");
            CalculateTotals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Invalid index {index} for removal. Count: {detailComponents.Count}");
        }
    }

    private void CalculateTotals()
    {
        float totalAmount = 0;

        foreach(var detail in detailComponents){
            if(detail != null){
                totalAmount += detail.GetAmount();
            }
        }

        model.dict["Amount"] = totalAmount.ToString("F2");
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["EntryDate"]))
            model.dict["EntryDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        if (string.IsNullOrEmpty(model.dict["ModeOfPay"]))
            model.dict["ModeOfPay"] = "CASH";
        if (string.IsNullOrEmpty(model.dict["ConsiderInAccounts"]))
            model.dict["ConsiderInAccounts"] = "true";
        if (string.IsNullOrEmpty(model.dict["Cancelled"]))
            model.dict["Cancelled"] = "false";
    }
}