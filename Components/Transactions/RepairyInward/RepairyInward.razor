@page "/RepairyInward"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.RepairyInward
@rendermode InteractiveServer 

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="RepairyInwardHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Repairy Inward">
<ChildContent>
    <T_Row>
        <T_Input Title="Entry No *" ReadOnly=true @bind-Value="@model.dict["EntryNo"]" ColSize="col-md-3"/>
        <T_Input Title="Entry Date" Type="date" @bind-Value="@model.dict["EntryDate"]" ColSize="col-md-3"/>
        <T_RInput Title="Supplier/Repair Center" Layout="1" TableName="SupplierMaster" PrimaryColumn="SupplierCode" DisplayColumn="SupplierName" Value="@model.dict["SupplierCode"]" ValueChanged="OnSupplierChanged" ColSize="col-md-6"/>
    </T_Row>
    <T_Row>
        <div class="col-md-3">
            <label class="form-label">Mode of Pay</label>
            <select class="form-control" @bind="@model.dict["ModeOfPay"]">
                <option value="CASH">Cash</option>
                <option value="CARD">Card</option>
                <option value="UPI">UPI</option>
                <option value="CHEQUE">Cheque</option>
                <option value="CREDIT">Credit</option>
                <option value="NEFT">NEFT</option>
                <option value="RTGS">RTGS</option>
            </select>
        </div>
        <T_Input Title="Total Amount" @bind-Value="@model.dict["Amount"]" ColSize="col-md-3" ReadOnly/>
        <T_Checkbox Title="Cancelled" @bind-Value="@model.dict["Cancelled"]" ColSize="col-md-3"/>
        <T_Checkbox Title="Consider In Accounts" @bind-Value="@model.dict["ConsiderInAccounts"]" ColSize="col-md-3"/>
    </T_Row>
    <T_Row>
        <T_Textarea Title="Narration" @bind-Value="@model.dict["Narration"]" ColSize="col-md-12"/>
    </T_Row>
    <TableView TableName="Repairy Inward Details" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Repairy Outward No</th>
            <th>Item Details</th>
            <th>Repair Rate</th>
            <th>Quantity</th>
            <th>Amount</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i<details.Count; i++){
                <RepairyInwardDetail SerialNo=@(i+1) 
                                EntryNo=@model.dict["EntryNo"] 
                                OnRemove="HandleRemove" model="@details[i]" OnCalculationChanged="CalculateTotals"/> 
            }
        </TableRows>
        <TableFooter>
            Total Items: @details.Count | Total Amount: @totalAmount.ToString("F2")
        </TableFooter>
    </TableView>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style="" OnClick="HandleClear"/>
    <T_Button Text="View" Style="" OnClick="HandleView"/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>

</T_Frm>

@code{
    //ELEMENT REFERENCES
    private T_Msg Msg;
    public DotNetObjectReference<RepairyInward> dotNetRef;
    
    //Models and Class Objects
    Model model = new Model("RepairyInwardHead", "EntryNo");
    List<Model> details = new List<Model>();
    ClsDatabase db = new ClsDatabase();
   
    //BooleanValues
    private bool isViewing = false;
    private bool isAddClicked = false;
    private bool isEditing = false;

    //Calculation Variables
    private decimal totalAmount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            Console.WriteLine("First Render");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    private void OnSupplierChanged(string supplierCode)
    {
        model.dict["SupplierCode"] = supplierCode;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        Model detail = new Model("RepairyInwardDetails", "");
        details.Add(detail);
        StateHasChanged();
    }

    public void HandleEdit(DataRow row){
        HandleClear();
        isEditing = true;
        model.Populate(row);
        Console.WriteLine(model.dict["EntryNo"]);
        DataTable dataTable = db.GetDataTable($"Select * from RepairyInwardDetails where EntryNo='{model.dict["EntryNo"]}'");
        Console.WriteLine(dataTable.Rows.Count);
        foreach(DataRow row1 in dataTable.Rows){
            Model detail = new Model("RepairyInwardDetails", "");
            Console.WriteLine("Adding Detail");
            detail.Populate(row1);
            details.Add(detail);
        }
        CalculateTotals();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleSave(){
        Console.WriteLine("Saving");
        
        // Validation
        if (string.IsNullOrEmpty(model.dict["SupplierCode"]) || model.dict["SupplierCode"] == "0")
        {
            await Msg.Error("Please select a supplier/repair center.");
            return;
        }

        if (details.Count == 0)
        {
            await Msg.Error("Please add at least one repair item.");
            return;
        }

        try{
            bool er = model.Save();
            foreach(Model detail in details){
                if(!er)throw new Exception();
                er = detail.Save();
            }
            if(!er)throw new Exception();
            await Msg.Success();
        }
        catch(Exception e){
            await Msg.SaveError();
        }
    }

    [JSInvokable]
    public void HandleClear(){
        Console.WriteLine("Clear Form");
        model.Clear();
        details.Clear();    
        isEditing=false;
        isAddClicked=false;
        isViewing=false;  
        totalAmount = 0;
        StateHasChanged();
    }

    public void HandleClose(){
        isAddClicked = false;
        isViewing = false;
    }

    public void HandleDelete(DataRow row){
        string pk = row["EntryNo"].ToString();
        db.ExecuteQuery($"Delete From RepairyInwardHead where EntryNo='{pk}'");
        db.ExecuteQuery($"Delete From RepairyInwardDetails where EntryNo='{pk}'");
    }

    public void HandleRemove(int i){
        Console.WriteLine($"Removing Row in Parent {i}");
        if (i >= 0 && i < details.Count)
        {
            details.RemoveAt(i);
            Console.WriteLine($"Count At {i}");
            CalculateTotals();
            StateHasChanged();
        }
    }

    // Calculate totals method
    private void CalculateTotals()
    {
        totalAmount = 0;

        foreach(Model detail in details){
            totalAmount += decimal.TryParse(detail.dict2["Amount"], out decimal amount) ? amount : 0;
        }

        model.dict["Amount"] = totalAmount.ToString("F2");
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // Initialize default values
        if (string.IsNullOrEmpty(model.dict["EntryDate"])) 
        {
            model.dict["EntryDate"] = DateTime.Now.ToString("yyyy-MM-dd");
        }
        if (string.IsNullOrEmpty(model.dict["ModeOfPay"])) model.dict["ModeOfPay"] = "CASH";
        if (string.IsNullOrEmpty(model.dict["ConsiderInAccounts"])) model.dict["ConsiderInAccounts"] = "true";
        if (string.IsNullOrEmpty(model.dict["Cancelled"])) model.dict["Cancelled"] = "0";
    }
}