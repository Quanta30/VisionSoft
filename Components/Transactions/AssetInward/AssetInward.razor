@page "/AssetInward"
@inject IJSRuntime JS
@using System.Data
@using VisionSoft.Components.Transactions.AssetInward
@rendermode InteractiveServer 

<T_Msg @ref="Msg"/>
@if(isViewing){
    <FrmView TableName="AssetInwardHead" OnClosed="HandleClose" EditClicked="HandleEdit"
        DeleteClicked="HandleDelete"/>
}
<T_Frm FormName="Asset Inward">
<ChildContent>
    <T_Row>
        <T_Input Title="Entry No *" ReadOnly=true @bind-Value="@model.dict["EntryNo"]" ColSize="col-md-6"/>
        <T_Input Title="Entry Date" Type="date" @bind-Value="@model.dict["EntryDate"]" ColSize="col-md-6"/>
    </T_Row>
    <T_Row>
        <T_RInput Title="Department *" Layout="1" TableName="DepartmentMaster" PrimaryColumn="DepartmentCode" DisplayColumn="DepartmentName" Value="@model.dict["DepartmentCode"]" ValueChanged="OnDepartmentChanged" ColSize="col-md-12"/>
    </T_Row>
    <TableView TableName="Asset Inward Details" HandleAdd="HandleAdd">
        <TableHeads>
            <th>Action</th>
            <th>Sr. No.</th>
            <th>Item Name</th>
            <th>Stock Item</th>
            <th>Pack</th>
            <th>Quantity</th>
            <th>Rate</th>
            <th>Amount</th>
        </TableHeads>
        <TableRows>
            @for(int i = 0; i < detailComponents.Count; i++){
                int index = i;
                <AssetInwardDetail 
                    SerialNo="@(index+1)"
                    EntryNo="@model.dict["EntryNo"]"
                    OnRemove="HandleRemove"
                    OnCalculationChanged="CalculateTotals"
                    InitialDataRow="detailRows.Count > index ? detailRows[index] : null"
                    @ref="detailComponents[index]" />
            }
        </TableRows>
        <TableFooter>
            Total Items: @detailComponents.Count | Total Amount: @totalAmount.ToString("F2")
        </TableFooter>
    </TableView>
</ChildContent>

<CardFooterContent>
    <T_Button Text="Save" Style="" OnClick="HandleSave"/>
    <T_Button Text="Clear" Style="" OnClick="HandleClear"/>
    <T_Button Text="View" Style="" OnClick="HandleView"/>
    <T_Button Text="Print" Style=""/>
</CardFooterContent>

</T_Frm>

@code{
    private T_Msg Msg;
    public DotNetObjectReference<AssetInward> dotNetRef;

    // Component references and data rows
    private List<AssetInwardDetail> detailComponents = new();
    public List<DataRow> detailRows = new();

    // Models and Class Objects
    Model model = new Model("AssetInwardHead", "EntryNo");
    ClsDatabase db = new ClsDatabase();

    // State
    private bool isViewing = false;
    private bool isEditing = false;
    private decimal totalAmount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupFormKeyHandler", dotNetRef);
        }
    }

    private void OnDepartmentChanged(string departmentCode)
    {
        model.dict["DepartmentCode"] = departmentCode;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleView(){
        isViewing = !isViewing;
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleAdd(){
        detailComponents.Add(null); // Placeholder for @ref
        detailRows.Add(null); // Placeholder for new row
        StateHasChanged();
    }

    public void HandleEdit(DataRow row){
        HandleClear();
        isEditing = true;
        model.Populate(row);

        DataTable dataTable = db.GetDataTable($"Select * from AssetInwardDetails where EntryNo='{model.dict["EntryNo"]}' ORDER BY SrNo");
        foreach(DataRow detailRow in dataTable.Rows){
            detailRows.Add(detailRow);
            detailComponents.Add(null); // @ref will be set after render
        }
        CalculateTotals();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HandleSave(){
        // Validation
        if (string.IsNullOrEmpty(model.dict["DepartmentCode"]) || model.dict["DepartmentCode"] == "0")
        {
            await Msg.Error("Please select a department.");
            return;
        }
        if (detailComponents.Count == 0)
        {
            await Msg.Error("Please add at least one asset item.");
            return;
        }

        try{
            // Save all detail components
            bool allDetailsSaved = true;
            if(isEditing)
                db.ExecuteQuery($"Delete From AssetInwardDetails where EntryNo='{model.dict["EntryNo"]}'");
            for(int i=0; i<detailComponents.Count; i++){
                var detail = detailComponents[i];
                if(detail != null){
                    bool saved = detail.SaveDetail();
                    if(!saved) allDetailsSaved = false;
                }
            }
            if(!allDetailsSaved){
                throw new Exception("Failed to save some details");
            }

            // Save the parent
            bool er;
            if(isEditing) er = model.Update();
            else er = model.Save();

            if(!er) throw new Exception("Failed to save header");

            await Msg.Success();
        }
        catch(Exception e){
            Console.WriteLine($"Save error: {e.Message}");
            await Msg.SaveError();
        }
    }

    [JSInvokable]
    public void HandleClear(){
        model.Clear();
        detailComponents.Clear();
        detailRows.Clear();
        isEditing = false;
        isViewing = false;
        totalAmount = 0;
        StateHasChanged();
    }

    public void HandleClose(){
        isViewing = false;
    }

    public void HandleDelete(DataRow row){
        string pk = row["EntryNo"].ToString();
        db.ExecuteQuery($"Delete From AssetInwardHead where EntryNo='{pk}'");
        db.ExecuteQuery($"Delete From AssetInwardDetails where EntryNo='{pk}'");
    }

    public void HandleRemove(int serialNo){
        int index = serialNo - 1;
        if (index >= 0 && index < detailComponents.Count)
        {
            detailComponents.RemoveAt(index);
            if(detailRows.Count > index)detailRows.RemoveAt(index);
            CalculateTotals();
            StateHasChanged();
        }
    }

    private void CalculateTotals()
    {
        totalAmount = 0;
        foreach(var detail in detailComponents){
            if(detail != null){
                totalAmount += (decimal)detail.GetAmount();
            }
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(model.dict["EntryDate"])) 
            model.dict["EntryDate"] = DateTime.Now.ToString("yyyy-MM-dd");
    }
}