@using System.Data
@namespace VisionSoft.Components.Transactions.SalesBill
@using Microsoft.AspNetCore.Components

<tr>
    <!-- Remove Button -->
    <td>
        <T_Button Text="X" btnType="Danger" OnClick="HandleRemove" Style=""/>
    </td>
    <td>
        @SerialNo
    </td>

    <!-- Product Selection -->
    <td>
        <T_RInput Title="" Layout="3" TableName="PhysicalStockView" PrimaryColumn="ProductName" DisplayColumn="ProductName" Value=@StockName ValueChanged="OnStockChanged"/>
    </td>

    <!-- Rate Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Rate"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>

    <!-- Quantity Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Quantity"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>

    <!-- Discount Input -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Discount"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>

    <!-- Free Quantity -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" @bind-Value="@model.dict["Free"]" Placeholder="" ChangeFunction="OnChange"/>
        </div>
    </td>

    <!-- GST Category Dropdown -->
    <td>
        <div style="width:70px">
            <select class="form-control form-control-sm" value=@GstCategoryCode @onchange="OnGstCategoryChanged">
                <option value="1">0% GST</option>
                <option value="2">5% GST</option>
                <option value="3">12% GST</option>
                <option value="4">18% GST</option>
                <option value="5">28% GST</option>
            </select>
        </div>
    </td>

    <!-- Taxable Amount (ReadOnly) -->
    <td>
        <div style="width:70px">
            <T_Input Title="" Layout="3" Value="@taxableAmount.ToString("F2")" ReadOnly="true" Placeholder=""/>
        </div>
    </td>

    <!-- CGST/SGST -->
    <td>
        @if(GstStateCode == 27){
            @(gst > 0 ? (gst / 2).ToString("F2") : "0.00")
        }
        else{
            @(gst > 0 ? gst.ToString("F2") : "0.00")
        }
    </td>

    <!-- Total GST -->
    <td>
        @gst.ToString("F2")
    </td>

    <!-- Net Amount -->
    <td>
        @netAmount.ToString("F2")
    </td>

    <!-- Warranty Date -->
    <td>
        <div style="width:100px">
            <T_Input Title="" Layout="3" Type="date" @bind-Value="@model.dict["WarrantyTillDate"]" Placeholder=""/>
        </div>
    </td>
</tr>

@code {
    // Parameters passed from parent
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public int SerialNo { get; set; }
    [Parameter] public string SalesBillNo { get; set; }
    [Parameter] public EventCallback OnCalculationChanged { get; set; }
    [Parameter] public DataRow InitialDataRow { get; set; }
    [Parameter] public int GstStateCode{get; set;}

    // Model & helpers
    public Model model = new("SalesBillDetails", "");
    private ClsDatabase db = new();
    private Utilities utilities = new();

    // Calculation Fields
    public float taxableAmount = 0;
    public float gst = 0;
    public float netAmount = 0;
    public int GstCategoryCode = 1;
    public string StockName;

    protected override void OnParametersSet()
    {
        // Set sales bill ref & serial no
        model.dict["SalesBillNo"] = SalesBillNo;
        model.dict["SrNo"] = SerialNo.ToString();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Populate initial values if passed from edit/view
        if (InitialDataRow != null && firstRender)
        {
            model.Populate(InitialDataRow);
            StockName = utilities.StockIdToName(model.dict["StockId"]);
            Calculate();
            InitialDataRow = null;
            StateHasChanged();
        }
    }

    public void OnStockChanged(string sname)
    {
        try
        {
            StockName = sname;
            model.dict["StockId"] = utilities.StockNameToId(sname);
            UpdateStockDetails();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnStockChanged: {ex.Message}");
        }
    }

    private void UpdateStockDetails()
    {
        // Load default rate & GST category
        try
        {
            if (!string.IsNullOrEmpty(model.dict["StockId"]) && model.dict["StockId"] != "0")
            {
                var result = db.GetDataTable($"SELECT SaleRate, GstCategoryCode FROM PhysicalStock WHERE StockId = '{model.dict["StockId"]}'");
                if (result.Rows.Count > 0)
                {
                    var row = result.Rows[0];
                    model.dict["Rate"] = row["SaleRate"]?.ToString() ?? "0";
                    GstCategoryCode = Convert.ToInt32(row["GstCategoryCode"]);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting stock details: {ex.Message}");
            model.dict["Rate"] = "0";
            GstCategoryCode = 2;
        }
    }

    public async Task HandleRemove() => await OnRemove.InvokeAsync(SerialNo);

    public bool SaveDetail()
    {
        try
        {
            model.dict["SalesBillNo"] = SalesBillNo;
            model.dict["SrNo"] = SerialNo.ToString();

            if (string.IsNullOrEmpty(model.dict["StockId"]) || model.dict["StockId"] == "0")
                return false;

            Calculate();

            float percent = GetGstPercent();
            string pct = percent.ToString("F0");

            if(GstStateCode == 27){
                model.dict[$"GST{pct}APPAMOUNT"] = taxableAmount.ToString("F2");
                model.dict[$"CGST{pct}AMOUNT"] = (gst / 2).ToString("F2");
                model.dict[$"SGST{pct}AMOUNT"] = (gst / 2).ToString("F2");
            }
            else{
                model.dict[$"IGST{pct}APPAMOUNT"] = taxableAmount.ToString("F2");
                model.dict[$"IGST{pct}AMOUNT"] = (gst).ToString("F2");
            }

            UpdatePhysicalStock();
            return model.Save();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving detail: {ex.Message}");
            return false;
        }
    }

    private void UpdatePhysicalStock() => utilities.AdjustStock(model.dict["StockId"], "LESS", model.dict["Quantity"]);

    private float GetGstPercent() => GstCategoryCode switch
    {
        1 => 0f,
        2 => 5f,
        3 => 12f,
        4 => 18f,
        5 => 28f,
        _ => 0f
    };

    private void Calculate()
    {
        float rate = float.TryParse(model.dict["Rate"], out float r) ? r : 0;
        float qty = float.TryParse(model.dict["Quantity"], out float q) ? q : 0;
        float disc = float.TryParse(model.dict["Discount"], out float d) ? d : 0;
        float free = float.TryParse(model.dict["Free"], out float f) ? f : 0;

        float gross = rate * qty;
        taxableAmount = gross - disc - (rate * free);
        gst = taxableAmount * GetGstPercent() / 100f;
        netAmount = taxableAmount + gst;
    }

    public void OnGstCategoryChanged(ChangeEventArgs e)
    {
        GstCategoryCode = Convert.ToInt32(e.Value);
        OnChange("");
    }

    public void OnChange(string _) {
        Calculate();
        OnCalculationChanged.InvokeAsync();
    }

    public float GetTotalAmount() => netAmount;
    public float GetGstAmount() => gst;

    protected override void OnInitialized()
    {
        // Set defaults
        model.dict["Rate"] ??= "0";
        model.dict["Quantity"] ??= "1";
        model.dict["Discount"] ??= "0";
        model.dict["Free"] ??= "0";
        model.dict["WarrantyTillDate"] ??= DateTime.Now.AddYears(1).ToString("yyyy-MM-dd");
        Calculate();
    }
}
